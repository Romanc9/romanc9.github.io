<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/12/09/win10%E8%BD%AF%E4%BB%B6%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/"/>
    <url>/2023/12/09/win10%E8%BD%AF%E4%BB%B6%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="title-win10软件设置开机启动"><a href="#title-win10软件设置开机启动" class="headerlink" title="title: win10软件设置开机启动"></a>title: win10软件设置开机启动</h1><p>date: 2020-11-22 13:29:34<br>tags: win10<br>categories: 电脑</p><h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><p>我们打开文件夹：</p><p>C:\Users（用户）\Administrator（当前用户名）\AppData\Roaming\Microsoft\Windows\Start Menu\Programs（「开始」菜单）\Programs（程序）\Startup（启动 ）即可找到启动文件夹</p><center> <img src="https://s3.ax1x.com/2020/11/22/D83l80.png"></center><h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><p>在运行中粘贴以下路径回车打开</p><ol><li><p>按键win+r</p></li><li><pre><code>%USERPROFILE%\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code></pre><center> <img src="https://s3.ax1x.com/2020/11/22/D83oM8.png"></center></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/12/09/hello-world/"/>
    <url>/2023/12/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2020/12/03/test/test/"/>
    <url>/2020/12/03/test/test/</url>
    
    <content type="html"><![CDATA[<p><img src="/.io//12/03/test/test/nw.jpg" alt="本地图片"></p><img src="/.io//12/03/test/test/nw.jpg" class> <p>/.io//12/03/test/nw.jpg</p><img src="/.io//12/03/test/test/nw.jpg" class> <img src="/.io//12/03/test/test/nw.jpg" class title="img test"><p><img src="/.io//12/03/test/test/nw.jpg" alt="direct"></p><img src="/.io//12/03/test/test/nw.jpg" class title="avatar"><img src="/.io//12/03/test/test/nw.jpg" class title="ss"><p><img src="/.io//" alt="sssss"></p><p><img src="/.io//nw.jpg" alt="header"></p><img src="/.io//12/03/test/test/nw.jpg" class title="This is an example image">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF学习小记</title>
    <link href="/2020/12/03/CTF%E5%B0%8F%E8%AE%B0/"/>
    <url>/2020/12/03/CTF%E5%B0%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="持续更新，业余思考，仅供参考，有时间再改格式"><a href="#持续更新，业余思考，仅供参考，有时间再改格式" class="headerlink" title="持续更新，业余思考，仅供参考，有时间再改格式"></a>持续更新，业余思考，仅供参考，有时间再改格式</h1><h1 id="Q"><a href="#Q" class="headerlink" title="Q:"></a>Q:</h1><p>client啥意思？<br>网卡，虚拟网卡，</p><h2 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h2><ul><li><p>按照传输技术来分类</p><p><strong>以太网Ethernet 、ATM网、FDDI网可以算作一类</strong></p></li><li><p>按照区域和范围来分类</p><p><strong>互联网 Internet 、广域网 WAN、局域网LAN可以算作一类</strong>，<strong>属于OSI参考类型的数据链路层</strong></p></li><li><p><strong>互联网是范围概念；以太网是技术概念</strong></p></li><li><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201202201154687.png" alt="image-20201202201154687"></p></li></ul><p>1、简单来说，网络按照区域来划分，分为广域网和局域网。这只是按照使用区域大小来划分的。就像省和村的关系。<br>2、然后在这个小区域（局域网）里建设网络，就需要使用多种标准技术，其中电气标准中规定用双绞线还是单芯线等，这个电气标准中有以太网技术、令牌环网技术、ATM网技术、帧中继技术等，不要被以太网中这个网字迷惑，把它看成技术，我们是用了CSMA/CA技术（别名：以太网技术），使用方便、网络建造简洁，以太网技术就是流传开来。<br>3、局域网中物理网络按照以太网技术敷设完毕，还并不能通信，这个时候就需要其他技术标准，我们经常见到的TCP/IP技术，tcp/ip技术可以依托以太网技术、令牌环网技术等上使用，而且我们经常TCP/IP与以太网配合使用，所以我们日常中口语中容易将TCP/IP与以太网技术混在一起说。其实是不同层级的技术。</p><h2 id="因特网、互联网、以太网、局域网、万维网的区别"><a href="#因特网、互联网、以太网、局域网、万维网的区别" class="headerlink" title="因特网、互联网、以太网、局域网、万维网的区别"></a>因特网、互联网、以太网、局域网、万维网的区别</h2><ul><li><p>以太网可以说是局域网的一种，但是目前局域网大多数都是使用以太网标准，故可认为以太网就是局域网。然后，局域网之间的通信协议必须是相同的，即局域网内计算机（或计算机网络）只允许使用同一种通信规则进行通信。而不同的局域网之间，又可以通过其他任意的通信规则进行通信（内部只是用一种通信规则），这就构成了互联网。</p></li><li><p><strong>所以：以太网 &lt;= 局域网 &lt;= 互联网 != 因特网</strong></p><table><thead><tr><th>网络</th><th align="center">作用</th></tr></thead><tbody><tr><td>局域网：（Local Area Network，LAN）</td><td align="center">局域网是一个局部范围的计算计组，比如家庭网络就是一个小型的局域网，里面包含电脑、手机和平板等，他们共同连接到你家的路由器上。又比如学校的机房就是一个局域网，里面有几百几千台电脑，当机房无法上外网时，但是电脑之间仍可以通信，你们可以通过这个局域网来打CS 、玩红警。理论上，局域网是封闭的，并不可以上外网，可以只有两台电脑，也可以有上万台。</td></tr><tr><td>广域网：（WAN，Wide Area Network）</td><td align="center">广域网的范围就比较大了，可以把你家和别人家、各个省、各个国家连接起来相互通信。广域网和局域网都是从范围的角度来划分的，广域网也可以看成是很多个局域网通过路由器等相互连接起来。</td></tr><tr><td>以太网：(Ethernet)</td><td align="center">以太网可以看成是一种实现局域网通信的<strong>技术标准</strong>，是目前最广泛的<strong>局域网技术</strong>。以太网的运行速率有10Mbps,100Mbps,1Gbps,10Gbps的，它的传输介质有的是双绞线，有的是光纤。 简单的说，以太网就是在局域网内，把附近的设备连接起来，可以进行通讯。以太网与<a href="http://baike.baidu.com/view/285040.htm">IEEE802.3</a>系列标准相类似。</td></tr><tr><td>互联网：（internet）</td><td align="center">它的意思是“网络的网络”，是一个通用名词，泛指有多个计算机网络互连而成的网络，这些网络之间的通信协议（即通信规则）是可以任意的，互联网可以看成是局域网、广域网等组成的一个最大的网络，它可以把世界上各个地方的网路都连接起来，个人、政府、学校、企业，只要你能想到的，都包含在内。互联网是一种宽泛的概念，是一个极其庞大的网络。</td></tr><tr><td>因特网，（Internet）</td><td align="center">记住它与 internet 之间绝对不能使用等于号，因为 Internet 是一个专有名词，它是指当前全球最大的、开放的、有众多网络互相连接而成的特定的计算机网络，它采用 TCP/IP 协议族作为通信的规则，其前身是美国的 ARPNET</td></tr><tr><td>万维网（WWW）</td><td align="center"><strong>它不是一种网络</strong>，它是构建在互联网之上的一个系统/技术，这个系统由很多相互链接的超文本组成</td></tr></tbody></table></li></ul><h3 id="什么是网络？"><a href="#什么是网络？" class="headerlink" title="什么是网络？"></a>什么是网络？</h3><p>名词解释：计算机网络（network），就是将一台以上的计算机互连起来，互连的计算机之间可以实现通信，实现信息共享，这就是网络。</p><ul><li>互联网（internet），指的是网络的网络，英文小写字母开头，中文采用意译；它可以将多个隔离的网络连接起来，例如公司办公网就是一种互联网，它连接了多个办公楼的网络；</li><li>因特网（Internet）是专有名词，所以英文大写开头，中文采用音译；它是目前最大的互联网，它把全球的网络连接了起来；</li><li>局域网（Local Area Network，LAN）、广域网（Wide Area Network，WAN）和城域网（Metropolitan Area Network，MAN），这几个网络的区别是它们范围不同，中文采用意译；</li><li>以太网（Ethernet）是专有名词，所以英文大写开头，中文采用音译；以太网是局域网的一种，它还有另一个名字：IEEE 802.3，它非常厉害打败了历史上的其它局域网技术，是今天的主流；<strong>今天只要你插上网线那一定就是连入了以太网；如果你用手机连了WiFi，WiFi也是一种局域网，WiFi的另一个名字是：IEEE 802.11；可以说今天的局域网技术几乎被以太网和WiFi垄断了；</strong></li></ul><p>下面这些是网络：</p><ul><li>互联网、因特网、局域网、广域网、城域网</li></ul><p><strong>下面这些不是网络：</strong></p><ul><li>万维网（WWW），它不是一种网络，它是构建在互联网之上的一个系统，这个系统由很多相互链接的超文本组成</li><li><code>以太网和WiFi，它们是一种局域网技术</code></li></ul><h3 id="网络的分类"><a href="#网络的分类" class="headerlink" title="网络的分类"></a>网络的分类</h3><p>将网络按照传输介质划分：</p><ul><li>有线网络</li><li>无线网络</li></ul><p>将网络按照覆盖范围划分：</p><ul><li>个域网（PAN:Personal Area Network）覆盖范围大约1米，你的电脑、鼠标、键盘、显示器就组成了一个PAN</li><li>局域网（LAN:Local Area Network）比PAN大</li><li>城域网（MAN:Metropolitan Area Network）比LAN大</li><li>广域网（WAN:Wide Area Network）比MAN大</li></ul><h3 id="网络之间的关系"><a href="#网络之间的关系" class="headerlink" title="网络之间的关系"></a>网络之间的关系</h3><p>这些名词之间的关系：</p><ul><li>因特网是一种具体的互联网</li><li>以太网是一种具体的局域网技术</li><li>WiFi是一种具体的局域网技术</li></ul><h2 id="WIFI和WLAN的区别是什么"><a href="#WIFI和WLAN的区别是什么" class="headerlink" title="WIFI和WLAN的区别是什么"></a>WIFI和WLAN的区别是什么</h2><blockquote><p><a href="https://product.pconline.com.cn/itbk/wlbg/wireless/1305/3303939.html">https://product.pconline.com.cn/itbk/wlbg/wireless/1305/3303939.html</a></p><p><a href="https://tw.aboluowang.com/2019/1013/1354979.html">https://tw.aboluowang.com/2019/1013/1354979.html</a></p></blockquote><table><thead><tr><th>WLAN(Wireless Local Area Networks)</th><th>中文解释为：无线区域网络，它是一种数据传输<em>系统</em>。WLAN是利用射频技术进行数据传输，以此来实现通信和共享资源的网络体系</th></tr></thead><tbody><tr><td></td><td><strong>无线局域网的通信范围不受环境的限制，网络的传输范围也很广，最大可达到几十公里。在无线信号覆盖到的任何地方，用户将计算机任意移动，都能连接到网络。对于暂时性的工作小组或家庭组建网络而言，无线局域网是最合适不过的</strong></td></tr><tr><td>Wi-Fi</td><td>Wi-Fi是由无线访问节点（access point，AP）和无线网卡组成的无线网络。无线访问节点是传统有线局域网络与无线局域网络之间的桥梁，工作原理与一个内置无线发射器的hub（一个多端口的转发器）或者路由等同；无线网卡则是用来接收由无线访问节点发射的信号的设备</td></tr><tr><td></td><td>WiFi全称为Wireless Fidelity，中文意思是「无线保真」，是一个创建于IEE8.2.11标准的<strong>无线区域网技术</strong>，这种技术改善了基于IEE802.11标准的无线网络产品之间的互通性。在无线区域网的范畴是指「无线相容性认证」，是目前非常流行的一种无线网络技术</td></tr><tr><td></td><td><strong>WiFI技术与蓝牙技术相似，属于短距离的无线技术</strong></td></tr></tbody></table><ul><li><p>那WLAN与Wi-Fi有什么区别呢？</p><p>虽然很多人会将Wi-Fi与WLAN混为一谈，但实际上Wi-Fi只是WLAN技术的一部分。WLAN包含两个技术协议标准：IEEE802.11标准与HiperLAN标准，而IEEE802.11系列标准由Wi-Fi联盟负责推广，使用IEEE802.11系列协议的局域网就被称为Wi-Fi。但Wi-Fi在无线局域网的范畴是指“无线相容性认证”，实质上是一种商业认证，后来，慢慢被人们用来代指无线联网技术。所以，从包含关系上来说，Wi-Fi包含于WLAN中。</p></li></ul><ul><li><p>简而言之，Wi-Fi技术与蓝牙技术相同，是短距离无线技术。通俗来说，Wi-Fi也是一种无线联网技术，由网线转变为无线电波来连接网络。常见方式是，在一个无线路由器的电波有效覆盖范围内，都可以采用Wi-Fi连接方式进行联网。</p><p>因此，Wi-Fi最大的优势与WLAN相同，在于不用布线，不受布线条件的限制，所以适用于移动办公用户</p></li></ul><p>  <code>简单来说，Wlan是无线区域网的总称，Wifi是WLAN中应用最广的一种认证，两者的区别就是WLAN包含了WiFi，而且使用的范围更广。</code></p><h2 id="彻底明白ip地址，区分localhost、127-0-0-1和0-0-0-0"><a href="#彻底明白ip地址，区分localhost、127-0-0-1和0-0-0-0" class="headerlink" title="彻底明白ip地址，区分localhost、127.0.0.1和0.0.0.0"></a>彻底明白ip地址，区分localhost、127.0.0.1和0.0.0.0</h2><p><a href="https://www.jianshu.com/p/ad7cd1d5be45">https://www.jianshu.com/p/ad7cd1d5be45</a></p><h3 id="localhost"><a href="#localhost" class="headerlink" title="localhost"></a>localhost</h3><p><strong>localhost</strong>其实是<code>域名</code>，一般windows系统默认将<strong>localhost</strong>指向<code>127.0.0.1</code>，但是<strong>localhost</strong>并不等于<code>127.0.0.1</code>，<strong>localhost</strong>指向的<strong>IP地址</strong>是可以配置的</p><h3 id="127-0-0-1"><a href="#127-0-0-1" class="headerlink" title="127.0.0.1"></a>127.0.0.1</h3><p>首先我们要先知道一个概念，凡是以<code>127</code>开头的<strong>IP地址</strong>，都是<strong>回环地址（Loop back address）</strong>，其所在的回环接口一般被理解为虚拟网卡，并不是真正的路由器接口。</p><p>所谓的回环地址，通俗的讲，就是我们在主机上发送给<code>127</code>开头的<strong>IP地址</strong>的数据包会被发送的主机自己接收，根本传不出去，外部设备也无法通过回环地址访问到本机。</p><blockquote><p><strong>小说明</strong>：正常的<code>数据包</code>会从<code>IP层</code>进入<code>链路层</code>，然后发送到<code>网络</code>上；而给<code>回环地址</code>发送<code>数据包</code>，<code>数据包</code>会直接被发送主机的<code>IP层</code>获取，后面就没有<code>链路层</code>他们啥事了。</p></blockquote><p>而<code>127.0.0.1</code>作为<code>&#123;127&#125;</code>集合中的一员，当然也是个回环地址。只不过<code>127.0.0.1</code>经常被默认配置为<strong>localhost</strong>的<strong>IP地址</strong>。<br> 一般会通过<code>ping 127.0.0.1</code>来测试某台机器上的网络设备是否工作正常。</p><h3 id="0-0-0-0"><a href="#0-0-0-0" class="headerlink" title="0.0.0.0"></a>0.0.0.0</h3><p>首先，<code>0.0.0.0</code>是不能被<code>ping</code>通的。在服务器中，<code>0.0.0.0</code>并不是一个真实的的<strong>IP地址</strong>，它表示本机中所有的<strong>IPV4地址</strong>。监听<code>0.0.0.0</code>的端口，就是监听本机中所有<strong>IP</strong>的端口。</p><h3 id="本机IP"><a href="#本机IP" class="headerlink" title="本机IP"></a>本机IP</h3><p><strong>本机IP</strong>通常仅指在同一个局域网内，能同时被外部设备访问和本机访问的那些<strong>IP地址</strong>（可能不止一个）。像<code>127.0.0.1</code>这种一般是不被当作<strong>本机IP</strong>的。<strong>本机IP</strong>是与具体的网络接口绑定的，比如以太网卡、无线网卡或者PPP/PPPoE拨号网络的虚拟网卡，想要正常工作都要绑定一个地址，否则其他设备就不知道如何访问它。</p><h3 id="小例子剧场（帮助理解本机IP、127-0-0-1和0-0-0-0）"><a href="#小例子剧场（帮助理解本机IP、127-0-0-1和0-0-0-0）" class="headerlink" title="小例子剧场（帮助理解本机IP、127.0.0.1和0.0.0.0）"></a>小例子剧场（帮助理解本机IP、127.0.0.1和0.0.0.0）</h3><p>现在有两台pc在同一个局域网内，分别为pc1与pc2，pc1上有一个网卡，IP地址为<code>192.168.10.128</code></p><ul><li>pc1中sever监听<code>127.0.0.1</code>，则pc1中的client可以连上<code>127.0.0.1</code>，<code>192.168.10.128</code>连不上；而pc2中client都连不上。</li><li>pc1中sever监听<code>192.168.10.128</code>，则pc1中的client可以连上<code>192.168.10.128</code>，<code>127.0.0.1</code>连不上；而pc2中client能连上<code>192.168.10.128</code>。</li><li>pc1中sever监听<code>0.0.0.0</code>，则pc1中的client可以连上<code>127.0.0.1</code>和<code>192.168.10.128</code>，pc2中的client能连上<code>192.168.10.128</code>。</li></ul><p>Q:</p><p>server监听是啥意思？</p><p>client啥意思？</p><p>网卡，虚拟网卡，</p><p>局域网</p><h2 id="server监听是啥意思？-’端口‘解释"><a href="#server监听是啥意思？-’端口‘解释" class="headerlink" title="server监听是啥意思？+’端口‘解释"></a>server监听是啥意思？+’端口‘解释</h2><ul><li>首先了解一下TCP/IP协议中的端口指的是什么呢？如果把IP地址比作一间房子 ，端口就是出入这间房子的门。真正的房子只有几个门，但是一个IP地址的端口 可以有65536（即：256×256）个之多！端口是通过端口号来标记的，端口号只有整数，范围是从0 到65535（256×256-1）。<br>  在Internet上，各主机间通过TCP/IP协议发送和接收数据包，各个数据包根据其目的主机的ip地址来进行互联网络中的路由选择。可见，把数据包顺利的传送到目的主机是没有问题的。问题出在哪里呢?我们知道大多数操作系统都支持多程序（进程）同时运行，那么<strong>目的主机应该把接收到的数据包传送给众多同时运行的进程中的哪一个呢</strong>？<strong>显然这个问题有待解决，端口机制便由此被引入进来</strong>。<br>  本地操作系统会给那些有需求的进程分配协议端口（protocol port，即我们常说的端口），每个协议端口由一个正整数标识，如：80，139，445，等等。当目的主机接收到数据包后，将根据报文首部的目的端口号，把数据发送到相应端口，而与此端口相对应的那个进程将会领取数据并等待下一组数据的到来。说到这里，端口的概念似乎仍然抽象，那么继续跟我来，别走开。<br>  端口其实就是队，操作系统为各个进程分配了不同的队，数据包按照目的端口被推入相应的队中，等待被进程取用，在极特殊的情况下，这个队也是有可能溢出的，不过操作系统允许各进程指定和调整自己的队的大小。<br>  不光接受数据包的进程需要开启它自己的端口，发送数据包的进程也需要开启端口，这样，数据包中将会标识有源端口，以便接受方能顺利的回传数据包到这个端口。</li></ul><pre><code class="hljs armasm">一个数据包包括了文件，<span class="hljs-built_in">ip</span>，和端口号，<span class="hljs-built_in">ip</span>是为了服务器可以找到你的主机，端口号是你接受数据包的门户， 而所谓的端口监听，是指主机网络进程接受到<span class="hljs-built_in">IP</span>数据包后，察看其的目标端口是不是自己的端口号，如果是的话就接受该数据包进行处理。进行网络通讯的主机，既要发送数据，也要接受数据，所以就要开启相应的端口以接受数据。一个网络上的主机有可能开启多个网络进程（如即浏览网页又上QQ），也就是监听了多个端口。</code></pre><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p><a href="https://www.jianshu.com/p/d45540c86d2c">ping是什么</a></p><p><a href="https://blog.csdn.net/hebbely/article/details/54965989">https://blog.csdn.net/hebbely/article/details/54965989</a></p><ul><li>简单来说，「ping」是用来探测本机与网络中另一主机之间是否可达的命令，如果两台主机之间ping不通，则表明这两台主机不能建立起连接。ping是定位<strong>网络通不通</strong>的一个重要手段。</li><li><strong>ping可以检查网络是否连通，可以很好地帮助我们分析和判定网络故障</strong></li><li><strong>它所利用的原理是这样的：利用网络上机器IP地址的唯一性，给目标IP地址发送一个数据包，再要求对方返回一个同样大小的数据包来确定两台网络机器是否连接相通，时延是多少。</strong></li><li><strong>总结来说ping就是从某个数据包发送到服务器开始，到收到服务器反馈为止的时间就是ping，一般以毫秒计算。游戏中常常会用到ping的速度问题，比如：lol中ctrl+f就会出现ping值，一般ping值越高，说明服务器反馈时间长，游戏就会越卡。</strong></li><li><strong>ping是TCP/IP通信协议的一部分</strong></li></ul><pre><code class="hljs routeros">使用Ping检查连通性有五个步骤：*1. 使用ipconfig /all观察本地网络设置是否正确；2.<span class="hljs-built_in"> Ping </span>127.0.0.1  检查本地的TCP/IP协议有没有设置好；!!3. Ping本机IP地址，这样是为了检查本机的IP地址是否设置有误；!!4. Ping本网网关或本网IP地址，这样的是为了检查硬件设备是否有问题，也可以检查本机与本地网络连接是否正常；（在非局域网中这一步骤可以忽略）5. Ping远程IP地址，这主要是检查本网或本机与外部的连接是否正常。</code></pre><pre><code class="hljs angelscript">Pinging <span class="hljs-number">202.105</span><span class="hljs-number">.136</span><span class="hljs-number">.105</span> with <span class="hljs-number">32</span> bytes of data:Reply <span class="hljs-keyword">from</span> <span class="hljs-number">202.105</span><span class="hljs-number">.136</span><span class="hljs-number">.105</span>: bytes=<span class="hljs-number">32</span> time=<span class="hljs-number">590</span>ms TTL=<span class="hljs-number">114</span>Reply <span class="hljs-keyword">from</span> <span class="hljs-number">202.105</span><span class="hljs-number">.136</span><span class="hljs-number">.105</span>: bytes=<span class="hljs-number">32</span> time=<span class="hljs-number">590</span>ms TTL=<span class="hljs-number">114</span>Reply <span class="hljs-keyword">from</span> <span class="hljs-number">202.105</span><span class="hljs-number">.136</span><span class="hljs-number">.105</span>: bytes=<span class="hljs-number">32</span> time=<span class="hljs-number">590</span>ms TTL=<span class="hljs-number">114</span>Reply <span class="hljs-keyword">from</span> <span class="hljs-number">202.105</span><span class="hljs-number">.136</span><span class="hljs-number">.105</span>: bytes=<span class="hljs-number">32</span> time=<span class="hljs-number">601</span>ms TTL=<span class="hljs-number">114</span>Ping statistics <span class="hljs-keyword">for</span> <span class="hljs-number">202.105</span><span class="hljs-number">.136</span><span class="hljs-number">.105</span>:Packets: Sent = <span class="hljs-number">4</span>, Received = <span class="hljs-number">4</span>, Lost = <span class="hljs-number">0</span> (<span class="hljs-number">0</span>% loss),Approximate round trip times <span class="hljs-keyword">in</span> milli-seconds:Minimum = <span class="hljs-number">590</span>ms, Maximum = <span class="hljs-number">601</span>ms, Average = <span class="hljs-number">593</span>ms</code></pre><ul><li><p>Ping这个命令除了可以检查网络的连通和检测故障以外，还有一个比较有趣的用途，那就是可以利用它的一些返回数据，来估算你跟某台主机之间的速度是多少字节每秒</p></li><li><p>bytes=32表示ICMP报文中有32个字节的测试数据（这是估算速度的关键数据）</p></li><li><p>“时间=6ms”是往返时间。 </p><p>“已发送=4”发送多个秒包、”已接收=4”收到多个回应包、”丢失=0”丢弃了多少个；</p><p>Minmum 最小值 、MAXimun 最大值、Average 平均值。</p><p>所在图上来看，来回只用了6MS 时间，lost =0 即是丢包数为0，网络状态相当良好；</p></li></ul><pre><code class="hljs stylus">ping -t www<span class="hljs-selector-class">.baidu</span><span class="hljs-selector-class">.com</span>  <span class="hljs-comment">// Ping 指定的主机，直到停止。</span>例如命令：ping -t www<span class="hljs-selector-class">.baidu</span><span class="hljs-selector-class">.com</span> 那么机器会一直ping www<span class="hljs-selector-class">.baidu</span>.com直到我们按Ctrl+C键来停止。</code></pre><pre><code class="hljs stylus">ping -n www<span class="hljs-selector-class">.baidu</span><span class="hljs-selector-class">.com</span> <span class="hljs-comment">//定义向目标IP发送数据包的次数</span>例如命令：ping -n <span class="hljs-number">10</span> www<span class="hljs-selector-class">.baidu</span>.com，那么本地计算机就会ping www<span class="hljs-selector-class">.baidu</span>.com10次，如果不加-n 参数的话，系统默认是ping4次</code></pre><pre><code class="hljs markdown">ping -l www.baidu.com    //定义发送数据包的大小，默认为32字节，我们利用它可以最大定义到65500字节。例如命令：ping -l 100 [<span class="hljs-string">www.baidu.com</span>](<span class="hljs-link">https://link.jianshu.com?t=http://www.baidu.com</span>)，那么本地计算机就会用100字节的数据包去 ping [<span class="hljs-string">www.baidu.com</span>](<span class="hljs-link">https://link.jianshu.com?t=http://www.baidu.com</span>)，系统默认的数据包是32字节，最大的字节数是65，527。</code></pre><pre><code class="hljs angelscript">Ping <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>   <span class="hljs-comment">//127.0.0.1是本地循环地址</span></code></pre><ul><li>如果本地址无法Ping通，则表明本地机TCP/IP协议不能正常工作。</li></ul><h3 id="对Ping后返回信息的分析"><a href="#对Ping后返回信息的分析" class="headerlink" title="对Ping后返回信息的分析"></a>对Ping后返回信息的分析</h3><blockquote><h6 id="Request-timed-out"><a href="#Request-timed-out" class="headerlink" title="Request timed out"></a>Request timed out</h6></blockquote><p>这是大家经常碰到的提示信息，很多文章中说这是对方机器置了过滤ICMP数据包，从上面工作过程来看，这是不完全正确的，至少有下几种情况。　　<br> 　(1)  对方已关机，或者网络上根本没有这个地址：比如在上图中主机A中PING 192.168.0.7 ,或者主机B关机了，在主机A中PING 192.168.0.5 都会得到超时的信息。<br> 　(2) 对方与自己不在同一网段内，通过路由也无法找到对方，但有时对方确实是存在的，当然不存在也是返回超时的信息。<br> 　(3) 对方确实存在，但设置了ICMP数据包过滤(比如防火墙设置)。<br> 　怎样知道对方是存在，还是不存在呢，可以用带参数 -a 的Ping命令探测对方，如果能得到对方的NETBIOS名称，则说明对方是存在的，是有防火墙设置，如果得不到，多半是对方不存在或关机，或不在同一网段内</p><blockquote><ul><li>其他的见链接</li></ul></blockquote><h2 id="代理服务器"><a href="#代理服务器" class="headerlink" title="代理服务器"></a>代理服务器</h2><p><strong>需求描述</strong>：</p><p>　　最近几天接触了<strong>代理服务器</strong>这个词，突然想，代理到底是什么呢？</p><p>　　什么代理服务器呢，使用这个代理服务器的目的到底是啥呢？</p><p><strong>概念分析</strong>：</p><h3 id="1-代理proxy："><a href="#1-代理proxy：" class="headerlink" title="1.代理proxy："></a><strong>1.代理proxy：</strong></h3><p>　　首先从概念上讲，代理这个词，词语的汉语解释：<strong>受委托代表当事人进行某种活动。</strong></p><p>　　也就是说，代理的作用就是代替别人做一些事情，比如，代理律师，就是代表当事人进行法律的活动。</p><h3 id="2-代理服务器proxy-server"><a href="#2-代理服务器proxy-server" class="headerlink" title="2.代理服务器proxy server"></a><strong>2.代理服务器proxy server</strong></h3><p>　　我们将上面的概念进行类比，代理服务器也就是一台服务器，一般我们的请求，会直接发送给真实的服务器，</p><p>　　真实的服务器来响应我们的请求。那么代理服务器的作用，就是把我们的请求先发送给代理服务器，由代理</p><p>　　服务器来将请求发送给真实的目标服务器上。同时呢，代理服务器可以判断，是否要真的把我们的一些请求发送</p><p>　　给真实的服务器，比如，在公司，不能上外网，那么公司会提供一个代理服务器，通过这个代理服务器我们就能上</p><p>　　外网了，但是会发现，有些视频网站，特殊的网站是访问不了的，也就是我们的这些请求不满足代理服务器的请求要求。</p><p>　　简单来说：代理服务器，就是代替我们把请求发送到目标服务器。</p><h3 id="3-使用代理服务器的目的"><a href="#3-使用代理服务器的目的" class="headerlink" title="3.使用代理服务器的目的"></a><strong>3.使用代理服务器的目的</strong></h3><p>　　–1）提高性能</p><p>　　代理服务器会有缓存，如果多次请求，或者多个请求是同样的内容，可以跳过从真实服务器取数据的过程，而是直接从代理服务器上获取</p><p>　　对于有成千上万的请求来说，那么会减少时间的消耗，进而提高性能</p><p>　　–2）过滤请求</p><p>　　比如，公司的代理服务器会过滤一些请求，来阻止员工访问一些特定的网站。</p><p><a href="https://sites.google.com/site/2018pk/222">https://sites.google.com/site/2018pk/222</a></p><h2 id="浅谈代理"><a href="#浅谈代理" class="headerlink" title="浅谈代理"></a><strong><em>浅谈代理</em></strong></h2><p>首先要说明，我们这里要谈的代理，是代理服务器，英文名叫Proxy Server。一般来讲，对于我们这些普通的网民它的作用有三个（撇开一些高深的用处不谈，因为我们未必会用到） </p><p>一是通过它，我们可以访问到一些平时不能去的网站。不信你可以马上打开你的浏览器和输入“<a href="http://www.youtube.com”这个网址。怎样？不用看着浏览器在这里空等了，并不是你的网络速度慢，也不是没有这个网站，而是你访问不到它（网络上还有很多这些类型的网站哦）。为什么访问不到？这个问题嘛......说法有很多种，大部分都说是国内的网络被限制了访问，所以某些网站是不能去的。至于如何可以访问到这些网站？看完本文你就知道了！">www.youtube.com”这个网址。怎样？不用看着浏览器在这里空等了，并不是你的网络速度慢，也不是没有这个网站，而是你访问不到它（网络上还有很多这些类型的网站哦）。为什么访问不到？这个问题嘛......说法有很多种，大部分都说是国内的网络被限制了访问，所以某些网站是不能去的。至于如何可以访问到这些网站？看完本文你就知道了！</a> </p><p>二是通过它来加快我们浏览某些网站的速度。有时候我们访问一些国外或者港台网站，速度慢得像蜗牛一样。但只要你正确的选用代理服务器，速度就可以得到提升，有时候这些速度的提升可是很明显的哦！ </p><p>三是连接Internet与Intranet 充当firewall（防火墙）：因为所有内部网的用户通过代理服务器访问外界时，只映射为一个IP地址，所以外界不能直接访问到内部网；同时可以设置IP地址过滤，限制内部网对外部的访问权限；另外，两个没有互联的内部网，也可以通过第三方的代理服务器进行互联来交换信息。<br>如果你在以往浏览过程中出现过以上的情况，那么看来你有必要尝试一下使用代理服务器了。<br>为什么使用代理服务器可以使我们访问一些原本不能访问的网站呢？为什么使用它后浏览外国网站会比原来的快呢？形象的说：代理服务器是网络信息的中转站。在一般情况下，我们使用网络浏览器直接去连接其他Internet站点取得网络信息时，须送出Request信号来得到回答，然后对方再把信息以bit方式传送回来。 </p><p>代理服务器是介于浏览器和Web服务器之间的一台服务器，有了它之后，浏览器不是直接到Web服务器去取回网页而是向代理服务器发出请求，Request信号会先送到代理服务器，由代理服务器来取回浏览器所需要的信息并传送给你的浏览器。而且，大部分代理服务器都具有缓冲的功能，就好象一个大的Cache，它有很大的存储空间，它不断将新取得数据储存到它本机的存储器上，如果浏览器所请求的数据在它本机的存储器上已经存在而且是最新的，那么它就不重新从Web服务器取数据，而直接将存储器上的数据传送给用户的浏览器，这样就能显著提高浏览速度和效率（速度会随着代理服务器地理位置的不同以及网络传输情况而改变），而且国外的网络大部分都是没有限制访问网站或者所限制的不同，所以我们有很大的机会通过代理服务器去访问那些原本不能够去的网站。 </p><p>更重要的是：Proxy Server (代理服务器)是 Internet链路级网关所提供的一种重要的安全功能，它的工作主要在开放系统互联 (OSI) 模型的对话层。<br>proxy对于我们这么有用，那么究竟怎样才可以在诺大的网络上找寻这些服务器呢？这就要靠一些专门找寻proxy的软件了，下面就是几款常用软件的介绍：<br>1.Proxy Hunter<br>这是Proxy搜索软件的老大哥了,自从1.0推出以来,就倍受全国网友热爱,目前版本是3.0,这个Proxy Hunter有什么特点呢?搜索速度之快,是同类软件之首,同时带有预测搜索任务完成时间的功能,除了教育网外,不限制搜索IP地址范围,同时支持HTTP与SOCKS类Proxy的搜索和验证,具备对已搜索得的Proxy地址进行管理,使用,自动调度,再验证等先进的功能。当有一大堆Proxy,不知用哪个好时,这时你需要自动调度功能,将网络软件的Proxy设置为本机IP(127.0.0.1),端口8080,然后在Proxy Hunter搜索结果列表中将欲使用的Proxy按鼠标右键设为“使用”(Enable),这样Proxy Hunter就会根据当时各Proxy速度的快慢,选择一个或数个使用,很方便吧。</p><p>2.Proxy NOW系列<br>这是由网站自动更新软件Update NOW的作者开发的,由HTTP Proxy NOW、SOCKS Proxy NOW、FTP Proxy NOW三部分组成，顾名思义,功能是分别搜索上述三类Proxy用的,若是能将其合一在一个软件里就好了,Proxy NOW系列的优点是绝对不限制搜索IP范围,但没注册进入时会有延时,不过只有几秒钟,没大碍,搜索速度还可以,算是中规中矩,缺点是功能分散单一,可设置项较少,验证不那么完善。 </p><p>3.SOCKS Cat<br>这是专门搜索SOCKS Proxy的,同样不限制搜索IP地址范围,速度也比较快,据作者称,其速度只比Proxy Hunter慢些,不过在验证SOCKS Proxy方面要做得好,同时支持SOCKS4、SOCKS5的Proxy的搜索和验证,支持设置供验证的网页,设置最高连接数等,经实际使用,效果不错,如果能加入对HTTP Proxy的搜索和验证功能可能会更好。 </p><p>总结:三者以Proxy Hunter为较好,但也不能一棵树吊死,应具体情况具体分析,选择一个适合的来用。 </p><p>当然,有些搜索经验也应该掌握,搜索Proxy,如大海捞针,不掌握要领,可是要吃大亏的。大规模搜索,效果好,但成本高,耗时长,不值得推荐。经过实践,局部地区震荡IP搜索法较好。例如,你所在地有一大ISP或者是ICP,假设其IP地址为202.96.123.123,这时请以总数1275(255 × 5)为震荡范围,计算出应尝试搜索的范围是202.96.121.0至202.96.125.255,祝你好运!还有连接时间设长一点,以及注意加入以下端口8080(HTTP) 3128(HTTP) 80(HTTP) 1080(SOCKS)这样才不会有漏网之鱼。 </p><p>接下来将以ProxyHunter为例子，为大家讲解如何搜索proxy。<br>当你填加完任务后，返回到主界面，按蓝色的开始键，这样ProxyHunter就会开始搜索代理了。现在你需要做的事情就是盯住搜索结果栏和耐心地等待。 </p><p>服务器地址：这里出现的就是你搜索到的代理服务器的IP。<br>端口：这个是它所用的端口。 </p><p>类型：就是这个Proxy的类型。<br>验证状态：这个最重要，它的状态分几种，上图列出的就是其中几种状态，通常如果成功搜索到这个proxy的话，它会显示为“FREE”，那么你就可以直接使用这个proxy；如果显示为“要密码”的话，基本上你可以把这个proxy删除了，除非你有能力把它的密码破解吧…；要是显示“连接超时”或“连接失败”等其他状态的话，那么可能你现在的网络正处于繁忙状态，也有可能是这个proxy暂时关闭了，你可以隔一段时间再去验证一次。 </p><p>时间特性：这个数值影响到这个proxy的速度，它显示的是你的机器连接到proxy的时间，如果你有多个proxy供你选择话，那么就选一个相对数值小的一个吧，连接的时间越小就代表这个porxy越快。 </p><p>经过上一步的搜索，想必你已经搜索到几个“Free”属性的Proxy了吧？恭喜恭喜～<br>那么究竟怎样才可以用这些Proxy呢？其实很简单，大部分软件都有一些软件属性的选项，比如“Setting”和“Preferences”等等。而在这些选项里面通常会有“Proxy”这个选项，你只需要在“Proxy”选项里面填上你搜索出来的Proxy的IP的端口，那么就可以使用这个Proxy了。如果软件是中文的话那么就更加简单，只要在“设置代理服务器”里面填上就ok了。 </p><p>以浏览器IE6为例：<br>１、打开“工具”里面的“Internet选项”。<br>２、点选“连接”框。<br>３、如果你使用拨号上网的话，那么选择“设置”。如果你是使用局域网的话，那么选择“局域网设置”。<br>４、在里面就有“代理服务器”这个设置。先点击“使用代理服务器”，然后在“地址”上填上Proxy的IP，在“端口”填上端口，好了！大功告成。 </p><p>1.HTTP代理服务器 代理服务器英文全称是Proxy Server，其功能就是代理网络用户去取得网络信息。形象的说：它是网络信息的中转站。在一般情况下，我们使用网络浏览器直接去连接其他Internet站点取得网络信息时，须送出Request信号来得到回答，然后对方再把信息以bit方式传送回来。<br>代理服务器是介于浏览器和Web服务器之间的一台服务器，有了它之后，浏览器不是直接到Web服务器去取回网页而是向代理服务器发出请求，Request信号会先送到代理服务器，由代理服务器来取回浏览器所需要的信息并传送给你的浏览器。而且，大部分代理服务器都具有缓冲的功能，就好象一个大的Cache，它有很大的存储空间，它不断将新取得数据储存到它本机的存储器上，如果浏览器所请求的数据在它本机的存储器上已经存在而且是最新的，那么它就不重新从Web服务器取数据，而直接将存储器上的数据传送给用户的浏览器，这样就能显著提高浏览速度和效率。<br>更重要的是：Proxy Server(代理服务器)是Internet链路级网关所提供的一种重要的安全功能，它的工作主要在开放系统互联(OSI)模型的对话层。<br>主要的功能有：<br>1.突破自身IP访问限制，访问国外站点。如：教育网、169网等网络用户可以通过代理访问国外网站。<br>2.访问一些单位或团体内部资源，如某大学FTP(前提是该代理地址在该资源的允许访问范围之内)，使用教育网内地址段免费<br>代理服务器，就可以用于对教育 网开放的各类FTP下载上传，以及各类资料查询共享等服务。<br>3.突破中国电信的IP限制：中国电信用户有很多网站是被限制访问的，这种限制是人为的，不同Serve对地址的限制是不同的。所以不能访问时可以换一个国 外的代理服务器试试。<br>4.提高访问速度：通常代理服务器都设置一个较大的硬盘缓冲区，当有外界的信息通过时，同时也将其保存到缓冲区中，当其他用户再访问相同的信息时， 则直接由缓冲区中取出信息，传给用户，以提高访问速度。<br>5.隐藏真实IP：上网者也可以通过这种方法隐藏自己的IP，免受攻击。<br>2.SSL 代理<br>SSL是一种国际标准的加密及身份认证通信协议，您用的浏览器就支持此协议。SSL（Secure Sockets Layer）最初是由美国Netscape公司研究出来的，后来成为了Internet网上安全通讯与交易的标准。SSL协议使用通讯双方的客户证书以及CA根证书，允许客户/服务器应用以一种不能被偷听的方式通讯，在通讯双方间建立起了一条安全的、可信任的通讯通道。它具备以下基本特征：信息保密性、信息完整性、相互鉴定。 主要用于提高应用程序之间数据的安全系数。SSL协议的整个概念可以被总结为：一个保证任何安装了安全套接字的客户和服务器间事务安全的协议，它涉及所有TC/IP应用程序。<br>SSL代理:支持最高128位加密强度的http代理，可以作为访问加密网站的代理。加密网站是指以https://开始的网站。ssl的标准端口为443。<br>默认状态下，IIS使用端口443作为SSL端口。但是你也可以根据需要使用任意端口。你可以有很多站点，每个站点有一个非SSL端口数字和一个SSL端口数字。例如，你可以有一个称为ExampleSite的站点，可以把90作为非SSL端口，445作为SSL端口。用户输入<a href="http://www.examplesite.com/">http://www.ExampleSite.com</a> ;来访问非SSL版本。要访问其SSL版本，就要输入<a href="https://www.ExampleSite.com。他们也可以使用IP：端口数,比如">https://www.ExampleSite.com。他们也可以使用IP：端口数,比如</a> <a href="https://www..com:445。">https://www..com:445。</a><br>https:// 中的“s”非常重要，因为它告诉用户浏览器使用SSL端口。如果你使用了<a href="http://www.Example.com:445，那么什么也不会发生，浏览器只是等待，但是什么也不显示出来。如果你给一个非SSL端口使用https">http://www.Example.com:445，那么什么也不会发生，浏览器只是等待，但是什么也不显示出来。如果你给一个非SSL端口使用https</a> ，例如<a href="https://www.ExampleSite.com:90，会出现同样的情形。">https://www.ExampleSite.com:90，会出现同样的情形。</a><br>3.Socks 代理<br>是全能代理，就像有很多跳线的转接板，它只是简单地将一端的系统连接到另外一端。支持多种协议，包括http、ftp请求及其它类型的请求。它分socks 4 和socks 5两种类型，socks 4只支持TCP协议而socks 5支持TCP/UDP协议，还支持各种身份验证机制等协议。其标准端口为1080。<br>socks代理相应的采用socks协议的代理服务器就是SOCKS服务器，是一种通用的代理服务器。Socks是个电路级的底层网关，是DavidKoblas在1990年开发的，此后就一直作为Internet RFC标准的开放标准。Socks不要求应用程序遵循特定的操作系统平台，Socks 代理与应用层代理、 HTTP 层代理不同，Socks代理只是简单地传递数据包，而不必关心是何种应用协议（比如FTP、HTTP和NNTP请求）。所以，Socks代理比其他应用层代理要快得多。它通常绑定在代理服务器的1080端口上。如果您在企业网或校园网上，需要透过防火墙或通过代理服务器访问Internet就可能需要使用SOCKS。一般情况下，对于拨号上网用户都不需要使用它。注意，浏览网页时常用的代理服务器通常是专门的http代理，它和SOCKS是不同的。因此，您能浏览网页不等于您一定可以通过SOCKS访问Internet。 常用的防火墙，或代理软件都支持SOCKS，但需要其管理员打开这一功能。如果您不确信您是否需要SOCKS或是否有SOCKS可用，请与您的网络管理员联系。<br>为了使用socks，您需要了解一下内容：<br>① SOCKS服务器的IP地址<br>② SOCKS服务所在的端口<br>③ 这个SOCKS服务是否需要用户认证？如果需要，您要向您的网络管理员申请一个用户和口令<br>知道了上述信息，您就可以把这些信息填入“网络配置”中，或者在第一次登记时填入，您就可以使用socks代理了。<br>在实际应用中SOCKS代理可以用作为：电子邮件、新闻组软件、网络传呼ICQ、网络聊天MIRC和使用代理服务器上联众打游戏等等各种游戏应用软件当中。<br>4.高级匿名代理<br>不改变你的request fields（报文），使服务器端看来就像有个真正的客户浏览器在访问它。当然，你的真实IP是隐藏起来的。服务器的网管不会认为你使用了代理。<br>5.普通匿名代理<br>能隐藏你的真实IP，但会更改你的request fields，有可能会被认为使用了代理，但仅仅是可能，一般说来是没问题的。不过不要受它的名字的误导，其安全性可能比全匿名代理更高，有的代理会剥离你的部分信息（就好比防火墙的stealth mode），使服务器端探测不到你的操作系统版本和浏览器版本。<br>6.elite代理<br>匿名隐藏性更高，可隐藏系统及浏览器资料信息等。此种代理安全性特强。<br>7.透明代理（简单代理）：<br>透明代理的意思是客户端根本不需要知道有代理服务器的存在，它改编你的request fields（报文），并会传送真实IP。注意，加密的透明代理则是属于匿名代理，意思是不用设置使用代理了，例如Garden 2程序。<br>8.其它代理<br>FTP代理：代理客户机上的ftp软件访问ftp服务器，其端口一般为21、2121。<br>POP3代理：代理客户机上的邮件软件用pop3方式收邮件，其端口一般为110。<br>Telnet代理：能够代理通信机的telnet，用于远程控制，入侵时经常使用。其端口一般为23。<br>TUNNEL代理：经HTTPTunnet程序转换的数据包封装成http请求（Request）来穿透防火墙，允许利用HTTP服务器做任何TCP可以做的事情，功能相当于Socks5。<br>文献代理：可以用来查询数据库的代理，通过这些代理，可以获得互联网的相关科研学术的数据库资源，例如查询Sciencedirect网站（简称SD）、Academic Press、IEEE，SPRINGER等数据库。<br>教育网代理：指学术教育机构局域网通过特定的代理服务器可使无出国权限或无访问某IP段权限的计算机访问相关资源。<br>跳板代理：应用于跳板程序，可以看作一种具有动态加密的特殊socks5代理，，也可直接用于PSD软件。其端口一般为1813。<br>Ssso代理：代理客户机上的ssso程序访问远程网站，具有SSL加密强度的超级代理，支持socks。<br>Flat代理：代理客户机上的flatsurfer程序访问远程网站，具有高强度加密数据流的特殊代理，支持socks，最大可设置三次级联，可以设置穿越代理。其端口一般为6700。<br>SoftE代理：代理客户机上的SoftEther程序访问远程网站，应用虚拟集线器HUB和虚拟网卡技术，具备VPN功能及多种认证方式的代理。</p><p>网友们在中国上网最头疼的是什么？网速慢？网络不稳定？NO<del>NO</del>NO<del>NO</del>,在中国上网最头疼的是，永远有一面墙阻碍着你，让你上不了诸如：twitter、Facebook、youtube这些优秀的网站，正因为有了这一面“墙”，我们中国网民才个个都成了翻墙高手。<br>这是不完全翻墙的结果，就是网站能上，视频看不了！</p><p>要想翻墙，就要先了解一下，这面“墙”的工作原理<br>原理：防火长城对所有经过骨干出口路由的在UDP的53端口上的域名查询进行IDS入侵检测，一经发现与黑名单关键词相匹配的域名查询请求，防火长城会马上伪装成目标域名的解析服务器给查询者返回虚假结果。由于通常的域名查询没有任何认证机制，而且域名查询通常基于的UDP协议是无连接不可靠的协议，查询者只能接受最先到达的格式正确结果，并丢弃之后的结果。而用户直接查询境外域名查询服务器（比如 Google Public DNS ）又可能会被防火长城污染，从而在没有任何防范机制的情况下仍然不能获得目标网站正确的IP地址。VIA 维基百科<br>从上面我们了解了GFW（防火长城，又称中国防火墙）的工作原理，下面我们就可以实施翻墙工作。</p><p>翻墙的方式有很多，下面一一介绍<br>1、最简单的翻墙方式——网页代理</p><p>提供网页代理的网站有很多，如</p><p>（1）<a href="http://proxyie.cn/">http://proxyie.cn/</a><br>（2）<a href="http://www.nbdaili.com/">http://www.nbdaili.com/</a><br>（3）<a href="https://member.proxy80.cn/">https://member.proxy80.cn/</a><br>（4）<a href="http://proxy.fengyn.com/">http://proxy.fengyn.com/</a></p><p>网页代理的优点就是方便，随手可得，可是也有很多的缺点，如：不稳定、对部分网页支持不好、有时只能加载主页面（也就是前面所说的不完全翻墙）、而且，网页翻墙遇到关键词屏蔽就没辙了，因为网页代理是透明代理。</p><p>2、HTTP代理<br>HTTP代理就是通过修改浏览器中代理一项来达到翻墙的目的。<br>但是,HTTP代理目前已经很少人去用，因为操作麻烦，代理服务器要自己去找（现在要找到稳定的、速度快的代理服务器也比较难了），而且，HTTP代理也分好几级，有透明代理和加密代理，但现在一般都只能找到透明代理。</p><p>3、HTTP代理以后衍生出的一种代理方式——自动代理<br>自动代理的原理和HTTP代理的原理差不多，只不过自动代理将搜索代理、设置代理都变的自动化，目前自动代理的软件也很多，有自由门、Hotspot Shield Launch等，我用的就是Hotspot Shield Launch，是免费的，只是它会在网页顶放置广告。<br>虽说Hotspot Shield Launch是自动代理的一种，但也属于VPN。</p><p>4、VPN<br>VPN的原理就是在你和服务器中间建立一条加密通道，因为此通道是加密的，所以GFW也奈何不了你，是最好的代理方式。要说缺点，就是目前免费的VPN比较少，都要付费，可也并不贵，上面的Hotspot Shield Launch就是其中一款免费VPN。（VPN也有两种方式，一种是上面的软件，一中是VPN服务商给一个VPN账号和密码，想宽带拨号那样，建立一个连接。）</p><p>前面所说的代理方式一般都要经过外国的服务器，所以网速自然不能保证，那既然GFW只是不让返回一个真实IP地址，那我们就让电脑先知道该网站的IP地址。</p><p>最后介绍的方法就是修改hosts文件<br>hosts文件其实就是一个文本文件，用记事本就可以打开，电脑访问网站，其实是通过以下流程完成的：电脑——检测host说是否有该网站IP（如没有）——ISP——DNS服务器——IP地址——网站服务器，只要电脑检测到host说已经存在该域名的IP地址，就会绕过DNS解析，直接连接对方服务器，因为GFW就是在域名解析这里做手脚，只要绕过就行了。hosts文件路径是：C:\WINDOWS\system32\drivers\etc，目前可以上google搜到这些IP地址。</p><p>改hosts方式翻墙只要按照下面的格式添加就行：IP地址 域名<br>这种方式的优点就是绕过大部分步骤，不用经过国外的转发服务器，访问速度快。<br>但缺点也很明显，由于GFW也检测IP地址，如果多人用这种方式翻墙，GFW很快就会发现并屏蔽，所以生命周期短。而且，因为对方服务器的IP是有限的，当所有IP都被GFW屏蔽以后，这个方法就失效了。<br>所以目前最好的方式还是用VPN，也并不是太贵。</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p><a href="https://www.zhihu.com/question/20377296">https://www.zhihu.com/question/20377296</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies">HTTP所有的百科</a></p><h2 id="MIME-TYPE"><a href="#MIME-TYPE" class="headerlink" title="MIME  TYPE"></a>MIME  TYPE</h2><p><a href="https://www.jianshu.com/p/24c5433ce31b">https://www.jianshu.com/p/24c5433ce31b</a></p><h2 id="HTTP、URL"><a href="#HTTP、URL" class="headerlink" title="HTTP、URL"></a>HTTP、URL</h2><p><a href="https://www.jianshu.com/p/80e25cb1d81a">https://www.jianshu.com/p/80e25cb1d81a</a></p><p>Http协议定义了很多与服务器交互的方法，最基本的有4种，分别是GET,POST,PUT,DELETE. 一个URL地址用于描述一个网络上的资源，而HTTP中的GET, POST, PUT, DELETE就对应着对这个资源的查，改，增，删4个操作。 我们最常见的就是GET和POST了。GET一般用于获取/查询资源信息，而POST一般用于更新资源信息.</p><p>HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。URL是一种特殊类型的URI，包含了用于查找某个资源的足够的信息</p><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a><strong>URL</strong></h3><p>全称是UniformResourceLocator, 中文叫统一资源定位符,是互联网上用来标识某一处资源的地址。以下面这个URL为例，介绍下普通URL的各部分组成：</p><p><a href="https://link.jianshu.com/?t=http://www.aspxfans.com:8080/news/index.asp?boardID=5&ID=24618&page=1#name">http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name</a></p><p>从上面的URL可以看出，一个完整的URL包括以下几部分：<br> 1.协议部分：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。在”HTTP”后面的“//”为分隔符</p><p>2.域名部分：该URL的域名部分为“<a href="https://link.jianshu.com/?t=http://www.aspxfans.com">www.aspxfans.com</a>”。一个URL中，也可以使用IP地址作为域名使用</p><p>3.端口部分：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口</p><p>4.虚拟目录部分：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“/news/”</p><p>5.文件名部分：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.asp”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名</p><p>6.锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分</p><p>7.参数部分：从“？”开始到“#”为止之间的部分为参数部分，又称<strong>搜索部分、查询部分</strong>。本例中的参数部分为“boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符。</p><h3 id><a href="#" class="headerlink" title></a></h3><h3 id="X-Forwarded-For-XFF"><a href="#X-Forwarded-For-XFF" class="headerlink" title="X-Forwarded-For (XFF)"></a><strong>X-Forwarded-For</strong> <strong>(XFF)</strong></h3><ul><li><strong>用来获取最初发起请求的客户端的IP地址</strong></li></ul><pre><code class="hljs xml">X-Forwarded-For: <span class="hljs-tag">&lt;<span class="hljs-name">client</span>&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">proxy1</span>&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">proxy2</span>&gt;</span></code></pre><ul><li><client><p>客户端的IP地址。</p></client></li><li><p><proxy1>, <proxy2></proxy2></proxy1></p><p>如果一个请求经过了多个代理服务器，那么每一个代理服务器的IP地址都会被依次记录在内。也就是说，最右端的IP地址表示最近通过的代理服务器，而最左端的IP地址表示最初发起请求的客户端的IP地址。</p></li></ul><p>eg：</p><pre><code class="hljs html">X-Forwarded-For: 2001:db8:85a3:8d3:1319:8a2e:370:7348X-Forwarded-For: 203.0.113.195X-Forwarded-For: 203.0.113.195, 70.41.3.18, 150.172.238.178</code></pre><p>因为 IP 是一个一个依次 push 进去的，那么第一个 IP 就是用户的真实 IP，取来用就好了。</p><p><strong>但是，事实有这么简单吗？</strong></p><blockquote><p>拓展：<a href="https://www.cnblogs.com/skychx/p/X-Forwarded-For-get-real-IP.html"><strong>你确信 X-Forwarded-For 拿到的就是用户真实 IP 吗？</strong></a></p></blockquote><h4 id="CTF相关"><a href="#CTF相关" class="headerlink" title="CTF相关"></a>CTF相关</h4><h5 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h5><p>从安全的角度上考虑，整个系统最不安全的就是人，用户端都是最好攻破最好伪造的。有些用户就开始钻协议的漏洞：<code>X-Forwarded-For</code> 是代理服务器添加的，如果我一开始请求的 Header 头里就加了 <code>X-Forwarded-For</code> ，不就骗过服务器了吗？</p><p><strong>1.</strong> 首先从客户端发出请求，带有 <code>X-Forwarded-For</code> 请求头，里面写一个伪造的 IP：</p><pre><code class="hljs groovy">X-Forwarded-<span class="hljs-attr">For:</span> fakeIP</code></pre><p><strong>2.</strong> 服务端第一层代理服务收到请求，发现已经有 <code>X-Forwarded-For</code>，误把这个请求当成代理服务器，于是向这个字段追加了客户端的真实 IP：</p><pre><code class="hljs axapta">X-Forwarded-For: fakeIP, <span class="hljs-keyword">client</span></code></pre><p><strong>3.</strong> 经过几层代理后，最终的服务器拿到的 Header 是这样的：</p><pre><code class="hljs apache"><span class="hljs-attribute">X</span>-Forwarded-For: fakeIP, client, proxy<span class="hljs-number">1</span>, proxy<span class="hljs-number">2</span></code></pre><p>要是按照取 <code>X-Forwarded-For</code> 第一个 IP 的思路，你就着了攻击者的道了，你拿到的是 fakeIP，而不是 client IP。</p><h5 id="破招"><a href="#破招" class="headerlink" title="破招"></a>破招</h5><ol><li>服务端如何破招？上面三个步骤：</li></ol><ul><li><p>第一步是客户端造假，服务器无法介入</p></li><li><p>第二步是代理服务器，可控，可防范</p></li><li><p>第三步是应用服务器，可控，可防范</p><p>2.第二步的破解我拿 Nginx 服务器举例。</p></li></ul><p>我们在最外层的 Nginx 上，对 <code>X-Forwarded-For</code> 的配置如下：</p><pre><code class="hljs nginx"><span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$remote_addr</span>;</code></pre><p>什么意思呢？就是<strong>最外层代理服务器不信任客户端的 <code>X-Forwarded-For</code> 输入，直接覆盖，而不是追加</strong>。</p><p>非最外层的 Nginx 服务器，我们配置：</p><pre><code class="hljs nginx"><span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;</code></pre><p><code>$proxy_add_x_forwarded_for</code> 就是追加 IP 的意思。通过这招，就可以破解用户端的伪造办法。</p><p>第三步的破解思路也很容易，正常思路我们是取<code>X-Forwarded-For</code> 最左侧的 IP，这次我们反其道而行之，<strong>从右边数，减去代理服务器的数目</strong>，那么剩下的 IP 里，最右边的就是真实 IP。</p><pre><code class="hljs apache"><span class="hljs-attribute">X</span>-Forwarded-For: fakeIP, client, proxy<span class="hljs-number">1</span>, proxy<span class="hljs-number">2</span></code></pre><p>比如说我们已知代理服务有两层，从右向左数，把 <code>proxy1</code> 和 <code>proxy2</code> 去掉，剩下的 IP 列表最右边的就是真实 IP。。</p><h3 id="5-一句话总结总结"><a href="#5-一句话总结总结" class="headerlink" title="5.一句话总结总结"></a><strong>5.一句话总结总结</strong></h3><p>通过 <code>X-Forwarded-For</code> 获取用户真实 IP 时，最好不要取第一个 IP，以防止用户伪造 IP。</p><h2 id="DNS服务器"><a href="#DNS服务器" class="headerlink" title="DNS服务器"></a>DNS服务器</h2><p><a href="https://zhuanlan.zhihu.com/p/139303753">https://zhuanlan.zhihu.com/p/139303753</a></p><p>我们在上网的时候，通常输入的是网址，其实这就是一个域名，而我们计算机网络上的计算机彼此之间只能用IP地址才能相互识别。将域名映射为IP地址的过程就称为“域名解析”。在Internet上域名与IP地址之间是一对一（或者多对一）的，也可采用DNS轮循实现一对多，域名虽然便于人们记忆，但机器之间只认IP地址，它们之间的转换工作称为域名解析，域名解析需要由专门的域名解析服务器来完成，<strong>DNS就是进行域名解析的服务器。</strong></p><p><img src="https://s3.ax1x.com/2020/11/26/DBYQsS.jpg" alt="DBYQsS.jpg"></p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p><a href="https://zhuanlan.zhihu.com/p/22396872">https://zhuanlan.zhihu.com/p/22396872</a></p><p><a href="https://www.kancloud.cn/kancloud/http-cookies-explained/48325">https://www.kancloud.cn/kancloud/http-cookies-explained/48325</a></p><p>简单地说，cookie 就是浏览器储存在用户电脑上的一小段文本文件。cookie 是纯文本格式，不包含任何可执行的代码。一个 Web 页面或服务器告知浏览器按照一定规范来储存这些信息，并在随后的请求中将这些信息发送至服务器，Web 服务器就可以使用这些信息来识别不同的用户。大多数需要登录的网站在用户验证成功之后都会设置一个 cookie，只要这个 cookie 存在并可以，用户就可以自由浏览这个网站的任意页面。再次说明，cookie 只包含数据，就其本身而言并不有害。</p><h2 id="hackbar"><a href="#hackbar" class="headerlink" title="hackbar"></a>hackbar</h2><p><strong>Encryption**</strong>:对数据进行加密(有多种加密形式)；**<br><strong>Encoding</strong>:各类编码；**<br><strong>SQL</strong>:SQL注入；<br><strong>XSS</strong>:XSS攻击；<br><strong>LFI</strong>:LFI漏洞；<br><strong>XXE*:XXE攻击；:其他选项，包含Jsonify,Uppercase,Lowercase;**<br>*<em>Load URL</em>:加载网址，将网址加载进框，便于修改；</strong><br><strong>Split URL*:切分网址，自动切分，快速找出需要改的地方；**<br>*<em>Execute</em>:执行，相当于F5；</strong><br>*<em>Post data</em>:将要发送的数据填入此处；**<br><strong>Referer*:刷新；<br>*<em>User Agent</em>:用户代理；</strong></p><p>Cookies*:网页cookie;<br>*<em>Clear ALL</em>:清除全部;</p><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><h3 id="学习地址"><a href="#学习地址" class="headerlink" title="学习地址"></a>学习地址</h3><p><a href="https://www.php.cn/php/php-variables.html">https://www.php.cn/php/php-variables.html</a></p><h3 id="弱类型比较"><a href="#弱类型比较" class="headerlink" title="弱类型比较"></a>弱类型比较</h3><p><strong>php中有两种比较的符号 == 与 ===</strong></p><p>=== 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较</p><p>== 在进行比较的时候，会先将字符串类型转化成相同，再比较</p><pre><code class="hljs plain">如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且比较按照数值来进行</code></pre><p><strong>这里明确了说如果一个数值和字符串进行比较的时候，会将字符串转换成数值</strong></p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>var_dump(<span class="hljs-string">&quot;admin&quot;</span>==<span class="hljs-number">0</span>);  <span class="hljs-comment">//true</span>var_dump(<span class="hljs-string">&quot;1admin&quot;</span>==<span class="hljs-number">1</span>); <span class="hljs-comment">//true</span>var_dump(<span class="hljs-string">&quot;admin1&quot;</span>==<span class="hljs-number">1</span>) <span class="hljs-comment">//false</span>var_dump(<span class="hljs-string">&quot;admin1&quot;</span>==<span class="hljs-number">0</span>) <span class="hljs-comment">//true</span>var_dump(<span class="hljs-string">&quot;0e123456&quot;</span>==<span class="hljs-string">&quot;0e4456789&quot;</span>); <span class="hljs-comment">//true</span><span class="hljs-meta">?&gt;</span>  <span class="hljs-comment">//上述代码可自行测试</span></code></pre><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>观察上述代码，<span class="hljs-string">&quot;admin&quot;</span>==<span class="hljs-number">0</span> 比较的时候，会将admin转化成数值，强制转化,由于admin是字符串，转化的结果是<span class="hljs-number">0</span>自然和<span class="hljs-number">0</span>相等<span class="hljs-symbol">2 </span><span class="hljs-string">&quot;1admin&quot;</span>==<span class="hljs-number">1</span> 比较的时候会将<span class="hljs-number">1</span>admin转化成数值,结果为<span class="hljs-number">1</span>，而“admin1“==<span class="hljs-number">1</span> 却等于错误，也就是<span class="hljs-string">&quot;admin1&quot;</span>被转化成了<span class="hljs-number">0</span>,为什么呢？？<span class="hljs-symbol">3 </span><span class="hljs-string">&quot;0e123456&quot;</span>==<span class="hljs-string">&quot;0e456789&quot;</span>相互比较的时候，会将<span class="hljs-number">0e</span>这类字符串识别为科学技术法的数字，<span class="hljs-number">0</span>的无论多少次方都是零，所以相等</code></pre><p><strong>对于上述的问题我查了php手册</strong></p><pre><code class="hljs cpp">当一个字符串欸当作一个数值来取值，其结果和类型如下:如果该字符串没有包含<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>并且其数值值在整形的范围之内该字符串被当作<span class="hljs-keyword">int</span>来取值，其他所有情况下都被作为<span class="hljs-keyword">float</span>来取值，该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为<span class="hljs-number">0</span>。</code></pre><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>&lt;?php<span class="hljs-symbol">2 </span>$test=<span class="hljs-number">1</span> + <span class="hljs-string">&quot;10.5&quot;</span>; // $test=<span class="hljs-number">11.5</span>(float)<span class="hljs-symbol">3 </span>$test=<span class="hljs-number">1</span>+<span class="hljs-string">&quot;-1.3e3&quot;</span>; //$test=-<span class="hljs-number">1299</span>(float)<span class="hljs-symbol">4 </span>$test=<span class="hljs-number">1</span>+<span class="hljs-string">&quot;bob-1.3e3&quot;</span>;//$test=<span class="hljs-number">1</span>(<span class="hljs-keyword">int</span>)<span class="hljs-symbol">5 </span>$test=<span class="hljs-number">1</span>+<span class="hljs-string">&quot;2admin&quot;</span>;//$test=<span class="hljs-number">3</span>(<span class="hljs-keyword">int</span>)<span class="hljs-symbol">6 </span>$test=<span class="hljs-number">1</span>+<span class="hljs-string">&quot;admin2&quot;</span>;//$test=<span class="hljs-number">1</span>(<span class="hljs-keyword">int</span>)<span class="hljs-symbol">7 </span>?&gt;</code></pre><p><strong>所以就解释了”admin1”==1 =&gt;False 的原因</strong></p><p>eg：<strong>在进行弱类型比较时，会将0e这类字符串识别为科学技术法的数字，0的无论多少次方都是零，所以相等</strong></p><pre><code class="hljs awk">var_dump(<span class="hljs-string">&quot;0e123456&quot;</span>==<span class="hljs-string">&quot;0e99999&quot;</span>); <span class="hljs-regexp">//</span>true</code></pre><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201124162604179.png" alt="image-20201124162604179"></p><h2 id="CTF-wp"><a href="#CTF-wp" class="headerlink" title="CTF wp:"></a>CTF wp:</h2><h5 id="3-get-改数据"><a href="#3-get-改数据" class="headerlink" title="3.get 改数据"></a>3.get 改数据</h5><p>后的/ 有无都可以，但？后面都是参数，？表示与URL区分开</p><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201124163935858.png" alt="image-20201124163935858"></p><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201123215715570.png" alt="image-20201123215715570"></p><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201123215746483.png" alt="image-20201123215746483"></p><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201123215914938.png" alt="image-20201123215914938"></p><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201123220511840.png" alt="image-20201123220511840"></p><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201123222055181.png" alt="image-20201123222055181"></p><h5 id="4-POST改数据"><a href="#4-POST改数据" class="headerlink" title="4.POST改数据"></a>4.POST改数据</h5><h6 id="1-鼠标不要在空白区域点击，不然会悄悄产生换行符导致长度不一样所以flag不同"><a href="#1-鼠标不要在空白区域点击，不然会悄悄产生换行符导致长度不一样所以flag不同" class="headerlink" title="1.鼠标不要在空白区域点击，不然会悄悄产生换行符导致长度不一样所以flag不同"></a>1.鼠标不要在空白区域点击，不然会悄悄产生换行符导致长度不一样所以flag不同</h6><h6 id="2-用Burp-Suite来传参，不过要把GET改成POST，还要加一行"><a href="#2-用Burp-Suite来传参，不过要把GET改成POST，还要加一行" class="headerlink" title="2.用Burp Suite来传参，不过要把GET改成POST，还要加一行"></a>2.<strong>用Burp Suite来传参，不过要把GET改成POST，还要加一行</strong></h6><pre><code class="hljs isbl"><span class="hljs-variable">Content</span>-<span class="hljs-variable">Type</span>:<span class="hljs-variable"><span class="hljs-class">application</span></span>/<span class="hljs-variable">x</span>-<span class="hljs-variable">www</span>-<span class="hljs-variable">form</span>-<span class="hljs-function"><span class="hljs-title">urlencoded</span>(;<span class="hljs-variable">charset</span>=<span class="hljs-variable">utf</span>-<span class="hljs-number">8</span>)</span></code></pre><p>![img](file:///D:\Relax\pc qq\1245614980\1245614980\Image\C2C\M_@V9DG~<code>J&#123;E</code><a href="mailto:&#x37;&#x40;&#x54;&#x30;&#x49;&#73;&#x5f;&#x59;&#83;&#x34;&#x2e;&#x70;&#110;&#x67;">&#x37;&#x40;&#x54;&#x30;&#x49;&#73;&#x5f;&#x59;&#83;&#x34;&#x2e;&#x70;&#110;&#x67;</a>)</p><p>hackbar:</p><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201124005036223.png" alt="image-20201124005036223"></p><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201124005116193.png" alt="image-20201124005116193"></p><h5 id="5-矛盾"><a href="#5-矛盾" class="headerlink" title="5.矛盾"></a>5.矛盾</h5><p><strong>is_numeric</strong> <strong>—</strong> <strong>检测变量是否为数字</strong></p><p><strong>是数字和数字字符串则返回</strong> TRUE，否则返回FALSE</p><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201124163747842.png" alt="image-20201124163747842"></p><h6 id="复习HTTP"><a href="#复习HTTP" class="headerlink" title="复习HTTP"></a>复习HTTP</h6><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.aspxfans.com:<span class="hljs-number">8080</span><span class="hljs-regexp">/news/i</span>ndex.asp?boardID=<span class="hljs-number">5</span>&amp;ID=<span class="hljs-number">24618</span>&amp;page=<span class="hljs-number">1</span><span class="hljs-comment">#name</span></code></pre><ol><li>文件名部分：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“<strong>index.asp</strong>”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名</li><li>锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分</li><li><strong>参数部分</strong>：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符</li></ol><h5 id="6-web3"><a href="#6-web3" class="headerlink" title="6.web3"></a>6.web3</h5><p>解码</p><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201124171828760.png" alt="image-20201124171828760"></p><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201124171805841.png" alt="image-20201124171805841"></p><h5 id="7-域名解析（可）"><a href="#7-域名解析（可）" class="headerlink" title="7.域名解析（可）"></a>7.域名解析（可）</h5><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201124172429240.png" alt="image-20201124172429240"></p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201124172510561.png" alt="image-20201124172510561" style="zoom: 67%;"><h5 id="8-停下来"><a href="#8-停下来" class="headerlink" title="8.停下来"></a>8.停下来</h5><p><img src="/.io//Users\12456\AppData\Roaming\Typora\typora-user-images\image-20201124173221050.png" alt="image-20201124173221050"></p><p>多按几次发送就好了</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF,计算机基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客如何插入图片</title>
    <link href="/2020/11/11/hexo%E5%8D%9A%E5%AE%A2%E5%A6%82%E4%BD%95%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/hexo%E5%8D%9A%E5%AE%A2%E5%A6%82%E4%BD%95%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
    <url>/2020/11/11/hexo%E5%8D%9A%E5%AE%A2%E5%A6%82%E4%BD%95%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/hexo%E5%8D%9A%E5%AE%A2%E5%A6%82%E4%BD%95%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo博客如何插入图片"><a href="#hexo博客如何插入图片" class="headerlink" title="hexo博客如何插入图片"></a>hexo博客如何插入图片</h1><p>在直白的文章中，图片总是点睛之笔的</p><p>用markdow写的博客，想插入些图片，但是发现不管是直接拖进来也好，还是链接引用，在md文件显示正常，但是不管是本地端hexo s,还是远程域名，博客页面端都无法显示图片，因为照片没有地址/链接，markdown调用的是本地文件夹</p><img src="/.io//Users\12456\Pictures\微信图片_20200826185343.jpg" alt="微信图片_20200826185343" style="zoom: 25%;">   <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://s3.ax1x.com/2020/11/11/BvM5kR.jpg" height="120/">  <p>因此，查找万能的Google，选用如下办法</p><h2 id="1-利用图床获得图片链接"><a href="#1-利用图床获得图片链接" class="headerlink" title="1. 利用图床获得图片链接"></a>1. 利用图床获得图片链接</h2><p>进入网站<a href="https://imgchr.com/%EF%BC%88%E6%97%A0%E9%9C%80%E6%A2%AF%E5%AD%90%EF%BC%8C%E5%85%8D%E8%B4%B9">https://imgchr.com/（无需梯子，免费</a>), 上传照片，获得链接</p><blockquote><img src="https://s3.ax1x.com/2020/11/11/BvtdnP.png" border="0"></blockquote><h2 id="2-在markdown文档中插入图片链接"><a href="#2-在markdown文档中插入图片链接" class="headerlink" title="2. 在markdown文档中插入图片链接"></a>2. 在markdown文档中插入图片链接</h2><ul><li>直接复制链接（第二行/第四行）粘贴到文档里时注意删掉    href的&lt;&gt; / 后面括号()里的链接    ，不然点图片是进入链接，不是放大</li></ul><ul><li><h4 id="简单点（中间链接是图片URL"><a href="#简单点（中间链接是图片URL" class="headerlink" title="简单点（中间链接是图片URL)"></a>简单点（中间链接是图片URL)</h4></li></ul><pre><code class="hljs text">&lt;img src=&quot;https://s3.ax1x.com/2020/11/11/BvtQ0K.jpg&quot;&gt;</code></pre><h2 id="3-HTML格式小tips："><a href="#3-HTML格式小tips：" class="headerlink" title="3. HTML格式小tips："></a>3. HTML格式小tips：</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li><p>给图片添加注释，居中，一点小渲染</p><p>在markdown中插入如下html代码</p></li></ul><pre><code class="hljs yaml"><span class="hljs-string">&lt;center&gt;</span>    <span class="hljs-string">&lt;img</span> <span class="hljs-string">style=&quot;border-radius:</span> <span class="hljs-number">0.</span><span class="hljs-string">3125em;</span>    <span class="hljs-attr">box-shadow:</span> <span class="hljs-number">0</span> <span class="hljs-string">2px</span> <span class="hljs-string">4px</span> <span class="hljs-number">0</span> <span class="hljs-string">rgba(34,36,38,.12),0</span> <span class="hljs-string">2px</span> <span class="hljs-string">10px</span> <span class="hljs-number">0</span> <span class="hljs-string">rgba(34,36,38,.08);&quot;</span>     <span class="hljs-string">src=&quot;这里输入图片URL链接&quot;&gt;</span>    <span class="hljs-string">&lt;br&gt;</span>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">style=&quot;color:orange;</span> <span class="hljs-attr">border-bottom:</span> <span class="hljs-string">1px</span> <span class="hljs-string">solid</span> <span class="hljs-comment">#d9d9d9;</span>    <span class="hljs-attr">display:</span> <span class="hljs-string">inline-block;</span>    <span class="hljs-attr">color:</span> <span class="hljs-comment">#999;</span>    <span class="hljs-attr">padding:</span> <span class="hljs-string">2px;&quot;&gt;这里输入注释&lt;/div&gt;</span><span class="hljs-string">&lt;/center&gt;</span></code></pre><h3 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h3><ul><li>html图片在markdown中无缩放选项，需利用html代码来实现，详情见<a href="https://www.w3school.com.cn/tags/att_img_height-width.asp">html教程</a></li><li><strong>简单点</strong>：<strong>在img标签里面只设置宽，不设置高，图片就会等比例缩放。</strong>)(好像改变height/width效果一样的)</li></ul><h1 id="更新-转载他人的办法-不用图床法"><a href="#更新-转载他人的办法-不用图床法" class="headerlink" title="更新(转载他人的办法,不用图床法)"></a>更新(转载他人的办法,不用图床法)</h1><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>(1)在hexo目录下，安装插件：</p><pre><code class="hljs text">npm install hexo-asset-image --save</code></pre><p>(2)在hexo\source 目录下新建一个img文件夹，把图片放置在里面；<br>(3)在xxx.md文件中引用图片：</p><pre><code class="hljs markdown">![<span class="hljs-string">header</span>](<span class="hljs-link"> img/header.jpg</span>)</code></pre><p><img src="/.io//nw.jpg" alt="nw"></p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>(1)在全局配置文件（<code>hexo/config.yml</code>)中:</p><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span></code></pre><p>做了这个修改的效果是，<br>新建文章post时，会自动生成和文章名相同的文件夹。<br>这个文件夹存放当前文章所用图片的地方。</p><p>以 <code>$ hexo new &quot;文章&quot;</code> 为例，结构如下：</p><pre><code class="hljs css">文章├── <span class="hljs-selector-tag">picture1</span><span class="hljs-selector-class">.jpg</span>├── <span class="hljs-selector-tag">picture2</span><span class="hljs-selector-class">.jpg</span>└── <span class="hljs-selector-tag">picture3</span><span class="hljs-selector-class">.jpg</span>文章<span class="hljs-selector-class">.md</span></code></pre><p>(2)创建文章（在创建的时候，会在hexo/source/_post目录下，生成一个XXX.md文件和一个XXX的文件夹）：</p><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;XXX&quot;</span></code></pre><p>(3)把XXX这个博文需要展示的图片放在XXX文件夹目录下；<br>(4)在XXX.md文件中<em>相对路径</em>引入图片的方式：</p><pre><code class="hljs text">![alt](test.jpg)</code></pre><img src="/.io//nw.jpg" alt="nw" style="zoom: 25%;"><hr><p>完事</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://s3.ax1x.com/2020/11/11/BvtQ0K.jpg"> </center>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何搭建个人博客</title>
    <link href="/2020/11/07/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2020/11/07/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="如何搭建个人博客"><a href="#如何搭建个人博客" class="headerlink" title="如何搭建个人博客"></a>如何搭建个人博客</h1><p>2020-11-07 21:21:33</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://s1.ax1x.com/2020/11/11/BvAsW4.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">博客界面示例</div> </center><h2 id="why博客？"><a href="#why博客？" class="headerlink" title="why博客？"></a>why博客？</h2><ul><li>想先说一下这个古老的东西“博客”，有人说博客已经过时了，现在大多数人都用手机看朋友圈、微博等。是的，但是每当从google或者百度上找到一篇优质的资料我发现是出自个人博客的概率很大。</li><li>曾经问过一个大佬在学习上又没有什么习惯或者技巧，他说“我每当解决一个问题之后都会总结并记录下来”。是的自己也深有体会，每次google半天解决的问题，不做记录的话过一段时间再遇到一样会去google半天去找，可能这就是平常人与大佬们的区别吧。</li><li>最后用在一个个人博客上看到的一句话来开始这篇文章“对任何渴望进步的人来说，写博客/文章/回答对自己的成长帮助都是巨大的。频率和数量不必过分强求，有话要说就写写，没事就歇歇，随意点。<u><em>因为坚持写作的那一刻起，你就已经开始受益。</em></u></li></ul><h2 id="wordpress和hexo哪个更适合用来搭建个人博客？"><a href="#wordpress和hexo哪个更适合用来搭建个人博客？" class="headerlink" title="wordpress和hexo哪个更适合用来搭建个人博客？"></a>wordpress和hexo哪个更适合用来搭建个人博客？</h2><p>目前搭建独立的个人博客有很多种方式，你可以选择购买主机搭建动态博客 - <a href="https://zh-cn.wordpress.com/">WordPress</a>等，也可以使用Github Pages来搭建一个静态的个人博客。</p><h3 id="WordPress-获得个人网站域名来搭建个人博客"><a href="#WordPress-获得个人网站域名来搭建个人博客" class="headerlink" title="WordPress:获得个人网站域名来搭建个人博客"></a>WordPress:获得个人网站域名来搭建个人博客</h3><ul><li>域名是网站的入口，也是网站的第一印象，比如饿了么的官网的域名是：<a href="https://www.ele.me/">https://www.ele.me/</a> ，很是巧妙。常见的有com,cn,net,org等后缀，也有小众的xyz,me,io等后缀，域名是可以购买的，根据你自己的喜好，选择不同的后缀。很多小众奇特的后缀在大陆是没办法备案的，网站也就无法上线。然而使用GitHub托管我们的网站，完全不需要备案，因为托管我们的网站内容的服务器在美国，而且在国内备案流程也比较繁杂，时间需要一周左右。<br>申请域名的地方有很多，域名购买是要花钱的，热门网站：<a href="https://cn.aliyun.com/">阿里云</a><br>如果你已经有了空闲域名就无需购买，直接使用即可。<br>ps:注册一个Github账号，申请学生包可以获得一个免费的顶级域名</li></ul><h3 id="使用-GitHub-Pages-服务搭建博客："><a href="#使用-GitHub-Pages-服务搭建博客：" class="headerlink" title="使用 GitHub Pages 服务搭建博客："></a><strong>使用 GitHub Pages 服务搭建博客：</strong></h3><ol><li>全是静态文件，访问速度快；</li><li>免费方便，不用花钱就可以搭建个人博客，不需要服务器不需要后台；</li><li>可以随意绑定自己的域名；</li><li>数据绝对安全，基于 GitHub 的版本管理，想恢复到哪个历史版本都行；</li><li>博客内容可以轻松打包、转移、发布到其它平台；</li><li>自己可以随性所欲的设计，美观大气上档次；</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li><p>有服务器的选择 WP，写文章方便，适合搭好了之后给没有程序基础的人使用。<br>没服务器的，喜欢简洁的使用 Hexo。可以折腾，而且也优雅。</p></li><li><p>我选择了现在很热门的Github Pages + Hexo 的方式来搭建独立的个人博客。<br>wordpress如何搭建见 <a href="https://www.zhihu.com/question/20463581">https://www.zhihu.com/question/20463581</a></p></li></ul><hr><h2 id="用hexo搭建博客大致流程"><a href="#用hexo搭建博客大致流程" class="headerlink" title="用hexo搭建博客大致流程"></a>用hexo搭建博客大致流程</h2><ol><li>有一个 GitHub 账号，没有的话去注册一个；</li><li>安装 node.js、npm，并了解相关基础知识；</li><li>安装 git for windows（或者其它 git 客户端）；</li></ol><h3 id="一-注册GitHub账号"><a href="#一-注册GitHub账号" class="headerlink" title="一 . 注册GitHub账号"></a>一 . 注册GitHub账号</h3><ul><li>进入GitHub官网<a href="github.com/">github.com</a>，新用户注册，<strong>记住</strong>注册的账号名和邮箱，后面会用到。</li><li>ps: 如果是学生，还可以获得GitHub提供的丰厚学生包</li></ul><h4 id="GitHub学生包申请（最好申请）"><a href="#GitHub学生包申请（最好申请）" class="headerlink" title="GitHub学生包申请（最好申请）"></a>GitHub学生包申请（最好申请）</h4><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://s3.ax1x.com/2020/11/11/BvZuLR.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">GitHub学生包</div> </center><ul><li><p>为什么要申请GitHub学生包</p><p>Github 学生包包含很多开发者工具，比较吸引的是 DigitalOcean 的 50美元 代金券和 NameCheap 的免费 .me 域名和 Comodo 的 SSL 证书,免费薅羊毛不要白不要</p></li><li><p>申请条件</p><p>年龄大于 13 岁并正在进行可能被授予学位或学历的课程，意味着你从初中开始就可以申请学生包了。你只需要一个学校提供的电子邮箱地址，或有效的学生证件或是任何官方入学证明。</p></li><li><p>申请教程</p><p>这里不多阐述，可以在网上随意的找到，附上一个CSDN里的教程：<a href="https://blog.csdn.net/qq_36667170/article/details/79084166">Github学生包申请</a></p></li></ul><h3 id="二-GitHub创建一个仓库"><a href="#二-GitHub创建一个仓库" class="headerlink" title="二 . GitHub创建一个仓库"></a>二 . GitHub创建一个仓库</h3><ul><li>登录完成之后，在你的主页点击图标 Start a project 创建一个新的仓库，或者右上角的+ New repository来新建仓库</li></ul><blockquote><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://s1.ax1x.com/2020/11/11/BjzgsO.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">创建仓库</div> </center></blockquote><ul><li>因为我们是使用 Github Pages 去搭建我们的静态博客，所以版本库的名称是 <strong>你的用户名+.github.io</strong>。<br>如：我的用户名是：luoman666，那么仓库的名字应该是： luoman666.github.io ，<strong>这个是一定不能出错的</strong>。因为之后你将要访问的你的博客地址就是： <a href="https://luoman666.github.io/">https://luoman666.github.io</a> ,这个就是你博客的域名</li></ul><blockquote><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://s1.ax1x.com/2020/11/11/BvC7NQ.jpg">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">因为我创建过，所以这里是警告⚠</div> </center></blockquote><h2 id="未完待续……-（溜掉嘿嘿）"><a href="#未完待续……-（溜掉嘿嘿）" class="headerlink" title="未完待续……..（溜掉嘿嘿）"></a>未完待续……..（溜掉嘿嘿）</h2>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
